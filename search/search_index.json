{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udde0 Learning Hub Documentation","text":"<p>Welcome to the Learning Hub \u2014 a curated collection of notes, tutorials, and explanations on programming, machine learning, data science, mathematics, and more.</p> <p>Whether you're a beginner exploring the fundamentals or an advanced practitioner diving into research concepts, this documentation is built to guide, explain, and inspire.</p>"},{"location":"#what-youll-find-here","title":"\ud83d\udcda What You'll Find Here","text":"<ul> <li> <p>\ud83e\uddee Mathematics   Key concepts, formulas, and derivations \u2014 from calculus and linear algebra to probability and statistics.</p> </li> <li> <p>\ud83d\udcbb Python Programming   Core syntax, tips, and patterns with real-world examples.</p> </li> <li> <p>\ud83d\udcca Data Science &amp; Machine Learning   Tutorials, model explanations, evaluation metrics, and project notes.</p> </li> <li> <p>\ud83e\udd16 Deep Learning   Concepts like neural networks, CNNs, RNNs, LSTMs, and Transformers with diagrams and PyTorch examples.</p> </li> <li> <p>\ud83e\uddea Experiments &amp; Projects   Step-by-step walkthroughs of hands-on projects, datasets, and applied learning.</p> </li> </ul>"},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>Use the navigation menu on the left to browse topics. Each section contains structured pages with clear titles and math-rendered derivations where applicable.</p>"},{"location":"#tech-stack","title":"\ud83d\udee0\ufe0f Tech Stack","text":"<p>This documentation is built with:</p> <ul> <li>MkDocs \u2013 Static site generator for project docs.</li> <li>Material for MkDocs \u2013 Clean, responsive theme.</li> <li>MathJax / pymdownx.arithmatex \u2013 For LaTeX-style math rendering.</li> <li>Python, NumPy, Pandas, PyTorch \u2013 For code examples.</li> </ul>"},{"location":"#access-online","title":"\ud83c\udf10 Access Online","text":"<p>View this documentation site at: \ud83d\udd17 https://sntoshsah.github.io/learning_hub/</p>"},{"location":"#author","title":"\ud83d\udc64 Author","text":"<p>Santosh Kumar Sah Data Science &amp; AI Enthusiast \ud83d\udce7 sahsantosh257@gmail.com \ud83d\udccd Nepal</p> <p>\u201cLearning never exhausts the mind.\u201d \u2014 Leonardo da Vinci</p> <p>Happy learning! \ud83d\ude80</p>"},{"location":"contact/","title":"Welcome to My Portfolio","text":"<p>Hi, I'm Santosh Kumar Sah \ud83d\udc4b A passionate AI Engineer and Data Science Enthusiast working at Pixelvirt Technology. I thrive at the intersection of technology and innovation, exploring areas like:</p> <ul> <li>Artificial Intelligence &amp; Machine Learning</li> <li>Data Science &amp; Visualization</li> </ul> <p>Explore my projects, read my blog, or get in touch!</p>"},{"location":"contact/#contact","title":"Contact","text":"<p>Reach out to me for collaborations or opportunities!</p> <ul> <li>Email: sahsantosh257@gmail.com</li> <li>GitHub: https://github.com/sntoshsah</li> <li>LinkedIn: https://linkedin.com/in/sahsntosh</li> </ul>"},{"location":"Learning_resources/Blog/Alembic/","title":"Alembic SQLite Tutorial","text":""},{"location":"Learning_resources/Blog/Alembic/#step-1-create-a-test-project","title":"\ud83d\udccc Step 1: Create a Test Project","text":"<pre><code>mkdir alembic_sqlite_test\ncd alembic_sqlite_test\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\npip install alembic sqlalchemy\n</code></pre>"},{"location":"Learning_resources/Blog/Alembic/#step-2-initialize-alembic","title":"\ud83d\udccc Step 2: Initialize Alembic","text":"<pre><code>alembic init alembic\n</code></pre> <p>This creates:</p> <ul> <li><code>alembic/</code> (migrations folder)</li> <li><code>alembic.ini</code> (config file)</li> </ul>"},{"location":"Learning_resources/Blog/Alembic/#step-3-configure-alembic-for-sqlite","title":"\ud83d\udccc Step 3: Configure Alembic for SQLite","text":"<p>Edit <code>alembic.ini</code> and update the database URL:</p> <pre><code>sqlalchemy.url = sqlite:///test.db\n</code></pre> <p>This sets up an SQLite database file named <code>test.db</code>.</p>"},{"location":"Learning_resources/Blog/Alembic/#step-4-create-a-sqlalchemy-model","title":"\ud83d\udccc Step 4: Create a SQLAlchemy Model","text":"<p>Create a <code>models.py</code> file in the project root:</p> <pre><code>from sqlalchemy import Column, Integer, String\nfrom sqlalchemy.orm import declarative_base\n\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = 'users'\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50))\n    email = Column(String(100), unique=True)\n</code></pre>"},{"location":"Learning_resources/Blog/Alembic/#step-5-link-models-with-alembic","title":"\ud83d\udccc Step 5: Link Models with Alembic","text":"<p>Edit <code>alembic/env.py</code> and find this line:</p> <pre><code>target_metadata = None\n</code></pre> <p>Replace it with:</p> <pre><code>from models import Base\ntarget_metadata = Base.metadata\n</code></pre>"},{"location":"Learning_resources/Blog/Alembic/#step-6-generate-and-apply-migrations","title":"\ud83d\udccc Step 6: Generate and Apply Migrations","text":""},{"location":"Learning_resources/Blog/Alembic/#generate-migration","title":"Generate Migration","text":"<pre><code>alembic revision --autogenerate -m \"create users table\"\n</code></pre> <p>This creates a migration file inside <code>alembic/versions/</code>.</p>"},{"location":"Learning_resources/Blog/Alembic/#apply-migration","title":"Apply Migration","text":"<pre><code>alembic upgrade head\n</code></pre> <p>This applies the migration and creates the <code>users</code> table in <code>test.db</code>.</p>"},{"location":"Learning_resources/Blog/Alembic/#step-7-modify-the-model-and-apply-another-migration","title":"\ud83d\udccc Step 7: Modify the Model and Apply Another Migration","text":"<p>Modify <code>models.py</code> to add a <code>created_at</code> column:</p> <pre><code>from sqlalchemy import DateTime, func\n\nclass User(Base):\n    __tablename__ = 'users'\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50))\n    email = Column(String(100), unique=True)\n    created_at = Column(DateTime, default=func.now())  # New column\n</code></pre>"},{"location":"Learning_resources/Blog/Alembic/#generate-migration_1","title":"Generate Migration","text":"<pre><code>alembic revision --autogenerate -m \"add created_at column\"\n</code></pre>"},{"location":"Learning_resources/Blog/Alembic/#apply-migration_1","title":"Apply Migration","text":"<pre><code>alembic upgrade head\n</code></pre>"},{"location":"Learning_resources/Blog/Alembic/#step-8-rollback-a-migration","title":"\ud83d\udccc Step 8: Rollback a Migration","text":"<p>To undo the last migration:</p> <pre><code>alembic downgrade -1\n</code></pre> <p>To downgrade to a specific revision:</p> <pre><code>alembic downgrade &lt;revision_id&gt;\n</code></pre> <p>Find <code>&lt;revision_id&gt;</code> in the <code>alembic/versions/</code> folder.</p>"},{"location":"Learning_resources/Blog/Alembic/#summary-of-commands","title":"\u2705 Summary of Commands","text":"Command Description <code>alembic init alembic</code> Initialize Alembic <code>alembic revision --autogenerate -m \"message\"</code> Generate migration <code>alembic upgrade head</code> Apply migrations <code>alembic downgrade -1</code> Undo the last migration <p>This is a fully working Alembic setup with SQLite! \ud83d\ude80</p>"},{"location":"Learning_resources/Blog/Docker/","title":"Docker","text":"<p>Docker is a platform for developing, shipping, and running applications in lightweight, portable containers. Since you're using Ubuntu, Docker works seamlessly with Linux-based systems.</p> <p>Key Docker Concepts</p> <ul> <li> <p>Container: A lightweight, standalone executable package that includes everything needed to run an application.</p> </li> <li> <p>mage: A template used to create containers. It contains the application code and dependencies.</p> </li> <li> <p>Dockerfile: A script that contains instructions to build a Docker image.</p> </li> <li>Volume: A way to persist data outside the container\u2019s lifecycle.</li> <li>Network: Allows communication between containers.</li> <li>Docker Hub: A cloud-based registry to store and share Docker images.</li> </ul> <p>Installing Docker on Ubuntu</p> <p>Run the following commands: <pre><code>sudo apt update\nsudo apt install -y docker.io\n</code></pre> Verify installation: <pre><code>docker --version\n</code></pre> To enable and start Docker: <pre><code>sudo systemctl enable --now docker\n</code></pre> To allow running Docker without sudo: <pre><code>sudo usermod -aG docker $USER\nnewgrp docker\n</code></pre> Basic Docker Commands</p> <ol> <li>Working with Images</li> </ol> <p>Search for images on Docker Hub: <pre><code>docker search ubuntu\n</code></pre></p> <p>Download an image: <pre><code>docker pull ubuntu\n</code></pre> List downloaded images: <pre><code>docker images\n</code></pre> Remove an image: <pre><code>docker rmi image_id\n</code></pre> 2. Working with Containers</p> <p>Run a container interactively: <pre><code>docker run -it ubuntu bash\n</code></pre> Run a container in the background: <pre><code>docker run -d --name my_container ubuntu\n</code></pre> List running containers: <pre><code>docker ps\n</code></pre> List all containers (including stopped ones): <pre><code>docker ps -a\n</code></pre> Stop a running container: <pre><code>docker stop container_id\n</code></pre> Remove a container: <pre><code>docker rm container_id\n</code></pre> View container logs: <pre><code>docker logs container_id\n</code></pre> 3. Building Custom Images</p> <p>Create a Dockerfile: <pre><code># Use Ubuntu as the base image\nFROM ubuntu:latest\n\n# Install necessary packages\nRUN apt update &amp;&amp; apt install -y python3\n\n# Set the default command\nCMD [\"python3\", \"--version\"]\n</code></pre> Build an image: <pre><code>docker build -t my_custom_image .\n</code></pre> Run a container from the custom image: <pre><code>docker run my_custom_image\n</code></pre> 4. Managing Volumes (Persistent Storage)</p> <p>Create a volume: <pre><code>docker volume create my_volume\n</code></pre> Mount a volume to a container: <pre><code>docker run -v my_volume:/data ubuntu\n</code></pre> 5. Networking in Docker</p> <p>List available networks: <pre><code>docker network ls\n</code></pre> Create a new network: <pre><code>docker network create my_network\n</code></pre> Run a container in a network: <pre><code>docker run --network my_network --name container1 ubuntu\n</code></pre></p>"},{"location":"Learning_resources/Blog/Docker/#docker-vs-docker-compose","title":"Docker vs Docker Compose","text":"<p>Both Docker and Docker Compose help in containerization, but they serve different purposes. 1. Docker:</p> <p>Docker is a tool that allows you to build, run, and manage containers. It operates at the container level (one container at a time). Requires you to manually start, stop, and configure containers.</p> <p>Example: Running a single container <pre><code>docker run -d --name my_app -p 5000:5000 my_image\n</code></pre> 2. Docker Compose:</p> <p>Docker Compose is a tool for managing multiple containers as a single application. Uses a YAML file (docker-compose.yml) to define and configure services. Simplifies the process of starting and stopping multi-container applications.</p> <p>Example: Running multiple containers with Docker Compose</p> <p>Instead of running multiple docker run commands, define everything in a docker-compose.yml file.</p> <p>docker-compose.yml <pre><code>version: '3'\nservices:\n  app:\n    image: my_app\n    ports:\n      - \"5000:5000\"\n  db:\n    image: postgres\n    environment:\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n</code></pre> Run the entire stack with: <pre><code>docker-compose up -d\n</code></pre> Stop all services with: <pre><code>docker-compose down\n</code></pre></p> <p>Key Differences</p> <p>Docker vs Docker Compose</p> <p>Both Docker and Docker Compose help in containerization, but they serve different purposes. 1. Docker:</p> <pre><code>Docker is a tool that allows you to build, run, and manage containers.\nIt operates at the container level (one container at a time).\nRequires you to manually start, stop, and configure containers.\n</code></pre> <p>Example: Running a single container</p> <p>docker run -d --name my_app -p 5000:5000 my_image</p> <ol> <li> <p>Docker Compose:</p> <p>Docker Compose is a tool for managing multiple containers as a single application. Uses a YAML file (docker-compose.yml) to define and configure services. Simplifies the process of starting and stopping multi-container applications.</p> </li> </ol> <p>Example: Running multiple containers with Docker Compose</p> <p>Instead of running multiple docker run commands, define everything in a docker-compose.yml file. docker-compose.yml <pre><code>version: '3'\nservices:\n  app:\n    image: my_app\n    ports:\n      - \"5000:5000\"\n  db:\n    image: postgres\n    environment:\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n</code></pre> Run the entire stack with: <pre><code>docker-compose up -d\n</code></pre> Stop all services with: <pre><code>docker-compose down\n</code></pre> Key Differences</p> Feature Docker Docker Compose Scope Single container Multi-container applications Configuration Command-line flags YAML file (docker-compose.yml) Startup Command docker run docker-compose up Scaling Manual Built-in scaling (docker-compose up --scale app=3) Best for Simple apps Complex, multi-container setups <p>When to Use Which?</p> <pre><code>Use Docker for single-container applications or quick testing.\nUse Docker Compose when dealing with multiple services (e.g., app + database + cache).\n</code></pre> <p>Would you like a hands-on example with Docker Compose? You said: Provide me a syntax and rules to be followed to create a docker compose file. ChatGPT said: ChatGPT Docker Compose Syntax &amp; Rules</p> <p>A docker-compose.yml file is used to define multi-container applications. It follows YAML syntax and consists of structured sections. Basic Syntax</p> <p>version: '3'  # Specify Docker Compose version services:   service_name:     image: image_name  # Use an existing image or build from Dockerfile     build: ./path-to-dockerfile  # (Optional) Build an image from a Dockerfile     container_name: custom_name  # (Optional) Name the container     restart: always  # Restart policy (always, unless-stopped, on-failure, no)     ports:       - \"host_port:container_port\"  # Expose ports     environment:       - VAR_NAME=value  # Environment variables     volumes:       - host_path:container_path  # Mount volumes     networks:       - my_network  # Connect to a custom network     depends_on:       - other_service  # Define dependencies</p> <p>networks:   my_network:  # Define a custom network</p> <p>volumes:   my_volume:  # Define a named volume</p> <p>Rules for Writing a Docker Compose File</p> <pre><code>Use Correct Indentation\n    YAML is indentation-sensitive (use spaces, not tabs).\nDefine the Version\n    Use a supported Docker Compose version (e.g., '3', '3.8').\nList Services Under services:\n    Each container (service) must be defined under the services: section.\nUse Proper Data Types\n    Strings: \"string_value\"\n    Integers: 123\n    Booleans: true or false\n    Lists: - item1\nUse ports: Correctly\n    \"8000:80\" \u2192 Maps host port 8000 to container port 80.\nUse volumes: for Persistent Data\n    /data inside a container should map to a host directory or a named volume.\nDefine networks: for Container Communication\n    Containers on the same network can communicate using service names.\n</code></pre> <p>Example: Running a Flask App with PostgreSQL docker-compose.yml</p> <p>version: '3.8'</p> <p>services:   web:     build: .     container_name: flask_app     ports:       - \"5000:5000\"     depends_on:       - db     environment:       - DATABASE_URL=postgresql://user:password@db:5432/mydatabase     networks:       - app_network</p> <p>db:     image: postgres     container_name: postgres_db     restart: always     environment:       POSTGRES_USER: user       POSTGRES_PASSWORD: password       POSTGRES_DB: mydatabase     volumes:       - pg_data:/var/lib/postgresql/data     networks:       - app_network</p> <p>networks:   app_network:</p> <p>volumes:   pg_data:</p> <p>How to Use Docker Compose</p> <pre><code>Start Services (detached mode):\n</code></pre> <p>docker-compose up -d</p> <p>Stop Services:</p> <p>docker-compose down</p> <p>View Running Containers:</p> <p>docker-compose ps</p> <p>Check Logs:</p> <p>docker-compose logs -f</p> <p>Rebuild the Images (if changes are made):</p> <pre><code>docker-compose up --build\n</code></pre>"},{"location":"Learning_resources/Blog/Linux_Commands/","title":"Linux System Commands Documentation","text":""},{"location":"Learning_resources/Blog/Linux_Commands/#introduction","title":"Introduction","text":"<p>Linux provides a powerful command-line interface that allows users to interact with the system efficiently. This documentation covers essential Linux commands and their explanations.</p>"},{"location":"Learning_resources/Blog/Linux_Commands/#file-and-directory-management","title":"File and Directory Management","text":""},{"location":"Learning_resources/Blog/Linux_Commands/#ls","title":"<code>ls</code>","text":"<ul> <li>Usage: <code>ls [options] [directory]</code></li> <li>Description: Lists files and directories in the specified directory.</li> <li>Example:   <pre><code>ls -la\n</code></pre>   Lists all files including hidden ones in long format.</li> </ul>"},{"location":"Learning_resources/Blog/Linux_Commands/#cd","title":"<code>cd</code>","text":"<ul> <li>Usage: <code>cd [directory]</code></li> <li>Description: Changes the current working directory.</li> <li>Example:   <pre><code>cd /var/www\n</code></pre>   Navigates to the <code>/var/www</code> directory.</li> </ul>"},{"location":"Learning_resources/Blog/Linux_Commands/#pwd","title":"<code>pwd</code>","text":"<ul> <li>Usage: <code>pwd</code></li> <li>Description: Prints the current working directory.</li> <li>Example:   <pre><code>pwd\n</code></pre>   Displays the full path of the current directory.</li> </ul>"},{"location":"Learning_resources/Blog/Linux_Commands/#mkdir","title":"<code>mkdir</code>","text":"<ul> <li>Usage: <code>mkdir [directory_name]</code></li> <li>Description: Creates a new directory.</li> <li>Example:   <pre><code>mkdir new_folder\n</code></pre>   Creates a directory named <code>new_folder</code>.</li> </ul>"},{"location":"Learning_resources/Blog/Linux_Commands/#rm","title":"<code>rm</code>","text":"<ul> <li>Usage: <code>rm [options] [file/directory]</code></li> <li>Description: Removes files or directories.</li> <li>Example:   <pre><code>rm -r my_folder\n</code></pre>   Recursively removes <code>my_folder</code> and its contents.</li> </ul>"},{"location":"Learning_resources/Blog/Linux_Commands/#user-management","title":"User Management","text":""},{"location":"Learning_resources/Blog/Linux_Commands/#whoami","title":"<code>whoami</code>","text":"<ul> <li>Usage: <code>whoami</code></li> <li>Description: Displays the current logged-in user.</li> </ul>"},{"location":"Learning_resources/Blog/Linux_Commands/#id","title":"<code>id</code>","text":"<ul> <li>Usage: <code>id [username]</code></li> <li>Description: Shows user ID (UID) and group ID (GID).</li> </ul>"},{"location":"Learning_resources/Blog/Linux_Commands/#sudo","title":"<code>sudo</code>","text":"<ul> <li>Usage: <code>sudo [command]</code></li> <li>Description: Executes a command as a superuser.</li> </ul>"},{"location":"Learning_resources/Blog/Linux_Commands/#process-management","title":"Process Management","text":""},{"location":"Learning_resources/Blog/Linux_Commands/#ps","title":"<code>ps</code>","text":"<ul> <li>Usage: <code>ps aux</code></li> <li>Description: Displays running processes.</li> </ul>"},{"location":"Learning_resources/Blog/Linux_Commands/#kill","title":"<code>kill</code>","text":"<ul> <li>Usage: <code>kill [PID]</code></li> <li>Description: Terminates a process by its process ID.</li> </ul>"},{"location":"Learning_resources/Blog/Linux_Commands/#htop","title":"<code>htop</code>","text":"<ul> <li>Usage: <code>htop</code></li> <li>Description: Interactive process viewer.</li> </ul>"},{"location":"Learning_resources/Blog/Linux_Commands/#systemctl","title":"<code>systemctl</code>","text":"<ul> <li>Usage: <code>systemctl [action] [service]</code></li> <li>Description: Manages system services.</li> <li>Example:   <pre><code>systemctl restart apache2\n</code></pre>   Restarts the Apache service.</li> </ul>"},{"location":"Learning_resources/Blog/Linux_Commands/#service","title":"<code>service</code>","text":"<ul> <li>Usage: <code>service [service_name] [action]</code></li> <li>Description: Controls system services.</li> <li>Example:   <pre><code>service nginx status\n</code></pre>   Shows the status of the Nginx service.</li> </ul>"},{"location":"Learning_resources/Blog/Linux_Commands/#networking","title":"Networking","text":""},{"location":"Learning_resources/Blog/Linux_Commands/#ifconfig","title":"<code>ifconfig</code>","text":"<ul> <li>Usage: <code>ifconfig</code></li> <li>Description: Displays network interface information.</li> </ul>"},{"location":"Learning_resources/Blog/Linux_Commands/#ping","title":"<code>ping</code>","text":"<ul> <li>Usage: <code>ping [hostname/IP]</code></li> <li>Description: Checks connectivity to a host.</li> </ul>"},{"location":"Learning_resources/Blog/Linux_Commands/#wget","title":"<code>wget</code>","text":"<ul> <li>Usage: <code>wget [URL]</code></li> <li>Description: Downloads files from the internet.</li> </ul>"},{"location":"Learning_resources/Blog/Linux_Commands/#ssh","title":"<code>ssh</code>","text":"<ul> <li>Usage: <code>ssh [user]@[host]</code></li> <li>Description: Connects to a remote server via SSH.</li> <li>Example:   <pre><code>ssh user@192.168.1.1\n</code></pre>   Connects to the server at <code>192.168.1.1</code> as <code>user</code>.</li> </ul>"},{"location":"Learning_resources/Blog/Linux_Commands/#scp","title":"<code>scp</code>","text":"<ul> <li>Usage: <code>scp [file] [user]@[host]:[destination]</code></li> <li>Description: Securely copies files between local and remote machines.</li> <li>Example:   <pre><code>scp myfile.txt user@192.168.1.1:/home/user/\n</code></pre>   Copies <code>myfile.txt</code> to the remote server.</li> </ul>"},{"location":"Learning_resources/Blog/Linux_Commands/#rsync","title":"<code>rsync</code>","text":"<ul> <li>Usage: <code>rsync -avz [source] [destination]</code></li> <li>Description: Synchronizes files between local and remote locations efficiently.</li> <li>Example:   <pre><code>rsync -avz /local/path/ user@remote:/remote/path/\n</code></pre>   Synchronizes <code>/local/path/</code> to <code>/remote/path/</code> on the remote server.</li> </ul>"},{"location":"Learning_resources/Blog/Linux_Commands/#system-monitoring","title":"System Monitoring","text":""},{"location":"Learning_resources/Blog/Linux_Commands/#top","title":"<code>top</code>","text":"<ul> <li>Usage: <code>top</code></li> <li>Description: Displays real-time system performance.</li> </ul>"},{"location":"Learning_resources/Blog/Linux_Commands/#df","title":"<code>df</code>","text":"<ul> <li>Usage: <code>df -h</code></li> <li>Description: Shows disk space usage.</li> </ul>"},{"location":"Learning_resources/Blog/Linux_Commands/#free","title":"<code>free</code>","text":"<ul> <li>Usage: <code>free -m</code></li> <li>Description: Displays memory usage.</li> </ul>"},{"location":"Learning_resources/Blog/Linux_Commands/#uptime","title":"<code>uptime</code>","text":"<ul> <li>Usage: <code>uptime</code></li> <li>Description: Shows how long the system has been running.</li> </ul>"},{"location":"Learning_resources/Blog/Linux_Commands/#netstat","title":"<code>netstat</code>","text":"<ul> <li>Usage: <code>netstat -tulnp</code></li> <li>Description: Displays active network connections.</li> </ul>"},{"location":"Learning_resources/Blog/Linux_Commands/#file-permissions","title":"File Permissions","text":""},{"location":"Learning_resources/Blog/Linux_Commands/#chmod","title":"<code>chmod</code>","text":"<ul> <li>Usage: <code>chmod [permissions] [file]</code></li> <li>Description: Changes file permissions.</li> <li>Example:   <pre><code>chmod 755 script.sh\n</code></pre>   Grants execute permissions.</li> </ul>"},{"location":"Learning_resources/Blog/Linux_Commands/#chown","title":"<code>chown</code>","text":"<ul> <li>Usage: <code>chown [owner]:[group] [file]</code></li> <li>Description: Changes file owner and group.</li> </ul>"},{"location":"Learning_resources/Blog/Linux_Commands/#conclusion","title":"Conclusion","text":"<p>These commands provide a solid foundation for working with Linux systems. Understanding and mastering them will help you efficiently manage files, users, processes, and system resources.</p>"},{"location":"Learning_resources/Blog/sigmoid%20function/","title":"Sigmoid Function Derivation","text":"<p>The sigmoid function is a common activation function used in machine learning and statistics, especially in binary classification and logistic regression.</p>"},{"location":"Learning_resources/Blog/sigmoid%20function/#1-definition-of-sigmoid-function","title":"\u2705 1. Definition of Sigmoid Function","text":"<p>The sigmoid function is defined as:</p> \\[ \\sigma(x) = \\frac{1}{1 + e^{-x}} \\] <p>It maps any real-valued number into the range \\( (0, 1) \\), making it useful for probability-based tasks.</p>"},{"location":"Learning_resources/Blog/sigmoid%20function/#2-why-this-form","title":"\u270f\ufe0f 2. Why This Form?","text":"<p>The sigmoid function arises naturally in logistic regression, where we model the log-odds of a binary outcome as a linear function of the input.</p> <p>We want a function that: - Outputs values between 0 and 1 (interpreted as probabilities), - Is smooth and differentiable, - Is monotonic (increasing), - Approaches 1 as \\( x \\to \\infty \\), and 0 as \\( x \\to -\\infty \\).</p>"},{"location":"Learning_resources/Blog/sigmoid%20function/#3-derivation-from-logistic-model","title":"\ud83d\udca1 3. Derivation from Logistic Model","text":"<p>Start with the log-odds (logit) expression:</p> \\[ \\log\\left(\\frac{p}{1 - p}\\right) = x \\] <p>Solve for \\( p \\):</p> \\[ \\frac{p}{1 - p} = e^x \\Rightarrow p = e^x (1 - p) \\Rightarrow p = e^x - e^x p \\Rightarrow p(1 + e^x) = e^x \\Rightarrow p = \\frac{e^x}{1 + e^x} \\] <p>Rewriting:</p> \\[ p = \\frac{1}{1 + e^{-x}} = \\sigma(x) \\]"},{"location":"Learning_resources/Blog/sigmoid%20function/#derivative-of-the-sigmoid-function","title":"\ud83d\udcd0 Derivative of the Sigmoid Function","text":"<p>Let:</p> \\[ y = \\sigma(x) = \\frac{1}{1 + e^{-x}} \\] <p>We want to find:</p> \\[ \\frac{dy}{dx} = \\frac{d}{dx} \\left( \\frac{1}{1 + e^{-x}} \\right) \\]"},{"location":"Learning_resources/Blog/sigmoid%20function/#use-the-chain-rule","title":"\u270f\ufe0f Use the Chain Rule","text":"<p>It's easier to rewrite the expression as:</p> \\[ y = (1 + e^{-x})^{-1} \\] <p>Differentiate using the chain rule:</p> \\[ \\frac{dy}{dx} = -1 \\cdot (1 + e^{-x})^{-2} \\cdot \\frac{d}{dx}(1 + e^{-x}) \\] \\[ \\frac{dy}{dx} = - (1 + e^{-x})^{-2} \\cdot (-e^{-x}) \\] \\[ \\frac{dy}{dx} = \\frac{e^{-x}}{(1 + e^{-x})^2} \\]"},{"location":"Learning_resources/Blog/sigmoid%20function/#express-in-terms-of-sigmax","title":"\ud83d\udca1 Express in Terms of \\( \\sigma(x) \\)","text":"<p>Recall:</p> \\[ \\sigma(x) = \\frac{1}{1 + e^{-x}}, \\quad 1 - \\sigma(x) = \\frac{e^{-x}}{1 + e^{-x}} \\] <p>So:</p> \\[ \\frac{dy}{dx} = \\sigma(x) \\cdot (1 - \\sigma(x)) \\]"},{"location":"Learning_resources/Blog/sigmoid%20function/#final-result","title":"\u2705 Final Result","text":"\\[ \\frac{d}{dx} \\sigma(x) = \\sigma(x) (1 - \\sigma(x)) \\]"},{"location":"Learning_resources/Blog/sigmoid%20function/#summary","title":"\ud83d\udd01 Summary","text":"Property Formula Sigmoid Function \\( \\sigma(x) = \\frac{1}{1 + e^{-x}} \\) Derivative \\( \\sigma'(x) = \\sigma(x)(1 - \\sigma(x)) \\) Range \\( (0, 1) \\) Applications Logistic Regression, Neural Networks <p>\ud83d\udca1 This function is widely used for binary classification tasks and as an activation function in shallow neural networks.</p>"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/","title":"Asymptotic Notations and Analysis","text":""},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#introduction-to-asymptotic-analysis","title":"Introduction to Asymptotic Analysis","text":"<p>Asymptotic analysis is a method of describing the limiting behavior of algorithms as the input size grows towards infinity. It provides fundamental metrics for comparing algorithm efficiency independent of machine-specific constants.</p>"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#types-of-asymptotic-notations","title":"Types of Asymptotic Notations","text":""},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#1-big-o-notation-o-upper-bound","title":"1. Big-O Notation (O) - Upper Bound","text":"<p>Definition: </p> <pre><code>f(n) = O(g(n)) if there exist positive constants c and n\u2080 such that:\n0 \u2264 f(n) \u2264 c\u00b7g(n) for all n \u2265 n\u2080\n</code></pre> <p>Interpretation: </p> <ul> <li>\"f(n) grows no faster than g(n)\"</li> <li>Worst-case scenario for algorithm complexity</li> </ul> <p>Example: <pre><code>3n\u00b2 + 2n + 1 = O(n\u00b2) with c=6 and n\u2080=1\nBecause 3n\u00b2 + 2n + 1 \u2264 6n\u00b2 for all n\u22651\n</code></pre></p>"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#2-omega-notation-lower-bound","title":"2. Omega Notation (\u03a9) - Lower Bound","text":"<p>Definition: <pre><code>f(n) = \u03a9(g(n)) if there exist positive constants c and n\u2080 such that:\n0 \u2264 c\u00b7g(n) \u2264 f(n) for all n \u2265 n\u2080\n</code></pre></p> <p>Interpretation:</p> <ul> <li>\"f(n) grows at least as fast as g(n)\"</li> <li>Best-case scenario for algorithm complexity</li> </ul> <p>Example: <pre><code>3n\u00b2 + 2n + 1 = \u03a9(n\u00b2) with c=1 and n\u2080=0\nBecause n\u00b2 \u2264 3n\u00b2 + 2n + 1 for all n\u22650\n</code></pre></p>"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#3-theta-notation-tight-bound","title":"3. Theta Notation (\u0398) - Tight Bound","text":"<p>Definition: <pre><code>f(n) = \u0398(g(n)) if there exist positive constants c\u2081, c\u2082 and n\u2080 such that:\n0 \u2264 c\u2081\u00b7g(n) \u2264 f(n) \u2264 c\u2082\u00b7g(n) for all n \u2265 n\u2080\n</code></pre></p> <p>Interpretation:</p> <ul> <li>\"f(n) grows exactly as g(n)\"</li> <li>Both upper and lower bounds match</li> </ul> <p>Example: <pre><code>3n\u00b2 + 2n + 1 = \u0398(n\u00b2) with c\u2081=1, c\u2082=6, n\u2080=1\nBecause n\u00b2 \u2264 3n\u00b2 + 2n + 1 \u2264 6n\u00b2 for all n\u22651\n</code></pre></p>"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#4-little-o-notation-o-strict-upper-bound","title":"4. Little-o Notation (o) - Strict Upper Bound","text":"<p>Definition: <pre><code>f(n) = o(g(n)) if for any positive constant c, there exists n\u2080 such that:\n0 \u2264 f(n) &lt; c\u00b7g(n) for all n \u2265 n\u2080\n</code></pre></p> <p>Interpretation:</p> <ul> <li>\"f(n) grows strictly slower than g(n)\"</li> <li>Stronger statement than Big-O</li> </ul>"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#5-little-omega-notation-strict-lower-bound","title":"5. Little-omega Notation (\u03c9) - Strict Lower Bound","text":"<p>Definition: <pre><code>f(n) = \u03c9(g(n)) if for any positive constant c, there exists n\u2080 such that:\n0 \u2264 c\u00b7g(n) &lt; f(n) for all n \u2265 n\u2080\n</code></pre></p> <p>Interpretation:</p> <ul> <li>\"f(n) grows strictly faster than g(n)\"</li> <li>Stronger statement than Omega</li> </ul>"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#calculating-asymptotic-complexity","title":"Calculating Asymptotic Complexity","text":""},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#method-1-direct-analysis","title":"Method 1: Direct Analysis","text":"<p>Steps:</p> <ol> <li>Identify the dominant term (highest order term)</li> <li>Drop constant coefficients</li> <li>Express using appropriate asymptotic notation</li> </ol> <p>Example: <pre><code>T(n) = 5n\u00b3 + 2n\u00b2 + 100n + 1000\nDominant term: 5n\u00b3\nDrop coefficient: n\u00b3\nThus, T(n) = \u0398(n\u00b3)\n</code></pre></p>"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#method-2-limit-comparison","title":"Method 2: Limit Comparison","text":"<p>Compute: <pre><code>lim (n\u2192\u221e) f(n)/g(n)\n</code></pre></p> <p>Results:</p> <ul> <li>If limit = constant &gt; 0 \u2192 f(n) = \u0398(g(n))</li> <li>If limit = 0 \u2192 f(n) = o(g(n)) and O(g(n))</li> <li>If limit = \u221e \u2192 f(n) = \u03c9(g(n)) and \u03a9(g(n))</li> </ul> <p>Example: <pre><code>Compare n\u00b2 and n\u00b3:\nlim (n\u2192\u221e) n\u00b2/n\u00b3 = 0 \u21d2 n\u00b2 = o(n\u00b3)\n</code></pre></p>"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#master-theorem-for-divide-and-conquer-recurrences","title":"Master Theorem for Divide-and-Conquer Recurrences","text":"<p>The Master Theorem provides a cookbook solution for recurrences of the form: <pre><code>T(n) = a\u00b7T(n/b) + f(n)\nwhere a \u2265 1, b &gt; 1, and f(n) is asymptotically positive\n</code></pre></p>"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#case-1-leaf-dominated","title":"Case 1: Leaf Dominated","text":"<p>If f(n) = O(n^(log_b(a - \u03b5))) for some \u03b5 &gt; 0, then: <pre><code>T(n) = \u0398(n^(log_b a))\n</code></pre></p>"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#case-2-balanced","title":"Case 2: Balanced","text":"<p>If f(n) = \u0398(n^(log_b a)), then: <pre><code>T(n) = \u0398(n^(log_b a) \u00b7 log n)\n</code></pre></p>"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#case-3-root-dominated","title":"Case 3: Root Dominated","text":"<p>If f(n) = \u03a9(n^(log_b(a + \u03b5))) for some \u03b5 &gt; 0,  and a\u00b7f(n/b) \u2264 c\u00b7f(n) for some c &lt; 1 and large n, then: <pre><code>T(n) = \u0398(f(n))\n</code></pre></p>"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#examples","title":"Examples:","text":"<ol> <li> <p>Binary Search: <pre><code>T(n) = T(n/2) + \u0398(1)\na=1, b=2 \u2192 log_b a = 0\nf(n) = \u0398(1) = \u0398(n^0) \u2192 Case 2\nThus, T(n) = \u0398(log n)\n</code></pre></p> </li> <li> <p>Merge Sort: <pre><code>T(n) = 2T(n/2) + \u0398(n)\na=2, b=2 \u2192 log_b a = 1\nf(n) = \u0398(n) = \u0398(n^1) \u2192 Case 2\nThus, T(n) = \u0398(n log n)\n</code></pre></p> </li> <li> <p>Recursive Tree Traversal: <pre><code>T(n) = 3T(n/4) + \u0398(n\u00b2)\na=3, b=4 \u2192 log_4 3 \u2248 0.793\nf(n) = \u0398(n\u00b2) \u2192 Case 3 (n\u00b2 vs n^0.793)\nCheck regularity: 3(n/4)\u00b2 \u2264 cn\u00b2 for c=3/4 &lt; 1\nThus, T(n) = \u0398(n\u00b2)\n</code></pre></p> </li> </ol>"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#advanced-asymptotic-concepts","title":"Advanced Asymptotic Concepts","text":""},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#1-polynomial-vs-exponential","title":"1. Polynomial vs Exponential","text":"<ul> <li>Polynomial: n^O(1)</li> <li>Exponential: 2^O(n)</li> </ul>"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#2-polylogarithmic","title":"2. Polylogarithmic","text":"<ul> <li>(log n)^O(1)</li> </ul>"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#3-sublinear","title":"3. Sublinear","text":"<ul> <li>o(n) (e.g., \u221an, log n)</li> </ul>"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#4-subexponential","title":"4. Subexponential","text":"<ul> <li>2^o(n)</li> </ul>"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#solving-recurrence-relations","title":"Solving Recurrence Relations","text":""},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#1-substitution-method","title":"1. Substitution Method","text":"<p>Steps:</p> <ol> <li>Guess the form of solution</li> <li>Use induction to verify</li> <li>Solve for constants</li> </ol> <p>Example: <pre><code>T(n) = 2T(n/2) + n\nGuess T(n) = O(n log n)\nAssume T(k) \u2264 ck log k for k &lt; n\nShow T(n) \u2264 cn log n\n</code></pre></p>"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#2-recursion-tree-method","title":"2. Recursion Tree Method","text":"<p>Steps:</p> <ol> <li>Draw tree of recursive calls</li> <li>Sum costs at each level</li> <li>Sum all levels</li> </ol> <p>Example: <pre><code>T(n) = 3T(n/4) + \u0398(n\u00b2)\nLevel 0: cn\u00b2\nLevel 1: 3c(n/4)\u00b2\nLevel 2: 9c(n/16)\u00b2\n...\nSum converges to geometric series\n</code></pre></p>"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#3-akra-bazzi-method-generalized-master-theorem","title":"3. Akra-Bazzi Method (Generalized Master Theorem)","text":"<p>For recurrences of form: <pre><code>T(n) = \u03a3 a_i T(n/b_i) + f(n)\n</code></pre></p> <p>Solution: <pre><code>T(n) = \u0398(n^p (1 + \u222b(f(u)/u^{p+1} du)))\nwhere p satisfies \u03a3 a_i / b_i^p = 1\n</code></pre></p>"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#common-complexity-classes","title":"Common Complexity Classes","text":"Notation Name Example Algorithms O(1) Constant Array access, Hash table lookup O(log n) Logarithmic Binary search O(n) Linear Linear search O(n log n) Linearithmic Merge sort, Heap sort O(n\u00b2) Quadratic Bubble sort, Insertion sort O(n\u00b3) Cubic Naive matrix multiplication O(2^n) Exponential Subset generation O(n!) Factorial Permutation generation"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#practical-calculation-examples","title":"Practical Calculation Examples","text":""},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#example-1-nested-loops","title":"Example 1: Nested Loops","text":"<p><pre><code>for i in range(n):         # O(n)\n    for j in range(i, n):  # O(n-i)\n        print(i, j)\n</code></pre> Analysis: Total operations = \u03a3 (from i=0 to n-1) (n-i) = n + (n-1) + ... + 1 = n(n+1)/2 Thus, O(n\u00b2)</p>"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#example-2-logarithmic-complexity","title":"Example 2: Logarithmic Complexity","text":"<p><pre><code>i = 1\nwhile i &lt; n:     # Log steps\n    i *= 2       # Double each time\n</code></pre> Analysis: Loop runs until 2^k \u2265 n \u21d2 k = log\u2082n Thus, O(log n)</p>"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#example-3-multiple-terms","title":"Example 3: Multiple Terms","text":"<p><pre><code>for i in range(n):     # O(n)\n    for j in range(10): # O(1)\n        print(i, j)\nfor k in range(n):     # O(n)\n    print(k)\n</code></pre> Analysis: First part: O(n) * O(1) = O(n) Second part: O(n) Total: O(n) + O(n) = O(n)</p>"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#limitations-of-asymptotic-analysis","title":"Limitations of Asymptotic Analysis","text":"<ol> <li>Hidden constants: O(n) may be worse than O(n\u00b2) for small n</li> <li>Input characteristics: Assumes worst-case input</li> <li>Machine factors: Ignores hardware-specific optimizations</li> <li>Recursive overhead: Function call costs may be significant</li> </ol>"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#advanced-topics","title":"Advanced Topics","text":""},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#1-smoothness-rule","title":"1. Smoothness Rule","text":"<p>If f(n) is smooth (eventually non-decreasing) and b \u2265 2 is integer, then: <pre><code>f(n) = \u0398(f(bn))\n</code></pre></p>"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#2-harmonic-series","title":"2. Harmonic Series","text":"<pre><code>H_n = \u03a3 (1/k) for k=1 to n = \u0398(log n)\n</code></pre>"},{"location":"Learning_resources/DSA/Asymptotic%20Notations/#3-stirlings-approximation","title":"3. Stirling's Approximation","text":"<pre><code>log(n!) = \u0398(n log n)\n</code></pre> <p>Asymptotic analysis provides the fundamental language for comparing algorithm efficiency, enabling computer scientists to make meaningful comparisons independent of implementation details or hardware considerations.</p>"},{"location":"Learning_resources/DSA/Dynamic_Programming/","title":"Dynamic Programming: Concepts and Applications","text":""},{"location":"Learning_resources/DSA/Dynamic_Programming/#introduction-to-dynamic-programming","title":"Introduction to Dynamic Programming","text":"<p>Dynamic Programming (DP) is a powerful algorithmic technique for solving complex problems by breaking them down into simpler subproblems. It follows the principle of optimal substructure (problems can be solved optimally by combining optimal solutions to subproblems) and overlapping subproblems (the same subproblems are solved multiple times).</p>"},{"location":"Learning_resources/DSA/Dynamic_Programming/#key-characteristics","title":"Key Characteristics:","text":"<ol> <li>Memoization: Storing results of expensive function calls</li> <li>Tabulation: Building a table bottom-up to store solutions</li> <li>Reuse: Avoiding recomputation by storing intermediate results</li> </ol>"},{"location":"Learning_resources/DSA/Dynamic_Programming/#when-to-use-dynamic-programming","title":"When to Use Dynamic Programming","text":"<p>DP is effective for problems that exhibit: - Optimal substructure - Overlapping subproblems - Recursive nature - Combinatorial complexity</p>"},{"location":"Learning_resources/DSA/Dynamic_Programming/#classic-dp-problems-with-python-implementations","title":"Classic DP Problems with Python Implementations","text":""},{"location":"Learning_resources/DSA/Dynamic_Programming/#1-fibonacci-sequence","title":"1. Fibonacci Sequence","text":"<p>Problem: Compute the nth Fibonacci number efficiently.</p>"},{"location":"Learning_resources/DSA/Dynamic_Programming/#naive-recursive-approach-o2n","title":"Naive Recursive Approach (O(2^n))","text":"<pre><code>def fib(n):\n    if n &lt;= 1:\n        return n\n    return fib(n-1) + fib(n-2)\n</code></pre>"},{"location":"Learning_resources/DSA/Dynamic_Programming/#dp-solution-with-memoization-on","title":"DP Solution with Memoization (O(n))","text":"<pre><code>def fib_memo(n, memo={0:0, 1:1}):\n    if n not in memo:\n        memo[n] = fib_memo(n-1, memo) + fib_memo(n-2, memo)\n    return memo[n]\n</code></pre>"},{"location":"Learning_resources/DSA/Dynamic_Programming/#dp-solution-with-tabulation-on","title":"DP Solution with Tabulation (O(n))","text":"<pre><code>def fib_tab(n):\n    if n &lt;= 1:\n        return n\n    dp = [0] * (n+1)\n    dp[1] = 1\n    for i in range(2, n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n</code></pre>"},{"location":"Learning_resources/DSA/Dynamic_Programming/#2-01-knapsack-problem","title":"2. 0/1 Knapsack Problem","text":"<p>Problem: Given weights and values of items, put them in a knapsack of capacity W to get maximum value.</p>"},{"location":"Learning_resources/DSA/Dynamic_Programming/#dp-solution-onw","title":"DP Solution (O(nW))","text":"<pre><code>def knapsack(W, wt, val, n):\n    dp = [[0 for _ in range(W+1)] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for w in range(1, W+1):\n            if wt[i-1] &lt;= w:\n                dp[i][w] = max(val[i-1] + dp[i-1][w-wt[i-1]], dp[i-1][w])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n\n# Example\nval = [60, 100, 120]\nwt = [10, 20, 30]\nW = 50\nn = len(val)\nprint(knapsack(W, wt, val, n))  # Output: 220\n</code></pre>"},{"location":"Learning_resources/DSA/Dynamic_Programming/#3-longest-common-subsequence-lcs","title":"3. Longest Common Subsequence (LCS)","text":"<p>Problem: Find the length of the longest subsequence present in both strings.</p>"},{"location":"Learning_resources/DSA/Dynamic_Programming/#dp-solution-omn","title":"DP Solution (O(mn))","text":"<pre><code>def lcs(X, Y):\n    m, n = len(X), len(Y)\n    dp = [[0]*(n+1) for _ in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n\n# Example\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nprint(lcs(X, Y))  # Output: 4 (\"GTAB\")\n</code></pre>"},{"location":"Learning_resources/DSA/Dynamic_Programming/#4-coin-change-problem","title":"4. Coin Change Problem","text":"<p>Problem: Find the minimum number of coins needed to make change for a given amount.</p>"},{"location":"Learning_resources/DSA/Dynamic_Programming/#dp-solution-oamount-num_coins","title":"DP Solution (O(amount * num_coins))","text":"<pre><code>def coin_change(coins, amount):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n\n    for coin in coins:\n        for x in range(coin, amount + 1):\n            dp[x] = min(dp[x], dp[x - coin] + 1)\n    return dp[amount] if dp[amount] != float('inf') else -1\n\n# Example\ncoins = [1, 2, 5]\namount = 11\nprint(coin_change(coins, amount))  # Output: 3 (5 + 5 + 1)\n</code></pre>"},{"location":"Learning_resources/DSA/Dynamic_Programming/#5-matrix-chain-multiplication","title":"5. Matrix Chain Multiplication","text":"<p>Problem: Find the optimal way to multiply matrices to minimize operations.</p>"},{"location":"Learning_resources/DSA/Dynamic_Programming/#dp-solution-on3","title":"DP Solution (O(n^3))","text":"<pre><code>def matrix_chain_order(p):\n    n = len(p) - 1\n    m = [[0 for _ in range(n)] for _ in range(n)]\n    s = [[0 for _ in range(n)] for _ in range(n)]\n\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            m[i][j] = float('inf')\n            for k in range(i, j):\n                cost = m[i][k] + m[k+1][j] + p[i]*p[k+1]*p[j+1]\n                if cost &lt; m[i][j]:\n                    m[i][j] = cost\n                    s[i][j] = k\n    return m[0][n-1]\n\n# Example\narr = [1, 2, 3, 4]\nprint(matrix_chain_order(arr))  # Output: 18\n</code></pre>"},{"location":"Learning_resources/DSA/Dynamic_Programming/#6-longest-increasing-subsequence-lis","title":"6. Longest Increasing Subsequence (LIS)","text":"<p>Problem: Find the length of the longest subsequence that is strictly increasing.</p>"},{"location":"Learning_resources/DSA/Dynamic_Programming/#dp-solution-on2","title":"DP Solution (O(n^2))","text":"<pre><code>def lis(nums):\n    if not nums:\n        return 0\n    dp = [1] * len(nums)\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] &gt; nums[j]:\n                dp[i] = max(dp[i], dp[j]+1)\n    return max(dp)\n\n# Example\nnums = [10, 9, 2, 5, 3, 7, 101, 18]\nprint(lis(nums))  # Output: 4 (2, 3, 7, 101)\n</code></pre>"},{"location":"Learning_resources/DSA/Dynamic_Programming/#7-edit-distance","title":"7. Edit Distance","text":"<p>Problem: Find the minimum operations (insert, delete, replace) to convert one string to another.</p>"},{"location":"Learning_resources/DSA/Dynamic_Programming/#dp-solution-omn_1","title":"DP Solution (O(mn))","text":"<pre><code>def min_distance(word1, word2):\n    m, n = len(word1), len(word2)\n    dp = [[0] * (n+1) for _ in range(m+1)]\n\n    for i in range(m+1):\n        dp[i][0] = i\n    for j in range(n+1):\n        dp[0][j] = j\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if word1[i-1] == word2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j],    # Delete\n                                   dp[i][j-1],    # Insert\n                                   dp[i-1][j-1])  # Replace\n    return dp[m][n]\n\n# Example\nword1 = \"horse\"\nword2 = \"ros\"\nprint(min_distance(word1, word2))  # Output: 3\n</code></pre> <p>DP Problem-Solving Approach: Step-by-Step Methodology:</p> <ol> <li> <p>Define the Subproblem: Identify how to break the problem down</p> </li> <li> <p>Formulate the Recurrence: Express solution in terms of smaller subproblems</p> </li> <li> <p>Identify Base Cases: Define the simplest subproblems</p> </li> <li> <p>Choose Implementation:</p> <p>Top-down with memoization (recursive)</p> <p>Bottom-up with tabulation (iterative)</p> </li> </ol> <p>Compute the Solution: Build up the solution from subproblems</p> <p>Implementation Patterns: 1. Top-Down with Memoization <pre><code>def dp_top_down(params, memo={}):\n    if params in memo:\n        return memo[params]\n    # Base cases\n    if base_case_condition:\n        return base_case_value\n    # Recursive case\n    result = compute_result_using_subproblems\n    memo[params] = result\n    return result\n</code></pre> 2. Bottom-Up with Tabulation <pre><code>def dp_bottom_up(params):\n    # Initialize DP table\n    dp = initialize_table\n\n    # Base cases\n    dp[base_case] = base_case_value\n\n    # Fill table iteratively\n    for subproblem in all_subproblems:\n        dp[subproblem] = compute_from_smaller_subproblems\n\n    return dp[final_problem]\n</code></pre></p>"},{"location":"Learning_resources/DSA/Dynamic_Programming/#advanced-dp-problems","title":"Advanced DP Problems","text":"<ol> <li>Matrix Chain Multiplication</li> </ol> <p>Problem Statement: Given a sequence of matrices, find the most efficient way to multiply them (parenthesization) to minimize operations.</p> <p>DP Solution (O(n\u00b3)): <pre><code>def matrix_chain_order(p):\n    n = len(p) - 1\n    m = [[0 for _ in range(n)] for _ in range(n)]\n    s = [[0 for _ in range(n)] for _ in range(n)]\n\n    for l in range(2, n+1):  # l is chain length\n        for i in range(n - l + 1):\n            j = i + l - 1\n            m[i][j] = float('inf')\n            for k in range(i, j):\n                cost = m[i][k] + m[k+1][j] + p[i]*p[k+1]*p[j+1]\n                if cost &lt; m[i][j]:\n                    m[i][j] = cost\n                    s[i][j] = k\n\n    return m, s\n\ndef print_optimal_parens(s, i, j):\n    if i == j:\n        print(f\"A{i+1}\", end=\"\")\n    else:\n        print(\"(\", end=\"\")\n        print_optimal_parens(s, i, s[i][j])\n        print_optimal_parens(s, s[i][j]+1, j)\n        print(\")\", end=\"\")\n\n# Example\np = [30, 35, 15, 5, 10, 20, 25]  # Dimensions of matrices\nm, s = matrix_chain_order(p)\nprint(\"Minimum multiplications:\", m[0][len(p)-2])\nprint(\"Optimal parenthesization: \", end=\"\")\nprint_optimal_parens(s, 0, len(p)-2)  # Output: ((A1(A2A3))((A4A5)A6))\n</code></pre> 2. Longest Increasing Subsequence (LIS)</p> <p>Problem Statement: Find the length of the longest subsequence of a given sequence such that all elements are sorted in increasing order.</p> <p>DP Solution (O(n\u00b2)): <pre><code>def lis(arr):\n    n = len(arr)\n    dp = [1]*n\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] &gt; arr[j] and dp[i] &lt; dp[j] + 1:\n                dp[i] = dp[j] + 1\n\n    return max(dp)\n\n# Optimized O(n log n) solution\nimport bisect\n\ndef lis_optimized(arr):\n    tails = []\n    for num in arr:\n        idx = bisect.bisect_left(tails, num)\n        if idx == len(tails):\n            tails.append(num)\n        else:\n            tails[idx] = num\n    return len(tails)\n\n# Example\narr = [10, 22, 9, 33, 21, 50, 41, 60]\nprint(\"LIS length (DP):\", lis(arr))  # 5\nprint(\"LIS length (Optimized):\", lis_optimized(arr))  # 5\n</code></pre> DP Optimization Techniques</p> <ul> <li> <p>Space Optimization: Reduce space complexity by reusing DP table rows</p> </li> <li> <p>State Compression: Represent DP states more compactly</p> </li> <li> <p>Knuth Optimization: For certain DP problems with quadrangle inequalities</p> </li> <li> <p>Convex Hull Trick: For DP problems with specific recurrence relations</p> </li> </ul> <p>Space Optimized 0/1 Knapsack Example: <pre><code>def knapsack_space_optimized(W, wt, val, n):\n    dp = [0]*(W+1)\n\n    for i in range(1, n+1):\n        for w in range(W, 0, -1):  # Reverse order to prevent overwriting\n            if wt[i-1] &lt;= w:\n                dp[w] = max(dp[w], dp[w-wt[i-1]] + val[i-1])\n\n    return dp[W]\n</code></pre> When to Use Dynamic Programming</p> <ul> <li>The problem can be broken down into overlapping subproblems</li> <li>The problem has optimal substructure property</li> <li>The problem requires optimization (min/max) or counting</li> <li>The naive recursive solution has exponential time complexity</li> </ul>"},{"location":"Learning_resources/DSA/Dynamic_Programming/#dp-problem-solving-approach","title":"DP Problem-Solving Approach","text":"<ol> <li>Identify the subproblems: What are the smaller versions of the problem?</li> <li>Define the recurrence relation: How do solutions to subproblems combine?</li> <li>Implement memoization or tabulation: Choose top-down or bottom-up</li> <li>Handle base cases: What are the simplest cases?</li> <li>Compute the final solution: Combine subproblem solutions</li> </ol>"},{"location":"Learning_resources/DSA/Dynamic_Programming/#advanced-dp-concepts","title":"Advanced DP Concepts","text":""},{"location":"Learning_resources/DSA/Dynamic_Programming/#1-state-compression","title":"1. State Compression","text":"<p>Reduce space complexity by reusing DP arrays.</p> <pre><code># Fibonacci with O(1) space\ndef fib_space_optimized(n):\n    if n &lt;= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n+1):\n        a, b = b, a + b\n    return b\n</code></pre>"},{"location":"Learning_resources/DSA/Dynamic_Programming/#2-bitmask-dp","title":"2. Bitmask DP","text":"<p>For problems involving subsets or permutations.</p> <pre><code># Traveling Salesman Problem (TSP)\ndef tsp(dist):\n    n = len(dist)\n    memo = {}\n\n    def dp(mask, pos):\n        if mask == (1 &lt;&lt; n) - 1:\n            return dist[pos][0]\n        if (mask, pos) in memo:\n            return memo[(mask, pos)]\n\n        ans = float('inf')\n        for city in range(n):\n            if not (mask &amp; (1 &lt;&lt; city)):\n                ans = min(ans, dist[pos][city] + dp(mask | (1 &lt;&lt; city), city))\n        memo[(mask, pos)] = ans\n        return ans\n\n    return dp(1, 0)\n\n# Example\ndist = [\n    [0, 10, 15, 20],\n    [10, 0, 35, 25],\n    [15, 35, 0, 30],\n    [20, 25, 30, 0]\n]\nprint(tsp(dist))  # Output: 80\n</code></pre>"},{"location":"Learning_resources/DSA/Dynamic_Programming/#common-dp-patterns","title":"Common DP Patterns","text":"<ol> <li>Prefix/Suffix DP: LIS, LCS</li> <li>Interval DP: Matrix chain multiplication</li> <li>Tree DP: Problems on trees</li> <li>Digit DP: Counting problems with digit constraints</li> <li>Probability DP: Problems involving probabilities</li> </ol> <p>Dynamic programming is a versatile technique that, when mastered, can solve a wide range of complex problems efficiently. The key is to recognize the optimal substructure and overlapping subproblems in the problem at hand.</p>"},{"location":"Learning_resources/DSA/Greedy_Algorithms/","title":"Greedy Algorithms: Concepts and Applications","text":""},{"location":"Learning_resources/DSA/Greedy_Algorithms/#introduction-to-greedy-algorithms","title":"Introduction to Greedy Algorithms","text":"<p>Greedy algorithms are a class of algorithms that make locally optimal choices at each step with the hope of finding a global optimum. They are simple, intuitive, and often efficient, but don't always produce the optimal solution for all problems.</p>"},{"location":"Learning_resources/DSA/Greedy_Algorithms/#key-characteristics","title":"Key Characteristics:","text":"<ol> <li>Greedy Choice Property: A global optimum can be reached by making locally optimal choices</li> <li>Optimal Substructure: An optimal solution contains optimal solutions to subproblems</li> <li>Irrevocable: Choices made cannot be changed later</li> </ol>"},{"location":"Learning_resources/DSA/Greedy_Algorithms/#when-to-use-greedy-algorithms","title":"When to Use Greedy Algorithms","text":"<p>Greedy algorithms work well for problems where:</p> <ul> <li>Local optimal choices lead to global optimum</li> <li>The problem has optimal substructure</li> <li>We can make a decision without considering future choices</li> <li>The solution can be built incrementally</li> </ul>"},{"location":"Learning_resources/DSA/Greedy_Algorithms/#classic-greedy-problems-with-python-implementations","title":"Classic Greedy Problems with Python Implementations","text":""},{"location":"Learning_resources/DSA/Greedy_Algorithms/#1-activity-selection-problem","title":"1. Activity Selection Problem","text":"<p>Problem: Select the maximum number of non-overlapping activities from a set.</p>"},{"location":"Learning_resources/DSA/Greedy_Algorithms/#greedy-approach","title":"Greedy Approach:","text":"<ol> <li>Sort activities by finish time</li> <li>Select first activity</li> <li>For each remaining activity, select if it doesn't conflict with last selected</li> </ol> <pre><code>def activity_selection(start, finish):\n    n = len(finish)\n    selected = []\n\n    # Sort activities by finish time\n    activities = sorted(zip(start, finish), key=lambda x: x[1])\n\n    # Select first activity\n    i = 0\n    selected.append(i)\n\n    for j in range(1, n):\n        # If activity starts after last finishes, select it\n        if activities[j][0] &gt;= activities[i][1]:\n            selected.append(j)\n            i = j\n\n    return selected\n\n# Example\nstart = [1, 3, 0, 5, 8, 5]\nfinish = [2, 4, 6, 7, 9, 9]\nselected = activity_selection(start, finish)\nprint(\"Selected activities:\", selected)  # Output: [0, 1, 3, 4]\n</code></pre>"},{"location":"Learning_resources/DSA/Greedy_Algorithms/#2-fractional-knapsack-problem","title":"2. Fractional Knapsack Problem","text":"<p>Problem: Fill a knapsack with maximum value, allowing fractions of items.</p>"},{"location":"Learning_resources/DSA/Greedy_Algorithms/#greedy-approach_1","title":"Greedy Approach:","text":"<ol> <li>Calculate value/weight ratio for each item</li> <li>Sort items by ratio in descending order</li> <li>Take as much as possible of highest ratio items</li> </ol> <pre><code>def fractional_knapsack(value, weight, capacity):\n    n = len(value)\n    items = list(zip(value, weight))\n\n    # Sort by value/weight ratio (descending)\n    items.sort(key=lambda x: x[0]/x[1], reverse=True)\n\n    total_value = 0.0\n\n    for v, w in items:\n        if capacity &gt;= w:\n            total_value += v\n            capacity -= w\n        else:\n            fraction = capacity / w\n            total_value += v * fraction\n            break\n\n    return total_value\n\n# Example\nvalue = [60, 100, 120]\nweight = [10, 20, 30]\ncapacity = 50\nprint(\"Maximum value:\", fractional_knapsack(value, weight, capacity))\n# Output: 240.0 (all of items 1 and 2, 2/3 of item 3)\n</code></pre>"},{"location":"Learning_resources/DSA/Greedy_Algorithms/#3-huffman-coding-data-compression","title":"3. Huffman Coding (Data Compression)","text":"<p>Problem: Assign variable-length codes to characters to minimize total bits.</p>"},{"location":"Learning_resources/DSA/Greedy_Algorithms/#greedy-approach_2","title":"Greedy Approach:","text":"<ol> <li>Build frequency table</li> <li>Create min-heap of nodes</li> <li>Repeatedly combine two smallest nodes</li> <li>Assign codes based on tree paths</li> </ol> <pre><code>import heapq\n\nclass HuffmanNode:\n    def __init__(self, char=None, freq=0, left=None, right=None):\n        self.char = char\n        self.freq = freq\n        self.left = left\n        self.right = right\n\n    def __lt__(self, other):\n        return self.freq &lt; other.freq\n\ndef build_huffman_tree(text):\n    if not text:\n        return None\n\n    # Calculate frequency\n    freq = {}\n    for char in text:\n        freq[char] = freq.get(char, 0) + 1\n\n    # Create priority queue\n    heap = []\n    for char, count in freq.items():\n        heapq.heappush(heap, HuffmanNode(char, count))\n\n    # Build tree\n    while len(heap) &gt; 1:\n        left = heapq.heappop(heap)\n        right = heapq.heappop(heap)\n        merged = HuffmanNode(freq=left.freq + right.freq, left=left, right=right)\n        heapq.heappush(heap, merged)\n\n    return heapq.heappop(heap)\n\ndef build_codes(node, prefix=\"\", codebook={}):\n    if node is None:\n        return\n\n    if node.char is not None:\n        codebook[node.char] = prefix\n\n    build_codes(node.left, prefix + \"0\", codebook)\n    build_codes(node.right, prefix + \"1\", codebook)\n\n    return codebook\n\n# Example\ntext = \"this is an example for huffman encoding\"\nhuffman_tree = build_huffman_tree(text)\ncodes = build_codes(huffman_tree)\nprint(\"Huffman Codes:\", codes)\n</code></pre>"},{"location":"Learning_resources/DSA/Greedy_Algorithms/#4-dijkstras-algorithm-shortest-path","title":"4. Dijkstra's Algorithm (Shortest Path)","text":"<p>Problem: Find shortest paths from a source to all other vertices.</p>"},{"location":"Learning_resources/DSA/Greedy_Algorithms/#greedy-approach_3","title":"Greedy Approach:","text":"<ol> <li>Maintain set of unvisited nodes</li> <li>At each step, pick node with smallest distance</li> <li>Update distances to its neighbors</li> <li>Repeat until all nodes visited</li> </ol> <pre><code>import heapq\n\ndef dijkstra(graph, start):\n    distances = {vertex: float('infinity') for vertex in graph}\n    distances[start] = 0\n    heap = [(0, start)]\n\n    while heap:\n        current_dist, current_vertex = heapq.heappop(heap)\n\n        if current_dist &gt; distances[current_vertex]:\n            continue\n\n        for neighbor, weight in graph[current_vertex].items():\n            distance = current_dist + weight\n            if distance &lt; distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(heap, (distance, neighbor))\n\n    return distances\n\n# Example\ngraph = {\n    'A': {'B': 2, 'C': 5},\n    'B': {'A': 2, 'C': 1, 'D': 7},\n    'C': {'A': 5, 'B': 1, 'D': 3},\n    'D': {'B': 7, 'C': 3}\n}\nprint(\"Shortest distances:\", dijkstra(graph, 'A'))\n# Output: {'A': 0, 'B': 2, 'C': 3, 'D': 6}\n</code></pre>"},{"location":"Learning_resources/DSA/Greedy_Algorithms/#5-minimum-spanning-tree-prims-algorithm","title":"5. Minimum Spanning Tree (Prim's Algorithm)","text":"<p>Problem: Find a minimum weight spanning tree for a connected weighted graph.</p>"},{"location":"Learning_resources/DSA/Greedy_Algorithms/#greedy-approach_4","title":"Greedy Approach:","text":"<ol> <li>Start with arbitrary vertex</li> <li>At each step, add cheapest edge that connects tree to new vertex</li> <li>Repeat until all vertices are included</li> </ol> <pre><code>import heapq\n\ndef prim_mst(graph):\n    mst = []\n    visited = set()\n    start_vertex = next(iter(graph))\n    heap = []\n\n    visited.add(start_vertex)\n    for neighbor, weight in graph[start_vertex].items():\n        heapq.heappush(heap, (weight, start_vertex, neighbor))\n\n    while heap and len(visited) &lt; len(graph):\n        weight, u, v = heapq.heappop(heap)\n        if v not in visited:\n            visited.add(v)\n            mst.append((u, v, weight))\n            for neighbor, w in graph[v].items():\n                if neighbor not in visited:\n                    heapq.heappush(heap, (w, v, neighbor))\n\n    return mst\n\n# Example\ngraph = {\n    'A': {'B': 2, 'D': 6},\n    'B': {'A': 2, 'C': 3, 'D': 8},\n    'C': {'B': 3, 'D': 4},\n    'D': {'A': 6, 'B': 8, 'C': 4}\n}\nprint(\"MST edges:\", prim_mst(graph))\n# Output: [('A', 'B', 2), ('B', 'C', 3), ('C', 'D', 4)]\n</code></pre>"},{"location":"Learning_resources/DSA/Greedy_Algorithms/#6-coin-change-problem-greedy-version","title":"6. Coin Change Problem (Greedy Version)","text":"<p>Problem: Make change using fewest coins (when greedy works).</p>"},{"location":"Learning_resources/DSA/Greedy_Algorithms/#greedy-approach_5","title":"Greedy Approach:","text":"<ol> <li>Sort coins in descending order</li> <li>Use as many as possible of largest coin</li> <li>Move to next smaller coin</li> </ol> <pre><code>def coin_change_greedy(coins, amount):\n    coins.sort(reverse=True)\n    change = []\n\n    for coin in coins:\n        while amount &gt;= coin:\n            amount -= coin\n            change.append(coin)\n\n    return change if amount == 0 else None\n\n# Example (works for standard coin systems)\ncoins = [25, 10, 5, 1]\namount = 63\nprint(\"Change for 63 cents:\", coin_change_greedy(coins, amount))\n# Output: [25, 25, 10, 1, 1, 1]\n</code></pre>"},{"location":"Learning_resources/DSA/Greedy_Algorithms/#7-job-sequencing-with-deadlines","title":"7. Job Sequencing with Deadlines","text":"<p>Problem: Schedule jobs to maximize profit before deadlines.</p>"},{"location":"Learning_resources/DSA/Greedy_Algorithms/#greedy-approach_6","title":"Greedy Approach:","text":"<ol> <li>Sort jobs by profit (descending)</li> <li>Schedule each job as late as possible before deadline</li> </ol> <pre><code>def job_sequencing(jobs):\n    # Sort jobs by profit (descending)\n    jobs.sort(key=lambda x: x[2], reverse=True)\n\n    max_deadline = max(job[1] for job in jobs)\n    schedule = [None] * (max_deadline + 1)\n\n    for job in jobs:\n        id, deadline, profit = job\n        # Find latest available slot before deadline\n        for i in range(deadline, 0, -1):\n            if schedule[i] is None:\n                schedule[i] = id\n                break\n\n    # Remove None values and return scheduled jobs\n    return [job for job in schedule if job is not None]\n\n# Example\njobs = [\n    ('a', 2, 100),\n    ('b', 1, 19),\n    ('c', 2, 27),\n    ('d', 1, 25),\n    ('e', 3, 15)\n]\nprint(\"Scheduled jobs:\", job_sequencing(jobs))\n# Output: ['c', 'a', 'e']\n</code></pre>"},{"location":"Learning_resources/DSA/Greedy_Algorithms/#greedy-vs-dynamic-programming","title":"Greedy vs Dynamic Programming","text":"Characteristic Greedy Dynamic Programming Approach Makes locally optimal choice Considers all possibilities Optimality Not always optimal Always optimal Speed Faster Slower Space Usually less memory More memory Examples Dijkstra's, Prim's Knapsack, LCS"},{"location":"Learning_resources/DSA/Greedy_Algorithms/#when-greedy-fails","title":"When Greedy Fails","text":"<p>Greedy algorithms don't always produce optimal solutions. Example: The classic 0/1 Knapsack problem cannot be solved optimally with a greedy approach (except in fractional version).</p> <pre><code># Non-optimal greedy solution for 0/1 Knapsack\ndef greedy_knapsack(value, weight, capacity):\n    ratio = [v/w for v, w in zip(value, weight)]\n    indices = sorted(range(len(ratio)), key=lambda i: ratio[i], reverse=True)\n\n    total_value = 0\n    total_weight = 0\n\n    for i in indices:\n        if total_weight + weight[i] &lt;= capacity:\n            total_value += value[i]\n            total_weight += weight[i]\n\n    return total_value\n\n# Example where greedy fails\nvalue = [60, 100, 120]\nweight = [10, 20, 30]\ncapacity = 50\nprint(\"Greedy knapsack:\", greedy_knapsack(value, weight, capacity))  # 160\nprint(\"Optimal solution:\", 220)  # Using DP would give 220\n</code></pre>"},{"location":"Learning_resources/DSA/Greedy_Algorithms/#proof-techniques-for-greedy-algorithms","title":"Proof Techniques for Greedy Algorithms","text":"<p>To verify a greedy algorithm's correctness:</p> <ol> <li>Greedy Choice Property: Prove that greedy choice is part of some optimal solution</li> <li>Optimal Substructure: Show that remaining subproblem is similar to original</li> <li>Exchange Argument: Show that any optimal solution can be transformed to include greedy choice</li> </ol> <p>Greedy algorithms are powerful tools when applicable, offering efficient solutions to many optimization problems. The key is recognizing when the greedy choice property holds and when it doesn't.</p>"},{"location":"Learning_resources/DSA/Introduction/","title":"Introduction to Data Structures &amp; Algorithms","text":""},{"location":"Learning_resources/DSA/Introduction/#data-types-data-structures-and-abstract-data-types","title":"Data Types, Data Structures, and Abstract Data Types","text":""},{"location":"Learning_resources/DSA/Introduction/#data-types","title":"Data Types","text":"<p>A data type defines the type of value a variable can hold and the operations that can be performed on it. In Python, common data types include:</p> <ul> <li>Primitive types: <code>int</code>, <code>float</code>, <code>bool</code>, <code>str</code></li> <li>Composite types: <code>list</code>, <code>tuple</code>, <code>dict</code>, <code>set</code></li> </ul> <pre><code># Examples of data types in Python\ninteger_var = 42\nfloat_var = 3.14\nboolean_var = True\nstring_var = \"Hello, World!\"\nlist_var = [1, 2, 3]\ntuple_var = (1, 2, 3)\ndict_var = {'name': 'Alice', 'age': 25}\nset_var = {1, 2, 3}\n</code></pre>"},{"location":"Learning_resources/DSA/Introduction/#data-structures","title":"Data Structures","text":"<p>Data structures are ways to organize and store data in a computer so that it can be accessed and modified efficiently. They define the relationship between data and the operations that can be performed on the data.</p> <p>Common data structures include:</p> <ul> <li>Arrays/Lists</li> <li>Stacks</li> <li>Queues</li> <li>Linked Lists</li> <li>Trees</li> <li>Graphs</li> <li>Hash Tables</li> </ul> <pre><code># Example of using a list as a stack\nstack = []\nstack.append(1)  # push\nstack.append(2)\nstack.append(3)\nprint(stack.pop())  # pops 3\nprint(stack.pop())  # pops 2\n\n# Example of using a list as a queue (inefficient, collections.deque is better)\nqueue = []\nqueue.append(1)  # enqueue\nqueue.append(2)\nqueue.append(3)\nprint(queue.pop(0))  # dequeue - pops 1\nprint(queue.pop(0))  # dequeue - pops 2\n</code></pre>"},{"location":"Learning_resources/DSA/Introduction/#abstract-data-types-adts","title":"Abstract Data Types (ADTs)","text":"<p>An ADT is a mathematical model for data types that defines the type's behavior from the user's perspective, independent of implementation. It specifies what operations are possible but not how they're implemented.</p> <p>Common ADTs:</p> <ul> <li>List ADT</li> <li>Stack ADT</li> <li>Queue ADT</li> <li>Map/Dictionary ADT</li> <li>Set ADT</li> </ul> <pre><code># Implementing a Stack ADT using a class\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        if not self.is_empty():\n            return self.items.pop()\n        return None\n\n    def peek(self):\n        if not self.is_empty():\n            return self.items[-1]\n        return None\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def size(self):\n        return len(self.items)\n\n# Usage\ns = Stack()\ns.push(10)\ns.push(20)\nprint(s.pop())  # 20\nprint(s.peek())  # 10\n</code></pre>"},{"location":"Learning_resources/DSA/Introduction/#dynamic-memory-allocation","title":"Dynamic Memory Allocation","text":"<p>Dynamic memory allocation is the process of assigning memory space during runtime rather than at compile time. In Python, memory management is handled automatically, but understanding the concept is important.</p> <p>Key concepts:</p> <ul> <li>Heap memory: Where dynamically allocated memory resides</li> <li>Memory allocation: <code>malloc</code> in C, <code>new</code> in Java/C++, automatic in Python</li> <li>Memory deallocation: <code>free</code> in C, automatic garbage collection in Python</li> </ul> <pre><code># Python handles memory allocation automatically\n# Creating a large list dynamically\ndynamic_list = [x for x in range(1000000)]  # Allocates memory for 1 million elements\n\n# Memory management with objects\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n# Creating linked nodes dynamically\nnode1 = Node(10)  # Memory allocated for node1\nnode2 = Node(20)  # Memory allocated for node2\nnode1.next = node2  # Linking nodes\n\n# Python's garbage collector will automatically free memory when objects are no longer referenced\n</code></pre>"},{"location":"Learning_resources/DSA/Introduction/#introduction-to-algorithms","title":"Introduction to Algorithms","text":"<p>An algorithm is a finite sequence of well-defined instructions to solve a problem or perform a computation.</p> <p>Algorithm properties:</p> <ol> <li>Input: Zero or more inputs</li> <li>Output: At least one output</li> <li>Definiteness: Clear, unambiguous instructions</li> <li>Finiteness: Must terminate after finite steps</li> <li>Effectiveness: Each step must be basic enough to be done exactly in finite time</li> </ol> <pre><code># Example: Linear Search Algorithm\ndef linear_search(arr, target):\n    \"\"\"\n    Input: arr - list of elements\n           target - element to search for\n    Output: index of target if found, -1 otherwise\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\n# Example usage\nnumbers = [4, 2, 7, 1, 9, 5]\nprint(linear_search(numbers, 7))  # Output: 2 (index of 7)\nprint(linear_search(numbers, 3))  # Output: -1 (not found)\n\n# Example: Bubble Sort Algorithm\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        # Last i elements are already in place\n        for j in range(0, n-i-1):\n            if arr[j] &gt; arr[j+1]:\n                # Swap if element is greater than next\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\n# Example usage\nunsorted = [64, 34, 25, 12, 22, 11, 90]\nprint(\"Sorted array:\", bubble_sort(unsorted))\n</code></pre>"},{"location":"Learning_resources/DSA/Introduction/#asymptotic-notations-and-common-functions","title":"Asymptotic Notations and Common Functions","text":"<p>Asymptotic notations are mathematical tools to describe the running time or space complexity of algorithms as the input size grows.</p>"},{"location":"Learning_resources/DSA/Introduction/#big-o-notation-o","title":"Big-O Notation (O)","text":"<p>Describes the upper bound of an algorithm's running time (worst-case scenario).</p> <p>Common time complexities:</p> <ol> <li>O(1): Constant time</li> <li>O(log n): Logarithmic time</li> <li>O(n): Linear time</li> <li>O(n log n): Linearithmic time</li> <li>O(n\u00b2): Quadratic time</li> <li>O(2\u207f): Exponential time</li> </ol> <pre><code># O(1) - Constant time\ndef get_first_element(arr):\n    return arr[0] if arr else None\n\n# O(n) - Linear time\ndef find_max(arr):\n    max_val = arr[0]\n    for num in arr:\n        if num &gt; max_val:\n            max_val = num\n    return max_val\n\n# O(n\u00b2) - Quadratic time\ndef print_all_pairs(arr):\n    for i in arr:\n        for j in arr:\n            print(i, j)\n\n# O(log n) - Binary search example\ndef binary_search(sorted_arr, target):\n    low = 0\n    high = len(sorted_arr) - 1\n\n    while low &lt;= high:\n        mid = (low + high) // 2\n        if sorted_arr[mid] == target:\n            return mid\n        elif sorted_arr[mid] &lt; target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n# O(n log n) - Merge sort example\ndef merge_sort(arr):\n    if len(arr) &gt; 1:\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n\n        merge_sort(left)\n        merge_sort(right)\n\n        i = j = k = 0\n\n        while i &lt; len(left) and j &lt; len(right):\n            if left[i] &lt; right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n            k += 1\n\n        while i &lt; len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n\n        while j &lt; len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n    return arr\n</code></pre>"},{"location":"Learning_resources/DSA/Introduction/#omega-notation","title":"Omega Notation (\u03a9)","text":"<p>Describes the lower bound of an algorithm's running time (best-case scenario).</p>"},{"location":"Learning_resources/DSA/Introduction/#theta-notation","title":"Theta Notation (\u0398)","text":"<p>Describes both upper and lower bounds, providing a tight bound.</p>"},{"location":"Learning_resources/DSA/Introduction/#common-functions-in-algorithm-analysis","title":"Common Functions in Algorithm Analysis","text":"<ol> <li>Constant function: f(n) = c</li> <li>Logarithmic function: f(n) = log n</li> <li>Linear function: f(n) = n</li> <li>Linearithmic function: f(n) = n log n</li> <li>Quadratic function: f(n) = n\u00b2</li> <li>Cubic function: f(n) = n\u00b3</li> <li>Exponential function: f(n) = 2\u207f</li> </ol> <p><pre><code># Comparing growth rates\nimport math\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nn = np.linspace(1, 10, 100)\nplt.plot(n, np.ones(len(n)), label='O(1)')\nplt.plot(n, np.log(n), label='O(log n)')\nplt.plot(n, n, label='O(n)')\nplt.plot(n, n * np.log(n), label='O(n log n)')\nplt.plot(n, n**2, label='O(n\u00b2)')\nplt.plot(n, 2**n, label='O(2\u207f)')\nplt.legend()\nplt.xlabel('Input size (n)')\nplt.ylabel('Operations')\nplt.title('Common Time Complexities')\nplt.savefig('time_complexities.png')\nplt.show()\n</code></pre> </p>"},{"location":"Learning_resources/DSA/Linked_List/","title":"Lists and Linked Lists in Python","text":""},{"location":"Learning_resources/DSA/Linked_List/#basic-concept-of-lists","title":"Basic Concept of Lists","text":"<p>A list is an ordered collection of elements that allows for dynamic sizing and various operations. In Python, lists are implemented as dynamic arrays.</p>"},{"location":"Learning_resources/DSA/Linked_List/#characteristics","title":"Characteristics:","text":"<ul> <li>Ordered sequence of elements</li> <li>Mutable (can be modified after creation)</li> <li>Can contain elements of different types</li> <li>Zero-based indexing</li> <li>Dynamic resizing (grows as needed)</li> </ul> <pre><code># Creating and using lists\nmy_list = [1, 2, 3, 'four', 5.0]\nprint(my_list[0])      # 1 (indexing)\nprint(my_list[-1])     # 5.0 (negative indexing)\nmy_list.append(6)      # Add to end\nmy_list.insert(2, 2.5) # Insert at position\nprint(len(my_list))    # 7 (length)\n</code></pre>"},{"location":"Learning_resources/DSA/Linked_List/#list-as-an-abstract-data-type-adt","title":"List as an Abstract Data Type (ADT)","text":"<p>The List ADT defines the following operations independent of implementation:</p>"},{"location":"Learning_resources/DSA/Linked_List/#core-operations","title":"Core Operations:","text":"<ol> <li>create(): Initialize an empty list</li> <li>insert(pos, item): Add item at position</li> <li>delete(pos): Remove item at position</li> <li>get(pos): Retrieve item at position</li> <li>size(): Return number of elements</li> <li>is_empty(): Check if list is empty</li> <li>replace(pos, item): Change item at position</li> </ol> <pre><code>class ListADT:\n    def __init__(self):\n        self.items = []\n\n    def insert(self, pos, item):\n        self.items.insert(pos, item)\n\n    def delete(self, pos):\n        return self.items.pop(pos)\n\n    def get(self, pos):\n        return self.items[pos]\n\n    def size(self):\n        return len(self.items)\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def replace(self, pos, item):\n        self.items[pos] = item\n\n    def __str__(self):\n        return str(self.items)\n\n# Usage\nadt_list = ListADT()\nadt_list.insert(0, 10)\nadt_list.insert(1, 20)\nprint(adt_list)  # [10, 20]\n</code></pre>"},{"location":"Learning_resources/DSA/Linked_List/#array-implementation-of-lists","title":"Array Implementation of Lists","text":"<p>Python lists are implemented as dynamic arrays that: - Allocate contiguous memory - Automatically resize when capacity is exceeded - Provide amortized O(1) append operations</p> <pre><code># Simplified array-based list implementation\nclass ArrayList:\n    def __init__(self):\n        self.capacity = 1\n        self.size = 0\n        self.array = self._make_array(self.capacity)\n\n    def _make_array(self, new_capacity):\n        return [None] * new_capacity\n\n    def _resize(self, new_capacity):\n        new_array = self._make_array(new_capacity)\n        for i in range(self.size):\n            new_array[i] = self.array[i]\n        self.array = new_array\n        self.capacity = new_capacity\n\n    def append(self, item):\n        if self.size == self.capacity:\n            self._resize(2 * self.capacity)\n        self.array[self.size] = item\n        self.size += 1\n\n    def __getitem__(self, index):\n        if 0 &lt;= index &lt; self.size:\n            return self.array[index]\n        raise IndexError('Index out of bounds')\n\n    def __len__(self):\n        return self.size\n\n    def __str__(self):\n        return str(self.array[:self.size])\n\n# Usage\narr_list = ArrayList()\narr_list.append(1)\narr_list.append(2)\nprint(arr_list)  # [1, 2]\n</code></pre>"},{"location":"Learning_resources/DSA/Linked_List/#linked-list-introduction","title":"Linked List Introduction","text":"<p>A linked list is a linear data structure where elements are stored in nodes, and each node points to the next node.</p>"},{"location":"Learning_resources/DSA/Linked_List/#advantages-over-arrays","title":"Advantages over arrays:","text":"<ul> <li>Dynamic size</li> <li>Efficient insertions/deletions</li> <li>No memory waste (allocates exactly what's needed)</li> </ul>"},{"location":"Learning_resources/DSA/Linked_List/#disadvantages","title":"Disadvantages:","text":"<ul> <li>No random access</li> <li>Extra memory for pointers</li> <li>Cache locality is worse than arrays</li> </ul>"},{"location":"Learning_resources/DSA/Linked_List/#types-of-linked-lists","title":"Types of Linked Lists","text":""},{"location":"Learning_resources/DSA/Linked_List/#1-singly-linked-list","title":"1. Singly Linked List","text":"<p>Each node contains data and a pointer to the next node.</p> <pre><code>class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass SinglyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n        last = self.head\n        while last.next:\n            last = last.next\n        last.next = new_node\n\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" -&gt; \")\n            current = current.next\n        print(\"None\")\n\n# Usage\nsll = SinglyLinkedList()\nsll.append(1)\nsll.append(2)\nsll.append(3)\nsll.display()  # 1 -&gt; 2 -&gt; 3 -&gt; None\n</code></pre>"},{"location":"Learning_resources/DSA/Linked_List/#2-doubly-linked-list","title":"2. Doubly Linked List","text":"<p>Each node contains data and pointers to both next and previous nodes.</p> <pre><code>class DoublyNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append(self, data):\n        new_node = DoublyNode(data)\n        if not self.head:\n            self.head = new_node\n            return\n        last = self.head\n        while last.next:\n            last = last.next\n        last.next = new_node\n        new_node.prev = last\n\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" &lt;-&gt; \")\n            current = current.next\n        print(\"None\")\n\n# Usage\ndll = DoublyLinkedList()\ndll.append(1)\ndll.append(2)\ndll.append(3)\ndll.display()  # 1 &lt;-&gt; 2 &lt;-&gt; 3 &lt;-&gt; None\n</code></pre>"},{"location":"Learning_resources/DSA/Linked_List/#3-circular-linked-list","title":"3. Circular Linked List","text":"<p>The last node points back to the first node (can be singly or doubly linked).</p> <pre><code>class CircularLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            new_node.next = self.head\n            return\n        last = self.head\n        while last.next != self.head:\n            last = last.next\n        last.next = new_node\n        new_node.next = self.head\n\n    def display(self):\n        if not self.head:\n            return\n        current = self.head\n        while True:\n            print(current.data, end=\" -&gt; \")\n            current = current.next\n            if current == self.head:\n                break\n        print(\"HEAD\")\n\n# Usage\ncll = CircularLinkedList()\ncll.append(1)\ncll.append(2)\ncll.append(3)\ncll.display()  # 1 -&gt; 2 -&gt; 3 -&gt; HEAD\n</code></pre>"},{"location":"Learning_resources/DSA/Linked_List/#basic-linked-list-operations","title":"Basic Linked List Operations","text":""},{"location":"Learning_resources/DSA/Linked_List/#node-creation","title":"Node Creation","text":"<pre><code>class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n</code></pre>"},{"location":"Learning_resources/DSA/Linked_List/#insertion-operations","title":"Insertion Operations","text":"<ol> <li>At beginning</li> <li>At end</li> <li>After a given node</li> </ol> <pre><code>class LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert_at_beginning(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def insert_at_end(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n        last = self.head\n        while last.next:\n            last = last.next\n        last.next = new_node\n\n    def insert_after(self, prev_node, data):\n        if not prev_node:\n            print(\"Previous node must be in the list\")\n            return\n        new_node = Node(data)\n        new_node.next = prev_node.next\n        prev_node.next = new_node\n</code></pre>"},{"location":"Learning_resources/DSA/Linked_List/#deletion-operations","title":"Deletion Operations","text":"<ol> <li>By key (value)</li> <li>By position</li> </ol> <pre><code>    def delete_node(self, key):\n        temp = self.head\n\n        # If head node itself holds the key\n        if temp and temp.data == key:\n            self.head = temp.next\n            temp = None\n            return\n\n        # Search for the key\n        prev = None\n        while temp and temp.data != key:\n            prev = temp\n            temp = temp.next\n\n        # If key not present\n        if not temp:\n            return\n\n        # Unlink the node\n        prev.next = temp.next\n        temp = None\n\n    def delete_at_position(self, pos):\n        if not self.head:\n            return\n\n        temp = self.head\n\n        # If head needs to be removed\n        if pos == 0:\n            self.head = temp.next\n            temp = None\n            return\n\n        # Find previous node of the node to be deleted\n        for i in range(pos-1):\n            temp = temp.next\n            if not temp:\n                break\n\n        # If position is more than number of nodes\n        if not temp or not temp.next:\n            return\n\n        # Node temp.next is the node to be deleted\n        next_node = temp.next.next\n        temp.next = None\n        temp.next = next_node\n</code></pre>"},{"location":"Learning_resources/DSA/Linked_List/#stack-as-linked-list","title":"Stack as Linked List","text":"<pre><code>class StackNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedStack:\n    def __init__(self):\n        self.top = None\n\n    def push(self, data):\n        new_node = StackNode(data)\n        new_node.next = self.top\n        self.top = new_node\n\n    def pop(self):\n        if not self.top:\n            return None\n        popped = self.top.data\n        self.top = self.top.next\n        return popped\n\n    def peek(self):\n        return self.top.data if self.top else None\n\n    def is_empty(self):\n        return self.top is None\n\n# Usage\nstack = LinkedStack()\nstack.push(1)\nstack.push(2)\nstack.push(3)\nprint(stack.pop())  # 3\nprint(stack.peek()) # 2\n</code></pre>"},{"location":"Learning_resources/DSA/Linked_List/#queue-as-linked-list","title":"Queue as Linked List","text":"<pre><code>class QueueNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedQueue:\n    def __init__(self):\n        self.front = None\n        self.rear = None\n\n    def enqueue(self, data):\n        new_node = QueueNode(data)\n        if not self.rear:\n            self.front = self.rear = new_node\n            return\n        self.rear.next = new_node\n        self.rear = new_node\n\n    def dequeue(self):\n        if not self.front:\n            return None\n        temp = self.front\n        self.front = temp.next\n        if not self.front:\n            self.rear = None\n        return temp.data\n\n    def is_empty(self):\n        return self.front is None\n\n# Usage\nqueue = LinkedQueue()\nqueue.enqueue(1)\nqueue.enqueue(2)\nqueue.enqueue(3)\nprint(queue.dequeue())  # 1\nprint(queue.dequeue())  # 2\n</code></pre>"},{"location":"Learning_resources/DSA/Queue/","title":"Queue Data Structure","text":""},{"location":"Learning_resources/DSA/Queue/#basic-concept-of-queue","title":"Basic Concept of Queue","text":"<p>A queue is a linear data structure that follows the First-In-First-Out (FIFO) principle. This means the first element added to the queue will be the first one to be removed.</p>"},{"location":"Learning_resources/DSA/Queue/#real-world-analogies","title":"Real-world Analogies:","text":"<ul> <li>Line at a ticket counter (first person in line gets served first)</li> <li>Printer job queue (first document sent gets printed first)</li> <li>Customer service calls (first caller gets served first)</li> </ul>"},{"location":"Learning_resources/DSA/Queue/#key-characteristics","title":"Key Characteristics:","text":"<ul> <li>Ordered collection of items</li> <li>Addition (enqueue) happens at the \"rear\"</li> <li>Removal (dequeue) happens at the \"front\"</li> <li>Limited access - only front and rear elements are directly accessible</li> </ul> <pre><code># Visualizing queue operations using a list (not efficient for large queues)\nqueue = []\n\n# Enqueue operations\nqueue.append(1)  # Queue: [1]\nqueue.append(2)  # Queue: [1, 2]\nqueue.append(3)  # Queue: [1, 2, 3]\n\n# Dequeue operations\nprint(queue.pop(0))  # Output: 1, Queue: [2, 3]\nprint(queue.pop(0))  # Output: 2, Queue: [3]\nprint(queue.pop(0))  # Output: 3, Queue: []\n</code></pre>"},{"location":"Learning_resources/DSA/Queue/#queue-as-an-abstract-data-type-adt","title":"Queue as an Abstract Data Type (ADT)","text":"<p>As an ADT, a queue is defined by its behavior rather than its implementation. The queue ADT specifies:</p>"},{"location":"Learning_resources/DSA/Queue/#main-operations","title":"Main Operations:","text":"<ol> <li>enqueue(item): Add an item to the rear of the queue</li> <li>dequeue(): Remove and return the front item</li> <li>front()/peek(): Return the front item without removing it</li> <li>is_empty(): Check if the queue is empty</li> <li>size(): Return the number of items in the queue</li> </ol> <pre><code>class Queue:\n    def __init__(self):\n        self.items = []\n\n    def enqueue(self, item):\n        \"\"\"Add an item to the rear of the queue\"\"\"\n        self.items.append(item)\n\n    def dequeue(self):\n        \"\"\"Remove and return the front item\"\"\"\n        if not self.is_empty():\n            return self.items.pop(0)\n        raise IndexError(\"dequeue from empty queue\")\n\n    def front(self):\n        \"\"\"Return the front item without removing it\"\"\"\n        if not self.is_empty():\n            return self.items[0]\n        raise IndexError(\"front from empty queue\")\n\n    def is_empty(self):\n        \"\"\"Check if the queue is empty\"\"\"\n        return len(self.items) == 0\n\n    def size(self):\n        \"\"\"Return the number of items in the queue\"\"\"\n        return len(self.items)\n\n    def __str__(self):\n        return str(self.items)\n\n# Usage example\nq = Queue()\nq.enqueue(10)\nq.enqueue(20)\nq.enqueue(30)\nprint(f\"Queue: {q}\")          # Output: Queue: [10, 20, 30]\nprint(f\"Front item: {q.front()}\") # Output: Front item: 10\nprint(f\"Dequeued: {q.dequeue()}\")    # Output: Dequeued: 10\nprint(f\"Queue size: {q.size()}\") # Output: Queue size: 2\n</code></pre>"},{"location":"Learning_resources/DSA/Queue/#primitive-operations-in-queue","title":"Primitive Operations in Queue","text":""},{"location":"Learning_resources/DSA/Queue/#time-complexities-for-list-implementation","title":"Time Complexities (for list implementation):","text":"<ul> <li>enqueue(): O(1) - constant time (amortized)</li> <li>dequeue(): O(n) - linear time (because we use pop(0))</li> <li>front(): O(1) - constant time</li> <li>is_empty(): O(1) - constant time</li> <li>size(): O(1) - constant time</li> </ul>"},{"location":"Learning_resources/DSA/Queue/#more-efficient-implementations","title":"More Efficient Implementations:","text":"<ol> <li>Using collections.deque: Efficient for both enqueue and dequeue</li> <li>Using Linked List: Constant time for all operations</li> </ol> <pre><code># Queue implementation using collections.deque\nfrom collections import deque\n\nclass DequeQueue:\n    def __init__(self):\n        self.items = deque()\n\n    def enqueue(self, item):\n        self.items.append(item)\n\n    def dequeue(self):\n        return self.items.popleft()\n\n    def front(self):\n        return self.items[0]\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def size(self):\n        return len(self.items)\n\n# Linked List Node for Queue\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n# Queue implementation using Linked List\nclass LinkedListQueue:\n    def __init__(self):\n        self.front = None\n        self.rear = None\n        self._size = 0\n\n    def enqueue(self, item):\n        new_node = Node(item)\n        if self.rear is None:\n            self.front = self.rear = new_node\n        else:\n            self.rear.next = new_node\n            self.rear = new_node\n        self._size += 1\n\n    def dequeue(self):\n        if self.front is None:\n            raise IndexError(\"dequeue from empty queue\")\n        item = self.front.data\n        self.front = self.front.next\n        if self.front is None:\n            self.rear = None\n        self._size -= 1\n        return item\n\n    def peek(self):\n        if self.front is None:\n            raise IndexError(\"peek from empty queue\")\n        return self.front.data\n\n    def is_empty(self):\n        return self.front is None\n\n    def size(self):\n        return self._size\n</code></pre>"},{"location":"Learning_resources/DSA/Queue/#linear-queue","title":"Linear Queue","text":"<p>A linear queue is the simplest form where elements are added at the rear and removed from the front in a linear manner.</p>"},{"location":"Learning_resources/DSA/Queue/#limitations","title":"Limitations:","text":"<ul> <li>Fixed size (in array implementation)</li> <li>Inefficient space utilization (can't reuse empty spaces after dequeue)</li> </ul> <pre><code>class LinearQueue:\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.queue = [None] * capacity\n        self.front = 0\n        self.rear = -1\n        self.size = 0\n\n    def enqueue(self, item):\n        if self.is_full():\n            raise OverflowError(\"Queue is full\")\n        self.rear = (self.rear + 1) % self.capacity\n        self.queue[self.rear] = item\n        self.size += 1\n\n    def dequeue(self):\n        if self.is_empty():\n            raise IndexError(\"Queue is empty\")\n        item = self.queue[self.front]\n        self.front = (self.front + 1) % self.capacity\n        self.size -= 1\n        return item\n\n    def peek(self):\n        if self.is_empty():\n            raise IndexError(\"Queue is empty\")\n        return self.queue[self.front]\n\n    def is_empty(self):\n        return self.size == 0\n\n    def is_full(self):\n        return self.size == self.capacity\n\n    def __str__(self):\n        if self.is_empty():\n            return \"[]\"\n        if self.front &lt;= self.rear:\n            return str(self.queue[self.front:self.rear+1])\n        else:\n            return str(self.queue[self.front:] + self.queue[:self.rear+1])\n\n# Usage\nlq = LinearQueue(5)\nlq.enqueue(10)\nlq.enqueue(20)\nlq.enqueue(30)\nprint(lq.dequeue())  # 10\nlq.enqueue(40)\nlq.enqueue(50)\nprint(lq)  # [20, 30, 40, 50]\n</code></pre>"},{"location":"Learning_resources/DSA/Queue/#circular-queue","title":"Circular Queue","text":"<p>A circular queue improves upon the linear queue by reusing empty spaces in a circular manner.</p>"},{"location":"Learning_resources/DSA/Queue/#advantages","title":"Advantages:","text":"<ul> <li>Better space utilization</li> <li>Fixed size but reuses empty spaces</li> </ul> <pre><code>class CircularQueue:\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.queue = [None] * capacity\n        self.front = 0\n        self.rear = -1\n        self.size = 0\n\n    def enqueue(self, item):\n        if self.is_full():\n            raise OverflowError(\"Queue is full\")\n        self.rear = (self.rear + 1) % self.capacity\n        self.queue[self.rear] = item\n        self.size += 1\n\n    def dequeue(self):\n        if self.is_empty():\n            raise IndexError(\"Queue is empty\")\n        item = self.queue[self.front]\n        self.front = (self.front + 1) % self.capacity\n        self.size -= 1\n        return item\n\n    def peek(self):\n        if self.is_empty():\n            raise IndexError(\"Queue is empty\")\n        return self.queue[self.front]\n\n    def is_empty(self):\n        return self.size == 0\n\n    def is_full(self):\n        return self.size == self.capacity\n\n    def __str__(self):\n        if self.is_empty():\n            return \"[]\"\n        items = []\n        for i in range(self.size):\n            index = (self.front + i) % self.capacity\n            items.append(str(self.queue[index]))\n        return \"[\" + \", \".join(items) + \"]\"\n\n# Usage\ncq = CircularQueue(3)\ncq.enqueue(10)\ncq.enqueue(20)\ncq.enqueue(30)\nprint(cq.dequeue())  # 10\ncq.enqueue(40)  # Works because we've dequeued one item\nprint(cq)  # [20, 30, 40]\n</code></pre>"},{"location":"Learning_resources/DSA/Queue/#priority-queue","title":"Priority Queue","text":"<p>A priority queue is a special type of queue where each element has a priority, and elements are dequeued based on priority rather than insertion order.</p>"},{"location":"Learning_resources/DSA/Queue/#characteristics","title":"Characteristics:","text":"<ul> <li>Higher priority elements are dequeued first</li> <li>Elements with same priority are dequeued in FIFO order</li> <li>Typically implemented using heaps for efficiency</li> </ul> <pre><code># Implementation using heapq module\nimport heapq\n\nclass PriorityQueue:\n    def __init__(self):\n        self._queue = []\n        self._index = 0  # To handle items with same priority\n\n    def enqueue(self, item, priority):\n        heapq.heappush(self._queue, (priority, self._index, item))\n        self._index += 1\n\n    def dequeue(self):\n        if self.is_empty():\n            raise IndexError(\"Priority queue is empty\")\n        return heapq.heappop(self._queue)[-1]  # Return the item only\n\n    def peek(self):\n        if self.is_empty():\n            raise IndexError(\"Priority queue is empty\")\n        return self._queue[0][-1]\n\n    def is_empty(self):\n        return len(self._queue) == 0\n\n    def size(self):\n        return len(self._queue)\n\n# Usage\npq = PriorityQueue()\npq.enqueue(\"Task 1\", 3)\npq.enqueue(\"Task 2\", 1)\npq.enqueue(\"Task 3\", 2)\nprint(pq.dequeue())  # Task 2 (highest priority)\nprint(pq.dequeue())  # Task 3\nprint(pq.dequeue())  # Task 1\n\n# Implementation for FIFO same-priority items\nclass PriorityQueueFIFO:\n    def __init__(self):\n        self._queue = []\n        self._counter = 0\n\n    def enqueue(self, item, priority):\n        heapq.heappush(self._queue, (-priority, self._counter, item))\n        self._counter += 1\n\n    def dequeue(self):\n        return heapq.heappop(self._queue)[-1]\n\n    # Other methods same as above\n\n# Usage with same priority\npqf = PriorityQueueFIFO()\npqf.enqueue(\"Task A\", 1)\npqf.enqueue(\"Task B\", 1)\nprint(pqf.dequeue())  # Task A (same priority, but enqueued first)\nprint(pqf.dequeue())  # Task B\n</code></pre>"},{"location":"Learning_resources/DSA/Queue/#queue-applications","title":"Queue Applications","text":""},{"location":"Learning_resources/DSA/Queue/#common-use-cases","title":"Common Use Cases:","text":"<ol> <li>CPU Scheduling (process scheduling)</li> <li>Disk Scheduling (I/O request handling)</li> <li>Breadth-First Search (BFS) in graphs</li> <li>Print spooling (managing print jobs)</li> <li>Call center systems (handling incoming calls)</li> <li>Network packet routing (handling data packets)</li> </ol> <pre><code># Example: Breadth-First Search (BFS) using Queue\ndef bfs(graph, start):\n    visited = set()\n    queue = Queue()\n    queue.enqueue(start)\n    visited.add(start)\n\n    while not queue.is_empty():\n        vertex = queue.dequeue()\n        print(vertex, end=\" \")\n\n        for neighbor in graph[vertex]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.enqueue(neighbor)\n\n# Example graph\ngraph = {\n    'A': ['B', 'C'],\n    'B': ['A', 'D', 'E'],\n    'C': ['A', 'F'],\n    'D': ['B'],\n    'E': ['B', 'F'],\n    'F': ['C', 'E']\n}\n\nprint(\"BFS Traversal:\")\nbfs(graph, 'A')  # Output: A B C D E F\n\n# Example: Printer Job Management\nclass PrinterQueue:\n    def __init__(self):\n        self.queue = Queue()\n\n    def add_job(self, document, priority=0):\n        self.queue.enqueue((document, priority))\n\n    def print_job(self):\n        if self.queue.is_empty():\n            print(\"No jobs to print\")\n            return\n        document, priority = self.queue.dequeue()\n        print(f\"Printing: {document} (Priority: {priority})\")\n\n    def job_count(self):\n        return self.queue.size()\n\n# Usage\nprinter = PrinterQueue()\nprinter.add_job(\"Report.pdf\", 1)\nprinter.add_job(\"Presentation.pptx\", 2)\nprinter.add_job(\"Image.jpg\")\nprinter.print_job()  # Printing: Report.pdf (Priority: 1)\nprinter.print_job()  # Printing: Presentation.pptx (Priority: 2)\nprinter.print_job()  # Printing: Image.jpg (Priority: 0)\n\n# Example: Ticket Counter Simulation\nimport random\nimport time\n\nclass TicketCounter:\n    def __init__(self):\n        self.queue = Queue()\n        self.ticket_number = 0\n\n    def new_customer(self):\n        self.ticket_number += 1\n        self.queue.enqueue(self.ticket_number)\n        print(f\"Customer {self.ticket_number} joined the queue\")\n\n    def serve_customer(self):\n        if self.queue.is_empty():\n            print(\"No customers to serve\")\n            return\n        customer = self.queue.dequeue()\n        print(f\"Serving customer {customer}\")\n        time.sleep(random.uniform(0.5, 2))  # Simulate service time\n\n    def simulate(self, duration):\n        for minute in range(duration):\n            print(f\"\\nMinute {minute + 1}:\")\n            # Random chance of new customer arriving\n            if random.random() &lt; 0.6:  # 60% chance\n                self.new_customer()\n            # Serve a customer if queue not empty\n            if not self.queue.is_empty():\n                self.serve_customer()\n            else:\n                print(\"Counter idle\")\n\n# Run simulation\ncounter = TicketCounter()\ncounter.simulate(5)  # 5-minute simulation\n</code></pre>"},{"location":"Learning_resources/DSA/Recursion/","title":"Recursion in Computer Science","text":""},{"location":"Learning_resources/DSA/Recursion/#principle-of-recursion","title":"Principle of Recursion","text":"<p>Recursion is a programming technique where a function calls itself to solve a problem by breaking it down into smaller subproblems. </p>"},{"location":"Learning_resources/DSA/Recursion/#key-components","title":"Key Components:","text":"<ol> <li>Base Case: The simplest instance of the problem that can be solved directly (stopping condition)</li> <li>Recursive Case: The part where the function calls itself with a modified input to make progress toward the base case</li> </ol>"},{"location":"Learning_resources/DSA/Recursion/#how-recursion-works","title":"How Recursion Works:","text":"<ul> <li>Each recursive call creates a new instance of the function on the call stack</li> <li>The stack unwinds when base cases are reached</li> <li>Results propagate back up through the call chain</li> </ul> <pre><code>def countdown(n):\n    \"\"\"Simple recursive countdown function\"\"\"\n    if n &lt;= 0:  # Base case\n        print(\"Blastoff!\")\n    else:\n        print(n)\n        countdown(n - 1)  # Recursive call\n\ncountdown(5)\n# Output:\n# 5\n# 4\n# 3\n# 2\n# 1\n# Blastoff!\n</code></pre>"},{"location":"Learning_resources/DSA/Recursion/#comparison-between-recursion-and-iteration","title":"Comparison Between Recursion and Iteration","text":"Characteristic Recursion Iteration Definition Function calls itself Loops (for, while) repeat code Termination Base case stops recursion Condition stops loop State Maintained on call stack Explicitly maintained in variables Memory Higher (stack frames) Lower (fixed variables) Code Size Often smaller Often larger Readability Better for recursive problems Better for simple repetition Speed Slower (function call overhead) Faster <pre><code># Iterative vs Recursive Factorial\ndef factorial_iterative(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n\ndef factorial_recursive(n):\n    if n == 0 or n == 1:  # Base case\n        return 1\n    return n * factorial_recursive(n - 1)  # Recursive case\n\nprint(factorial_iterative(5))  # 120\nprint(factorial_recursive(5))  # 120\n</code></pre>"},{"location":"Learning_resources/DSA/Recursion/#tail-recursion","title":"Tail Recursion","text":"<p>Tail recursion occurs when the recursive call is the last operation in the function. Some languages can optimize this to avoid stack growth.</p>"},{"location":"Learning_resources/DSA/Recursion/#characteristics","title":"Characteristics:","text":"<ul> <li>No computation after the recursive call</li> <li>Can be optimized to use constant stack space</li> <li>Python doesn't optimize tail recursion (unlike some functional languages)</li> </ul> <pre><code># Regular vs Tail Recursive Factorial\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)  # Not tail recursive (multiplication after call)\n\ndef factorial_tail(n, accumulator=1):\n    if n == 0:\n        return accumulator\n    return factorial_tail(n - 1, n * accumulator)  # Tail recursive\n\nprint(factorial(5))         # 120\nprint(factorial_tail(5))    # 120\n</code></pre>"},{"location":"Learning_resources/DSA/Recursion/#classic-recursive-problems","title":"Classic Recursive Problems","text":""},{"location":"Learning_resources/DSA/Recursion/#factorial","title":"Factorial","text":"<pre><code>def factorial(n):\n    \"\"\"Computes n! recursively\"\"\"\n    if n == 0 or n == 1:  # Base case\n        return 1\n    return n * factorial(n - 1)  # Recursive case\n\nprint(factorial(5))  # 120\n</code></pre>"},{"location":"Learning_resources/DSA/Recursion/#fibonacci-sequence","title":"Fibonacci Sequence","text":"<pre><code>def fibonacci(n):\n    \"\"\"Returns nth Fibonacci number\"\"\"\n    if n &lt;= 1:  # Base cases\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)  # Recursive case\n\n# More efficient with memoization\ndef fib_memo(n, memo={0:0, 1:1}):\n    if n not in memo:\n        memo[n] = fib_memo(n-1, memo) + fib_memo(n-2, memo)\n    return memo[n]\n\nprint(fibonacci(10))  # 55 (but inefficient)\nprint(fib_memo(100))  # 354224848179261915075 (efficient)\n</code></pre>"},{"location":"Learning_resources/DSA/Recursion/#greatest-common-divisor-gcd","title":"Greatest Common Divisor (GCD)","text":"<pre><code>def gcd(a, b):\n    \"\"\"Euclidean algorithm for GCD\"\"\"\n    if b == 0:  # Base case\n        return a\n    return gcd(b, a % b)  # Recursive case\n\nprint(gcd(48, 18))  # 6\n</code></pre>"},{"location":"Learning_resources/DSA/Recursion/#tower-of-hanoi","title":"Tower of Hanoi","text":"<pre><code>def tower_of_hanoi(n, source, target, auxiliary):\n    \"\"\"Solve Tower of Hanoi problem\"\"\"\n    if n == 1:  # Base case\n        print(f\"Move disk 1 from {source} to {target}\")\n        return\n    # Move n-1 disks from source to auxiliary\n    tower_of_hanoi(n-1, source, auxiliary, target)\n    # Move remaining disk from source to target\n    print(f\"Move disk {n} from {source} to {target}\")\n    # Move n-1 disks from auxiliary to target\n    tower_of_hanoi(n-1, auxiliary, target, source)\n\ntower_of_hanoi(3, 'A', 'C', 'B')\n# Output:\n# Move disk 1 from A to C\n# Move disk 2 from A to B\n# Move disk 1 from C to B\n# Move disk 3 from A to C\n# Move disk 1 from B to A\n# Move disk 2 from B to C\n# Move disk 1 from A to C\n</code></pre>"},{"location":"Learning_resources/DSA/Recursion/#applications-of-recursion","title":"Applications of Recursion","text":""},{"location":"Learning_resources/DSA/Recursion/#common-use-cases","title":"Common Use Cases:","text":"<ol> <li>Tree/Graph Traversals (DFS, tree operations)</li> <li>Divide and Conquer Algorithms (merge sort, quick sort)</li> <li>Backtracking Problems (maze solving, N-queens)</li> <li>Mathematical Computations (fractals, combinatorics)</li> <li>Parsing and Syntax Analysis (compiler design)</li> </ol> <pre><code># Binary Tree Traversal\nclass TreeNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef inorder_traversal(node):\n    if node:\n        inorder_traversal(node.left)\n        print(node.value, end=\" \")\n        inorder_traversal(node.right)\n\n# Create a simple tree\nroot = TreeNode(1)\nroot.left = TreeNode(2)\nroot.right = TreeNode(3)\nroot.left.left = TreeNode(4)\nroot.left.right = TreeNode(5)\n\nprint(\"Inorder traversal:\")\ninorder_traversal(root)  # Output: 4 2 5 1 3\n\n# Directory Traversal\nimport os\n\ndef list_files(startpath):\n    for root, dirs, files in os.walk(startpath):\n        level = root.replace(startpath, '').count(os.sep)\n        indent = ' ' * 4 * level\n        print(f\"{indent}{os.path.basename(root)}/\")\n        subindent = ' ' * 4 * (level + 1)\n        for f in files:\n            print(f\"{subindent}{f}\")\n\n# list_files('/path/to/directory')  # Uncomment to use\n</code></pre>"},{"location":"Learning_resources/DSA/Recursion/#efficiency-of-recursion","title":"Efficiency of Recursion","text":""},{"location":"Learning_resources/DSA/Recursion/#advantages","title":"Advantages:","text":"<ol> <li>Elegant solutions for inherently recursive problems</li> <li>Reduces code complexity for certain problems</li> <li>Natural fit for tree/graph structures and mathematical definitions</li> </ol>"},{"location":"Learning_resources/DSA/Recursion/#disadvantages","title":"Disadvantages:","text":"<ol> <li>Stack overflow risk with deep recursion</li> <li>Memory overhead from stack frames</li> <li>Slower execution due to function call overhead</li> <li>Debugging complexity compared to iteration</li> </ol>"},{"location":"Learning_resources/DSA/Recursion/#optimization-techniques","title":"Optimization Techniques:","text":"<ol> <li>Memoization: Cache results of expensive function calls</li> <li>Tail Recursion: Where supported by language</li> <li>Iterative Conversion: Rewrite recursive algorithms iteratively</li> </ol> <pre><code># Memoization Example\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef fib(n):\n    if n &lt; 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\nprint(fib(100))  # 354224848179261915075 (instant with memoization)\n\n# Iterative Fibonacci (more efficient)\ndef fib_iter(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\nprint(fib_iter(100))  # Same result, faster execution\n</code></pre>"},{"location":"Learning_resources/DSA/Recursion/#when-to-use-recursion","title":"When to Use Recursion:","text":"<ul> <li>Problem has natural recursive structure (trees, divide-and-conquer)</li> <li>Recursive solution is significantly simpler</li> <li>Depth is limited and stack overflow isn't a concern</li> <li>Language supports tail call optimization</li> </ul>"},{"location":"Learning_resources/DSA/Recursion/#when-to-avoid-recursion","title":"When to Avoid Recursion:","text":"<ul> <li>Performance is critical</li> <li>Problem depth could lead to stack overflow</li> <li>Iterative solution is straightforward</li> <li>Working with very large data sets</li> </ul>"},{"location":"Learning_resources/DSA/Searching_And_Hashing_Algorithms/","title":"Searching and Hashing in Python","text":""},{"location":"Learning_resources/DSA/Searching_And_Hashing_Algorithms/#introduction-to-searching","title":"Introduction to Searching","text":"<p>Searching is the process of finding a particular element in a collection of data. Efficient searching is crucial for performance in many applications like databases, compilers, and AI systems.</p>"},{"location":"Learning_resources/DSA/Searching_And_Hashing_Algorithms/#types-of-searching","title":"Types of Searching:","text":"<ol> <li>Internal Searching: Data fits in main memory (RAM)</li> <li>External Searching: Data is stored in external storage (disk)</li> </ol>"},{"location":"Learning_resources/DSA/Searching_And_Hashing_Algorithms/#key-concepts","title":"Key Concepts:","text":"<ul> <li>Search Key: The value being searched for</li> <li>Search Space: The collection of data being searched</li> <li>Success/Failure: Whether the key is found or not</li> </ul> <pre><code># Basic search example\ndef simple_search(items, target):\n    \"\"\"Returns True if target is found in items\"\"\"\n    for item in items:\n        if item == target:\n            return True\n    return False\n\nnumbers = [4, 2, 7, 1, 9, 5]\nprint(simple_search(numbers, 7))  # True\nprint(simple_search(numbers, 3))  # False\n</code></pre>"},{"location":"Learning_resources/DSA/Searching_And_Hashing_Algorithms/#search-algorithms","title":"Search Algorithms","text":""},{"location":"Learning_resources/DSA/Searching_And_Hashing_Algorithms/#1-sequential-linear-search","title":"1. Sequential (Linear) Search","text":"<p>Checks each element in order until the target is found.</p> <p>Time Complexity:</p> <ul> <li>Best case: O(1) (first element)</li> <li>Average case: O(n)</li> <li>Worst case: O(n) (last element or not present)</li> </ul> <pre><code>def linear_search(arr, target):\n    \"\"\"Returns index of target if found, -1 otherwise\"\"\"\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\n# Example\narr = [10, 20, 30, 40, 50]\nprint(linear_search(arr, 30))  # 2\nprint(linear_search(arr, 35))  # -1\n</code></pre>"},{"location":"Learning_resources/DSA/Searching_And_Hashing_Algorithms/#2-binary-search","title":"2. Binary Search","text":"<p>Efficiently searches a sorted array by repeatedly dividing the search interval in half.</p> <p>Time Complexity:</p> <ul> <li>Best case: O(1) (middle element)</li> <li>Average case: O(log n)</li> <li>Worst case: O(log n)</li> </ul> <pre><code>def binary_search(arr, target):\n    \"\"\"Returns index of target in sorted arr, -1 if not found\"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low &lt;= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] &lt; target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n# Example\nsorted_arr = [10, 20, 30, 40, 50, 60]\nprint(binary_search(sorted_arr, 40))  # 3\nprint(binary_search(sorted_arr, 45))  # -1\n\n# Recursive version\ndef binary_search_recursive(arr, target, low, high):\n    if low &gt; high:\n        return -1\n    mid = (low + high) // 2\n    if arr[mid] == target:\n        return mid\n    elif arr[mid] &lt; target:\n        return binary_search_recursive(arr, target, mid+1, high)\n    else:\n        return binary_search_recursive(arr, target, low, mid-1)\n\n# Wrapper function\ndef binary_search_rec(arr, target):\n    return binary_search_recursive(arr, target, 0, len(arr)-1)\n\nprint(binary_search_rec(sorted_arr, 20))  # 1\n</code></pre>"},{"location":"Learning_resources/DSA/Searching_And_Hashing_Algorithms/#efficiency-of-search-algorithms","title":"Efficiency of Search Algorithms","text":""},{"location":"Learning_resources/DSA/Searching_And_Hashing_Algorithms/#comparison-table","title":"Comparison Table:","text":"Algorithm Best Case Average Case Worst Case Space Complexity Requires Sorted Data Sequential Search O(1) O(n) O(n) O(1) No Binary Search O(1) O(log n) O(log n) O(1) Yes"},{"location":"Learning_resources/DSA/Searching_And_Hashing_Algorithms/#when-to-use-which","title":"When to Use Which:","text":"<ol> <li> <p>Unsorted data or small datasets:</p> <ul> <li>Linear search (simpler implementation)</li> </ul> </li> <li> <p>Large sorted datasets:</p> <ul> <li>Binary search (much more efficient)</li> </ul> </li> <li> <p>Frequent searches on static data:</p> <ul> <li>Sort first then use binary search</li> </ul> </li> </ol> <pre><code># Performance comparison\nimport time\nimport random\n\ndef test_search(search_func, data, target):\n    start = time.perf_counter()\n    result = search_func(data, target)\n    end = time.perf_counter()\n    return (result, end - start)\n\n# Generate test data\nsmall_data = random.sample(range(100), 50)\nlarge_data = sorted(random.sample(range(1000000), 100000))\ntarget_present = large_data[50000]\ntarget_absent = -1\n\n# Test searches\nprint(\"Small dataset (50 elements, unsorted):\")\nres, time_taken = test_search(linear_search, small_data, small_data[25])\nprint(f\"Linear search: {time_taken:.8f} seconds\")\n\nprint(\"\\nLarge dataset (100,000 elements, sorted):\")\nres, time_taken = test_search(linear_search, large_data, target_present)\nprint(f\"Linear search (present): {time_taken:.8f} seconds\")\n\nres, time_taken = test_search(binary_search, large_data, target_present)\nprint(f\"Binary search (present): {time_taken:.8f} seconds\")\n\nres, time_taken = test_search(linear_search, large_data, target_absent)\nprint(f\"Linear search (absent): {time_taken:.8f} seconds\")\n\nres, time_taken = test_search(binary_search, large_data, target_absent)\nprint(f\"Binary search (absent): {time_taken:.8f} seconds\")\n</code></pre>"},{"location":"Learning_resources/DSA/Searching_And_Hashing_Algorithms/#hashing-hash-functions-and-hash-tables","title":"Hashing: Hash Functions and Hash Tables","text":"<p>Hashing is a technique that maps data of arbitrary size to fixed-size values (hash codes) for efficient lookup.</p>"},{"location":"Learning_resources/DSA/Searching_And_Hashing_Algorithms/#key-components","title":"Key Components:","text":"<ol> <li>Hash Function: Maps keys to array indices</li> <li>Hash Table: Data structure that stores key-value pairs</li> <li>Collision Resolution: Handling when two keys hash to the same index</li> </ol>"},{"location":"Learning_resources/DSA/Searching_And_Hashing_Algorithms/#properties-of-good-hash-functions","title":"Properties of Good Hash Functions:","text":"<ol> <li>Deterministic: Same input \u2192 same output</li> <li>Uniform Distribution: Spreads keys evenly</li> <li>Efficient to Compute: Fast calculation</li> <li>Minimal Collisions: Few key overlaps</li> </ol> <pre><code># Simple hash function example\ndef simple_hash(key, size):\n    \"\"\"Basic hash function using modulo\"\"\"\n    return sum(ord(c) for c in str(key)) % size\n\n# Example usage\nprint(simple_hash(\"hello\", 10))  # 2\nprint(simple_hash(\"world\", 10))  # 9\nprint(simple_hash(12345, 10))    # 5\n\n# Python's built-in hash table: dictionary\nhash_table = {}\nhash_table[\"apple\"] = 1.00\nhash_table[\"banana\"] = 0.50\nhash_table[\"orange\"] = 0.75\n\nprint(hash_table.get(\"banana\"))  # 0.5\nprint(hash_table.get(\"grape\", \"Not found\"))  # Not found\n</code></pre>"},{"location":"Learning_resources/DSA/Searching_And_Hashing_Algorithms/#collision-resolution-techniques","title":"Collision Resolution Techniques","text":""},{"location":"Learning_resources/DSA/Searching_And_Hashing_Algorithms/#1-separate-chaining","title":"1. Separate Chaining","text":"<p>Each bucket contains a linked list of entries.</p> <pre><code>class HashTableChaining:\n    def __init__(self, size):\n        self.size = size\n        self.table = [[] for _ in range(size)]\n\n    def _hash(self, key):\n        return hash(key) % self.size\n\n    def insert(self, key, value):\n        hash_key = self._hash(key)\n        bucket = self.table[hash_key]\n\n        # Check if key already exists\n        for i, (k, v) in enumerate(bucket):\n            if k == key:\n                bucket[i] = (key, value)\n                return\n        bucket.append((key, value))\n\n    def search(self, key):\n        hash_key = self._hash(key)\n        bucket = self.table[hash_key]\n\n        for k, v in bucket:\n            if k == key:\n                return v\n        return None\n\n    def delete(self, key):\n        hash_key = self._hash(key)\n        bucket = self.table[hash_key]\n\n        for i, (k, v) in enumerate(bucket):\n            if k == key:\n                del bucket[i]\n                return\n        raise KeyError(key)\n\n# Example usage\nht = HashTableChaining(10)\nht.insert(\"apple\", 1.00)\nht.insert(\"banana\", 0.50)\nht.insert(\"orange\", 0.75)\nht.insert(\"apple\", 1.20)  # Update\n\nprint(ht.search(\"banana\"))  # 0.50\nprint(ht.search(\"apple\"))   # 1.20\nht.delete(\"orange\")\nprint(ht.search(\"orange\"))  # None\n</code></pre>"},{"location":"Learning_resources/DSA/Searching_And_Hashing_Algorithms/#2-open-addressing","title":"2. Open Addressing","text":"<p>All entries are stored in the array itself. When collision occurs, it finds the next available slot.</p>"},{"location":"Learning_resources/DSA/Searching_And_Hashing_Algorithms/#common-probing-methods","title":"Common Probing Methods:","text":"<ul> <li>Linear Probing</li> <li>Quadratic Probing</li> <li>Double Hashing</li> </ul> <pre><code>class HashTableOpenAddressing:\n    def __init__(self, size):\n        self.size = size\n        self.table = [None] * size\n        self.deleted = object()  # Marker for deleted items\n\n    def _hash(self, key, i=0):\n        # Linear probing: h(k, i) = (h'(k) + i) mod m\n        return (hash(key) + i) % self.size\n\n    def insert(self, key, value):\n        for i in range(self.size):\n            hash_key = self._hash(key, i)\n            if self.table[hash_key] is None or self.table[hash_key] is self.deleted:\n                self.table[hash_key] = (key, value)\n                return\n        raise Exception(\"Hash table is full\")\n\n    def search(self, key):\n        for i in range(self.size):\n            hash_key = self._hash(key, i)\n            entry = self.table[hash_key]\n\n            if entry is None:\n                return None\n            if entry is not self.deleted and entry[0] == key:\n                return entry[1]\n        return None\n\n    def delete(self, key):\n        for i in range(self.size):\n            hash_key = self._hash(key, i)\n            entry = self.table[hash_key]\n\n            if entry is None:\n                raise KeyError(key)\n            if entry is not self.deleted and entry[0] == key:\n                self.table[hash_key] = self.deleted\n                return\n        raise KeyError(key)\n\n# Example usage\nht_oa = HashTableOpenAddressing(10)\nht_oa.insert(\"apple\", 1.00)\nht_oa.insert(\"banana\", 0.50)\nht_oa.insert(\"orange\", 0.75)\n\nprint(ht_oa.search(\"banana\"))  # 0.50\nht_oa.delete(\"banana\")\nprint(ht_oa.search(\"banana\"))  # None\n</code></pre>"},{"location":"Learning_resources/DSA/Searching_And_Hashing_Algorithms/#practical-hashing-applications","title":"Practical Hashing Applications","text":""},{"location":"Learning_resources/DSA/Searching_And_Hashing_Algorithms/#1-counting-word-frequencies","title":"1. Counting Word Frequencies","text":"<pre><code>def word_frequency(text):\n    freq = {}\n    for word in text.split():\n        freq[word] = freq.get(word, 0) + 1\n    return freq\n\ntext = \"apple banana orange apple apple orange\"\nprint(word_frequency(text))\n# {'apple': 3, 'banana': 1, 'orange': 2}\n</code></pre>"},{"location":"Learning_resources/DSA/Searching_And_Hashing_Algorithms/#2-implementing-a-cache-lru-cache","title":"2. Implementing a Cache (LRU Cache)","text":"<pre><code>from collections import OrderedDict\n\nclass LRUCache:\n    def __init__(self, capacity):\n        self.cache = OrderedDict()\n        self.capacity = capacity\n\n    def get(self, key):\n        if key not in self.cache:\n            return -1\n        self.cache.move_to_end(key)\n        return self.cache[key]\n\n    def put(self, key, value):\n        if key in self.cache:\n            self.cache.move_to_end(key)\n        self.cache[key] = value\n        if len(self.cache) &gt; self.capacity:\n            self.cache.popitem(last=False)\n\n# Example usage\ncache = LRUCache(2)\ncache.put(1, 1)\ncache.put(2, 2)\nprint(cache.get(1))  # 1\ncache.put(3, 3)      # Evicts key 2\nprint(cache.get(2))  # -1 (not found)\n</code></pre>"},{"location":"Learning_resources/DSA/Searching_And_Hashing_Algorithms/#3-password-storage-with-salting","title":"3. Password Storage (with Salting)","text":"<pre><code>import hashlib\nimport os\n\ndef hash_password(password, salt=None):\n    if salt is None:\n        salt = os.urandom(32)  # Random salt\n    key = hashlib.pbkdf2_hmac(\n        'sha256',\n        password.encode('utf-8'),\n        salt,\n        100000  # Number of iterations\n    )\n    return salt + key\n\ndef verify_password(stored_hash, password):\n    salt = stored_hash[:32]\n    key = stored_hash[32:]\n    new_hash = hash_password(password, salt)\n    return key == new_hash[32:]\n\n# Example usage\npassword = \"securepassword123\"\nhashed = hash_password(password)\nprint(f\"Stored hash: {hashed.hex()}\")\nprint(verify_password(hashed, password))        # True\nprint(verify_password(hashed, \"wrongpass\"))    # False\n</code></pre>"},{"location":"Learning_resources/DSA/Sorting_Algorithms/","title":"Sorting Algorithms in Python","text":""},{"location":"Learning_resources/DSA/Sorting_Algorithms/#introduction-to-sorting","title":"Introduction to Sorting","text":"<p>Sorting is the process of arranging data in a particular order (ascending or descending). It's one of the most fundamental operations in computer science with applications in databases, search algorithms, and data analysis.</p>"},{"location":"Learning_resources/DSA/Sorting_Algorithms/#types-of-sorting","title":"Types of Sorting:","text":"<ol> <li> <p>Internal Sorting:</p> <ul> <li>All data fits in main memory (RAM)</li> <li>Faster access to elements</li> <li>Examples: Bubble sort, Quick sort, Merge sort</li> </ul> </li> <li> <p>External Sorting:</p> <ul> <li>Data is too large to fit in main memory</li> <li>Uses external storage (disk)</li> <li>Examples: External merge sort, Polyphase merge sort</li> </ul> </li> </ol> <pre><code># Internal vs External Sorting Example\ndef internal_sort_example(data):\n    # All data in memory\n    return sorted(data)\n\n# Simulating external sort (using files)\ndef external_sort_example(input_file, output_file, chunk_size=1000):\n    # Divide into sorted chunks\n    chunks = []\n    with open(input_file) as f:\n        while True:\n            chunk = []\n            for _ in range(chunk_size):\n                line = f.readline()\n                if not line:\n                    break\n                chunk.append(int(line))\n            if not chunk:\n                break\n            chunk.sort()\n            chunks.append(chunk)\n\n    # Merge chunks\n    with open(output_file, 'w') as f:\n        for num in sorted(sum(chunks, [])):\n            f.write(f\"{num}\\n\")\n</code></pre>"},{"location":"Learning_resources/DSA/Sorting_Algorithms/#comparison-sorting-algorithms","title":"Comparison Sorting Algorithms","text":""},{"location":"Learning_resources/DSA/Sorting_Algorithms/#1-bubble-sort","title":"1. Bubble Sort","text":"<p>Repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order.</p> <p>Time Complexity: O(n\u00b2) worst and average case, O(n) best case (already sorted)</p> <pre><code>def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        # Last i elements are already in place\n        swapped = False\n        for j in range(0, n-i-1):\n            if arr[j] &gt; arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                swapped = True\n        # If no swaps, array is sorted\n        if not swapped:\n            break\n    return arr\n\n# Example\nnums = [64, 34, 25, 12, 22, 11, 90]\nprint(\"Bubble Sort:\", bubble_sort(nums.copy()))\n</code></pre>"},{"location":"Learning_resources/DSA/Sorting_Algorithms/#2-selection-sort","title":"2. Selection Sort","text":"<p>Divides the input list into a sorted and unsorted region, repeatedly selecting the smallest element from the unsorted region.</p> <p>Time Complexity: O(n\u00b2) in all cases</p> <pre><code>def selection_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[j] &lt; arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\n\n# Example\nprint(\"Selection Sort:\", selection_sort(nums.copy()))\n</code></pre>"},{"location":"Learning_resources/DSA/Sorting_Algorithms/#3-insertion-sort","title":"3. Insertion Sort","text":"<p>Builds the final sorted array one item at a time by inserting each new item into its proper position.</p> <p>Time Complexity: O(n\u00b2) worst and average case, O(n) best case</p> <pre><code>def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j &gt;= 0 and key &lt; arr[j]:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = key\n    return arr\n\n# Example\nprint(\"Insertion Sort:\", insertion_sort(nums.copy()))\n</code></pre>"},{"location":"Learning_resources/DSA/Sorting_Algorithms/#4-shell-sort","title":"4. Shell Sort","text":"<p>An optimization of insertion sort that allows exchange of items that are far apart by using gaps.</p> <p>Time Complexity: O(n^(3/2)) or better depending on gap sequence</p> <pre><code>def shell_sort(arr):\n    n = len(arr)\n    gap = n//2\n    while gap &gt; 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j &gt;= gap and arr[j-gap] &gt; temp:\n                arr[j] = arr[j-gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n\n# Example\nprint(\"Shell Sort:\", shell_sort(nums.copy()))\n</code></pre>"},{"location":"Learning_resources/DSA/Sorting_Algorithms/#divide-and-conquer-sorting","title":"Divide and Conquer Sorting","text":""},{"location":"Learning_resources/DSA/Sorting_Algorithms/#1-merge-sort","title":"1. Merge Sort","text":"<p>Divides the array into halves, sorts each half, then merges them back together.</p> <p>Time Complexity: O(n log n) in all cases</p> <pre><code>def merge_sort(arr):\n    if len(arr) &gt; 1:\n        mid = len(arr)//2\n        L = arr[:mid]\n        R = arr[mid:]\n\n        merge_sort(L)\n        merge_sort(R)\n\n        i = j = k = 0\n\n        while i &lt; len(L) and j &lt; len(R):\n            if L[i] &lt; R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n\n        while i &lt; len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n\n        while j &lt; len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n    return arr\n\n# Example\nprint(\"Merge Sort:\", merge_sort(nums.copy()))\n</code></pre>"},{"location":"Learning_resources/DSA/Sorting_Algorithms/#2-quick-sort","title":"2. Quick Sort","text":"<p>Selects a 'pivot' element and partitions the array around the pivot.</p> <p>Time Complexity: O(n log n) average case, O(n\u00b2) worst case</p> <pre><code>def quick_sort(arr):\n    if len(arr) &lt;= 1:\n        return arr\n    pivot = arr[len(arr)//2]\n    left = [x for x in arr if x &lt; pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x &gt; pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n\n# In-place version\ndef partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] &lt;= pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return i+1\n\ndef quick_sort_inplace(arr, low=0, high=None):\n    if high is None:\n        high = len(arr) - 1\n    if low &lt; high:\n        pi = partition(arr, low, high)\n        quick_sort_inplace(arr, low, pi-1)\n        quick_sort_inplace(arr, pi+1, high)\n    return arr\n\n# Example\nprint(\"Quick Sort:\", quick_sort(nums.copy()))\nprint(\"Quick Sort (In-place):\", quick_sort_inplace(nums.copy()))\n</code></pre>"},{"location":"Learning_resources/DSA/Sorting_Algorithms/#3-heap-sort","title":"3. Heap Sort","text":"<p>Converts the array into a max heap, then repeatedly extracts the maximum element.</p> <p>Time Complexity: O(n log n) in all cases</p> <pre><code>def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n\n    if l &lt; n and arr[i] &lt; arr[l]:\n        largest = l\n\n    if r &lt; n and arr[largest] &lt; arr[r]:\n        largest = r\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    # Build max heap\n    for i in range(n//2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # Extract elements one by one\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr\n\n# Example\nprint(\"Heap Sort:\", heap_sort(nums.copy()))\n</code></pre>"},{"location":"Learning_resources/DSA/Sorting_Algorithms/#efficiency-of-sorting-algorithms","title":"Efficiency of Sorting Algorithms","text":""},{"location":"Learning_resources/DSA/Sorting_Algorithms/#time-complexity-comparison","title":"Time Complexity Comparison","text":"Algorithm Best Case Average Case Worst Case Space Complexity Stable Bubble Sort O(n) O(n\u00b2) O(n\u00b2) O(1) Yes Selection Sort O(n\u00b2) O(n\u00b2) O(n\u00b2) O(1) No Insertion Sort O(n) O(n\u00b2) O(n\u00b2) O(1) Yes Shell Sort O(n log n) O(n^(3/2)) O(n\u00b2) O(1) No Merge Sort O(n log n) O(n log n) O(n log n) O(n) Yes Quick Sort O(n log n) O(n log n) O(n\u00b2) O(log n) No Heap Sort O(n log n) O(n log n) O(n log n) O(1) No"},{"location":"Learning_resources/DSA/Sorting_Algorithms/#when-to-use-which-algorithm","title":"When to Use Which Algorithm:","text":"<ol> <li> <p>Small datasets (n &lt; 100):</p> <ul> <li>Insertion sort (simple, low overhead)</li> </ul> </li> <li> <p>Medium datasets (100 &lt; n &lt; 10,000):</p> <ul> <li>Shell sort or Quick sort (good performance)</li> </ul> </li> <li> <p>Large datasets (n &gt; 10,000):</p> <ul> <li>Merge sort or Heap sort (guaranteed O(n log n))</li> <li>Quick sort (generally fastest in practice)</li> </ul> </li> <li> <p>Special Cases:</p> <ul> <li>Almost sorted data: Insertion sort (approaches O(n))</li> <li>Stability required: Merge sort or Insertion sort</li> <li>Memory constrained: Heap sort (O(1) space)</li> </ul> </li> </ol> <pre><code># Performance comparison function\nimport time\nimport random\n\ndef test_sort(sort_func, data):\n    start = time.time()\n    sort_func(data.copy())\n    end = time.time()\n    return end - start\n\n# Generate test data\nsmall_data = random.sample(range(100), 50)\nmedium_data = random.sample(range(10000), 1000)\nlarge_data = random.sample(range(1000000), 100000)\n\n# Test all algorithms\nalgorithms = {\n    \"Bubble Sort\": bubble_sort,\n    \"Selection Sort\": selection_sort,\n    \"Insertion Sort\": insertion_sort,\n    \"Shell Sort\": shell_sort,\n    \"Merge Sort\": merge_sort,\n    \"Quick Sort\": quick_sort,\n    \"Heap Sort\": heap_sort\n}\n\nprint(\"Small Data (50 elements):\")\nfor name, func in algorithms.items():\n    print(f\"{name}: {test_sort(func, small_data):.6f} seconds\")\n\nprint(\"\\nMedium Data (1000 elements):\")\nfor name, func in algorithms.items():\n    if name not in [\"Bubble Sort\", \"Selection Sort\"]:  # Too slow\n        print(f\"{name}: {test_sort(func, medium_data):.6f} seconds\")\n\nprint(\"\\nLarge Data (100000 elements):\")\nfor name, func in algorithms.items():\n    if name in [\"Merge Sort\", \"Quick Sort\", \"Heap Sort\"]:\n        print(f\"{name}: {test_sort(func, large_data):.6f} seconds\")\n</code></pre>"},{"location":"Learning_resources/DSA/Sorting_Algorithms/#key-takeaways","title":"Key Takeaways:","text":"<ol> <li>O(n\u00b2) algorithms are only suitable for small datasets</li> <li>Quick sort is generally the fastest in practice</li> <li>Merge sort is stable and has consistent performance</li> <li>Heap sort is good when memory is limited</li> <li>The best algorithm depends on your specific data characteristics and requirements</li> </ol>"},{"location":"Learning_resources/DSA/Stack/","title":"Stack Data Structure","text":""},{"location":"Learning_resources/DSA/Stack/#basic-concept-of-stack","title":"Basic Concept of Stack","text":"<p>A stack is a linear data structure that follows the Last-In-First-Out (LIFO) principle. This means the last element added to the stack will be the first one to be removed.</p>"},{"location":"Learning_resources/DSA/Stack/#real-world-analogies","title":"Real-world Analogies:","text":"<ul> <li>Stack of plates (you take the top plate first)</li> <li>Browser back button (most recent page visited is the first to go back to)</li> <li>Undo functionality in editors (most recent change is undone first)</li> </ul>"},{"location":"Learning_resources/DSA/Stack/#key-characteristics","title":"Key Characteristics:","text":"<ul> <li>Ordered collection of items</li> <li>Addition (push) and removal (pop) happens at the same end (called the \"top\")</li> <li>Limited access - only the top element is accessible</li> </ul> <pre><code># Visualizing stack operations\nstack = []\n\n# Push operations\nstack.append(1)  # Stack: [1]\nstack.append(2)  # Stack: [1, 2]\nstack.append(3)  # Stack: [1, 2, 3]\n\n# Pop operations\nprint(stack.pop())  # Output: 3, Stack: [1, 2]\nprint(stack.pop())  # Output: 2, Stack: [1]\nprint(stack.pop())  # Output: 1, Stack: []\n</code></pre>"},{"location":"Learning_resources/DSA/Stack/#stack-as-an-abstract-data-type-adt","title":"Stack as an Abstract Data Type (ADT)","text":"<p>As an ADT, a stack is defined by its behavior rather than its implementation. The stack ADT specifies:</p>"},{"location":"Learning_resources/DSA/Stack/#main-operations","title":"Main Operations:","text":"<ol> <li>push(item): Add an item to the top of the stack</li> <li>pop(): Remove and return the top item</li> <li>peek()/top(): Return the top item without removing it</li> <li>is_empty(): Check if the stack is empty</li> <li>size(): Return the number of items in the stack</li> </ol> <pre><code>class Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        \"\"\"Add an item to the top of the stack\"\"\"\n        self.items.append(item)\n\n    def pop(self):\n        \"\"\"Remove and return the top item\"\"\"\n        if not self.is_empty():\n            return self.items.pop()\n        raise IndexError(\"pop from empty stack\")\n\n    def peek(self):\n        \"\"\"Return the top item without removing it\"\"\"\n        if not self.is_empty():\n            return self.items[-1]\n        raise IndexError(\"peek from empty stack\")\n\n    def is_empty(self):\n        \"\"\"Check if the stack is empty\"\"\"\n        return len(self.items) == 0\n\n    def size(self):\n        \"\"\"Return the number of items in the stack\"\"\"\n        return len(self.items)\n\n    def __str__(self):\n        return str(self.items)\n\n# Usage example\ns = Stack()\ns.push(10)\ns.push(20)\ns.push(30)\nprint(f\"Stack: {s}\")          # Output: Stack: [10, 20, 30]\nprint(f\"Top item: {s.peek()}\") # Output: Top item: 30\nprint(f\"Popped: {s.pop()}\")    # Output: Popped: 30\nprint(f\"Stack size: {s.size()}\") # Output: Stack size: 2\n</code></pre>"},{"location":"Learning_resources/DSA/Stack/#stack-operations","title":"Stack Operations","text":""},{"location":"Learning_resources/DSA/Stack/#time-complexities","title":"Time Complexities:","text":"<ul> <li>push(): O(1) - constant time</li> <li>pop(): O(1) - constant time</li> <li>peek(): O(1) - constant time</li> <li>is_empty(): O(1) - constant time</li> <li>size(): O(1) - constant time</li> </ul>"},{"location":"Learning_resources/DSA/Stack/#implementation-variations","title":"Implementation Variations:","text":"<ol> <li>Using Lists: Python lists can be used directly (as shown above)</li> <li>Using collections.deque: More efficient for large stacks</li> <li>Using Linked List: Better control over memory</li> </ol> <pre><code># Stack implementation using collections.deque\nfrom collections import deque\n\nclass DequeStack:\n    def __init__(self):\n        self.items = deque()\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def peek(self):\n        return self.items[-1]\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def size(self):\n        return len(self.items)\n\n# Linked List Node for Stack\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n# Stack implementation using Linked List\nclass LinkedListStack:\n    def __init__(self):\n        self.top = None\n        self._size = 0\n\n    def push(self, item):\n        new_node = Node(item)\n        new_node.next = self.top\n        self.top = new_node\n        self._size += 1\n\n    def pop(self):\n        if self.top is None:\n            raise IndexError(\"pop from empty stack\")\n        item = self.top.data\n        self.top = self.top.next\n        self._size -= 1\n        return item\n\n    def peek(self):\n        if self.top is None:\n            raise IndexError(\"peek from empty stack\")\n        return self.top.data\n\n    def is_empty(self):\n        return self.top is None\n\n    def size(self):\n        return self._size\n</code></pre>"},{"location":"Learning_resources/DSA/Stack/#stack-applications","title":"Stack Applications","text":""},{"location":"Learning_resources/DSA/Stack/#common-use-cases","title":"Common Use Cases:","text":"<ol> <li>Function call management (call stack)</li> <li>Undo/Redo operations in editors</li> <li>Browser history management</li> <li>Backtracking algorithms (maze solving, etc.)</li> <li>Expression evaluation and syntax parsing</li> <li>Memory management in some systems</li> </ol> <pre><code># Example: Balanced Parentheses Checker\ndef is_balanced(expr):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n\n    for char in expr:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or stack.pop() != mapping[char]:\n                return False\n    return not stack\n\nprint(is_balanced(\"({[]})\"))  # True\nprint(is_balanced(\"({[}])\"))  # False\n\n# Example: Browser Back/Forward Navigation\nclass Browser:\n    def __init__(self):\n        self.back_stack = []\n        self.forward_stack = []\n        self.current_page = None\n\n    def visit(self, url):\n        if self.current_page:\n            self.back_stack.append(self.current_page)\n        self.current_page = url\n        self.forward_stack = []\n\n    def back(self):\n        if self.back_stack:\n            self.forward_stack.append(self.current_page)\n            self.current_page = self.back_stack.pop()\n            return self.current_page\n        return None\n\n    def forward(self):\n        if self.forward_stack:\n            self.back_stack.append(self.current_page)\n            self.current_page = self.forward_stack.pop()\n            return self.current_page\n        return None\n\n# Usage\nbrowser = Browser()\nbrowser.visit(\"google.com\")\nbrowser.visit(\"github.com\")\nbrowser.visit(\"python.org\")\nprint(browser.back())    # Output: github.com\nprint(browser.back())    # Output: google.com\nprint(browser.forward()) # Output: github.com\n</code></pre>"},{"location":"Learning_resources/DSA/Stack/#conversion-from-infix-to-postfix-expressions","title":"Conversion from Infix to Postfix Expressions","text":"<p>Infix notation is the common arithmetic notation (e.g., A + B), while postfix notation (Reverse Polish Notation) places the operator after its operands (e.g., A B +).</p>"},{"location":"Learning_resources/DSA/Stack/#algorithm-steps","title":"Algorithm Steps:","text":"<ol> <li>Initialize an empty stack and empty output list</li> <li>Scan the infix expression from left to right</li> <li>If operand, add to output</li> <li>If '(', push to stack</li> <li>If ')', pop from stack and add to output until '(' is encountered</li> <li>If operator:</li> <li>While stack not empty and top has higher/equal precedence</li> <li>Pop operator from stack to output</li> <li>Push current operator to stack</li> <li>Pop any remaining operators from stack to output</li> </ol> <pre><code>def infix_to_postfix(infix_expr):\n    precedence = {'^': 4, '*': 3, '/': 3, '+': 2, '-': 2}\n    stack = []\n    output = []\n\n    for char in infix_expr:\n        if char.isalnum():  # Operand\n            output.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()  # Remove '(' from stack\n        else:  # Operator\n            while (stack and stack[-1] != '(' and\n                   precedence.get(char, 0) &lt;= precedence.get(stack[-1], 0)):\n                output.append(stack.pop())\n            stack.append(char)\n\n    while stack:\n        output.append(stack.pop())\n\n    return ''.join(output)\n\n# Examples\nprint(infix_to_postfix(\"A+B*C\"))      # Output: ABC*+\nprint(infix_to_postfix(\"(A+B)*C\"))    # Output: AB+C*\nprint(infix_to_postfix(\"A+B*(C^D-E)\")) # Output: ABCD^E-*+\n</code></pre>"},{"location":"Learning_resources/DSA/Stack/#evaluation-of-postfix-expressions","title":"Evaluation of Postfix Expressions","text":"<p>Postfix evaluation is simpler than infix as it doesn't need parentheses or precedence rules.</p>"},{"location":"Learning_resources/DSA/Stack/#algorithm-steps_1","title":"Algorithm Steps:","text":"<ol> <li>Initialize an empty stack</li> <li>Scan the postfix expression from left to right</li> <li>If operand, push to stack</li> <li>If operator, pop top two operands, apply operator, push result</li> <li>After scanning, the stack should contain exactly one element (the result)</li> </ol> <pre><code>def evaluate_postfix(postfix_expr):\n    stack = []\n\n    for char in postfix_expr:\n        if char.isdigit():\n            stack.append(int(char))\n        else:\n            operand2 = stack.pop()\n            operand1 = stack.pop()\n            result = apply_operator(operand1, operand2, char)\n            stack.append(result)\n\n    return stack.pop()\n\ndef apply_operator(a, b, operator):\n    if operator == '+':\n        return a + b\n    elif operator == '-':\n        return a - b\n    elif operator == '*':\n        return a * b\n    elif operator == '/':\n        return a / b\n    elif operator == '^':\n        return a ** b\n    else:\n        raise ValueError(\"Unsupported operator\")\n\n# Examples\nprint(evaluate_postfix(\"23*5+\"))    # Output: 11 (2*3 + 5)\nprint(evaluate_postfix(\"345*+6-\"))  # Output: 17 (3 + 4*5 - 6)\nprint(evaluate_postfix(\"52^3*\"))    # Output: 75 (5^2 * 3)\n\n# Combined example: Convert infix to postfix and evaluate\ninfix_expr = \"3+4*5-6\"\npostfix_expr = infix_to_postfix(infix_expr)\nresult = evaluate_postfix(postfix_expr)\nprint(f\"Infix: {infix_expr} \u2192 Postfix: {postfix_expr} \u2192 Result: {result}\")\n# Output: Infix: 3+4*5-6 \u2192 Postfix: 345*+6- \u2192 Result: 17\n</code></pre>"},{"location":"Learning_resources/DSA/Stack/#handling-multi-digit-numbers","title":"Handling Multi-digit Numbers:","text":"<p>The basic implementation above handles single-digit numbers. Here's an enhanced version for multi-digit numbers:</p> <pre><code>def enhanced_infix_to_postfix(infix_expr):\n    precedence = {'^': 4, '*': 3, '/': 3, '+': 2, '-': 2}\n    stack = []\n    output = []\n    i = 0\n    n = len(infix_expr)\n\n    while i &lt; n:\n        char = infix_expr[i]\n\n        if char == ' ':\n            i += 1\n            continue\n\n        # Handle multi-digit numbers\n        if char.isdigit():\n            num = []\n            while i &lt; n and infix_expr[i].isdigit():\n                num.append(infix_expr[i])\n                i += 1\n            output.append(''.join(num))\n            continue\n\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()  # Remove '('\n        else:  # Operator\n            while (stack and stack[-1] != '(' and\n                   precedence.get(char, 0) &lt;= precedence.get(stack[-1], 0)):\n                output.append(stack.pop())\n            stack.append(char)\n\n        i += 1\n\n    while stack:\n        output.append(stack.pop())\n\n    return ' '.join(output)\n\ndef enhanced_evaluate_postfix(postfix_expr):\n    stack = []\n    tokens = postfix_expr.split()\n\n    for token in tokens:\n        if token.isdigit():\n            stack.append(int(token))\n        else:\n            operand2 = stack.pop()\n            operand1 = stack.pop()\n            result = apply_operator(operand1, operand2, token)\n            stack.append(result)\n\n    return stack.pop()\n\n# Example with multi-digit numbers\ninfix_expr = \"10 + 20 * (30 / 5) - 4\"\npostfix_expr = enhanced_infix_to_postfix(infix_expr)\nresult = enhanced_evaluate_postfix(postfix_expr)\nprint(f\"Infix: {infix_expr} \u2192 Postfix: {postfix_expr} \u2192 Result: {result}\")\n# Output: Infix: 10 + 20 * (30 / 5) - 4 \u2192 Postfix: 10 20 30 5 / * + 4 - \u2192 Result: 126\n</code></pre>"},{"location":"Learning_resources/DSA/Trees_And_Graphs/","title":"Trees and Graphs in Python","text":""},{"location":"Learning_resources/DSA/Trees_And_Graphs/#concept-and-definitions","title":"Concept and Definitions","text":""},{"location":"Learning_resources/DSA/Trees_And_Graphs/#tree-basics","title":"Tree Basics","text":"<p>A tree is a hierarchical data structure consisting of nodes connected by edges with these properties: - One root node - Each node has zero or more child nodes - No cycles (a node can't be its own ancestor)</p> <pre><code>class TreeNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n# Creating a simple tree\nroot = TreeNode(1)\nroot.left = TreeNode(2)\nroot.right = TreeNode(3)\nroot.left.left = TreeNode(4)\nroot.left.right = TreeNode(5)\n</code></pre>"},{"location":"Learning_resources/DSA/Trees_And_Graphs/#key-terminology","title":"Key Terminology:","text":"<ul> <li>Root: Topmost node</li> <li>Parent/Child: Direct connections between nodes</li> <li>Leaf: Node with no children</li> <li>Depth: Number of edges from root to node</li> <li>Height: Number of edges on longest path from node to leaf</li> <li>Level: Depth + 1 (root is level 1)</li> </ul>"},{"location":"Learning_resources/DSA/Trees_And_Graphs/#basic-operations-in-binary-tree","title":"Basic Operations in Binary Tree","text":""},{"location":"Learning_resources/DSA/Trees_And_Graphs/#tree-height-calculation","title":"Tree Height Calculation","text":"<pre><code>def tree_height(node):\n    if node is None:\n        return -1  # or 0 if counting nodes instead of edges\n    return max(tree_height(node.left), tree_height(node.right)) + 1\n\nprint(\"Tree height:\", tree_height(root))  # Output: 2\n</code></pre>"},{"location":"Learning_resources/DSA/Trees_And_Graphs/#node-level-and-depth","title":"Node Level and Depth","text":"<pre><code>def node_depth(node, target, depth=0):\n    if node is None:\n        return -1\n    if node.value == target:\n        return depth\n    left = node_depth(node.left, target, depth+1)\n    if left != -1:\n        return left\n    return node_depth(node.right, target, depth+1)\n\nprint(\"Depth of node 5:\", node_depth(root, 5))  # Output: 2\n</code></pre>"},{"location":"Learning_resources/DSA/Trees_And_Graphs/#binary-search-tree-bst","title":"Binary Search Tree (BST)","text":"<p>A BST is a binary tree where for each node: - All left descendants \u2264 node value - All right descendants &gt; node value</p>"},{"location":"Learning_resources/DSA/Trees_And_Graphs/#bst-insertion","title":"BST Insertion","text":"<pre><code>def bst_insert(root, value):\n    if root is None:\n        return TreeNode(value)\n    if value &lt;= root.value:\n        root.left = bst_insert(root.left, value)\n    else:\n        root.right = bst_insert(root.right, value)\n    return root\n\n# Building a BST\nbst_root = None\nfor num in [5, 3, 7, 2, 4, 6, 8]:\n    bst_root = bst_insert(bst_root, num)\n</code></pre>"},{"location":"Learning_resources/DSA/Trees_And_Graphs/#bst-search","title":"BST Search","text":"<pre><code>def bst_search(root, target):\n    if root is None:\n        return False\n    if root.value == target:\n        return True\n    if target &lt; root.value:\n        return bst_search(root.left, target)\n    return bst_search(root.right, target)\n\nprint(\"Is 6 in BST?\", bst_search(bst_root, 6))  # True\nprint(\"Is 9 in BST?\", bst_search(bst_root, 9))  # False\n</code></pre>"},{"location":"Learning_resources/DSA/Trees_And_Graphs/#bst-deletion","title":"BST Deletion","text":"<pre><code>def bst_delete(root, key):\n    if root is None:\n        return root\n\n    if key &lt; root.value:\n        root.left = bst_delete(root.left, key)\n    elif key &gt; root.value:\n        root.right = bst_delete(root.right, key)\n    else:\n        # Node with only one child or no child\n        if root.left is None:\n            return root.right\n        elif root.right is None:\n            return root.left\n\n        # Node with two children\n        root.value = min_value(root.right)\n        root.right = bst_delete(root.right, root.value)\n\n    return root\n\ndef min_value(node):\n    current = node\n    while current.left:\n        current = current.left\n    return current.value\n\n# Delete node 3\nbst_root = bst_delete(bst_root, 3)\n</code></pre>"},{"location":"Learning_resources/DSA/Trees_And_Graphs/#tree-traversals","title":"Tree Traversals","text":"<pre><code>def inorder_traversal(node):\n    if node:\n        inorder_traversal(node.left)\n        print(node.value, end=\" \")\n        inorder_traversal(node.right)\n\ndef preorder_traversal(node):\n    if node:\n        print(node.value, end=\" \")\n        preorder_traversal(node.left)\n        preorder_traversal(node.right)\n\ndef postorder_traversal(node):\n    if node:\n        postorder_traversal(node.left)\n        postorder_traversal(node.right)\n        print(node.value, end=\" \")\n\nprint(\"Inorder:\", end=\" \")\ninorder_traversal(bst_root)  # 2 4 5 6 7 8\n\nprint(\"\\nPreorder:\", end=\" \")\npreorder_traversal(bst_root)  # 5 4 2 7 6 8\n\nprint(\"\\nPostorder:\", end=\" \")\npostorder_traversal(bst_root)  # 2 4 6 8 7 5\n</code></pre>"},{"location":"Learning_resources/DSA/Trees_And_Graphs/#avl-tree-balanced-bst","title":"AVL Tree (Balanced BST)","text":"<p>AVL trees maintain balance with rotations when the height difference between left and right subtrees (balance factor) exceeds 1.</p>"},{"location":"Learning_resources/DSA/Trees_And_Graphs/#avl-implementation","title":"AVL Implementation","text":"<pre><code>class AVLNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n        self.height = 1\n\ndef get_height(node):\n    if not node:\n        return 0\n    return node.height\n\ndef get_balance(node):\n    if not node:\n        return 0\n    return get_height(node.left) - get_height(node.right)\n\ndef left_rotate(z):\n    y = z.right\n    T2 = y.left\n\n    y.left = z\n    z.right = T2\n\n    z.height = 1 + max(get_height(z.left), get_height(z.right))\n    y.height = 1 + max(get_height(y.left), get_height(y.right))\n\n    return y\n\ndef right_rotate(z):\n    y = z.left\n    T3 = y.right\n\n    y.right = z\n    z.left = T3\n\n    z.height = 1 + max(get_height(z.left), get_height(z.right))\n    y.height = 1 + max(get_height(y.left), get_height(y.right))\n\n    return y\n\ndef avl_insert(root, value):\n    if not root:\n        return AVLNode(value)\n\n    if value &lt; root.value:\n        root.left = avl_insert(root.left, value)\n    else:\n        root.right = avl_insert(root.right, value)\n\n    root.height = 1 + max(get_height(root.left), get_height(root.right))\n\n    balance = get_balance(root)\n\n    # Left Left Case\n    if balance &gt; 1 and value &lt; root.left.value:\n        return right_rotate(root)\n\n    # Right Right Case\n    if balance &lt; -1 and value &gt; root.right.value:\n        return left_rotate(root)\n\n    # Left Right Case\n    if balance &gt; 1 and value &gt; root.left.value:\n        root.left = left_rotate(root.left)\n        return right_rotate(root)\n\n    # Right Left Case\n    if balance &lt; -1 and value &lt; root.right.value:\n        root.right = right_rotate(root.right)\n        return left_rotate(root)\n\n    return root\n\navl_root = None\nfor num in [10, 20, 30, 40, 50, 25]:\n    avl_root = avl_insert(avl_root, num)\n</code></pre>"},{"location":"Learning_resources/DSA/Trees_And_Graphs/#applications-of-trees","title":"Applications of Trees","text":"<ol> <li>File Systems: Directory structure</li> <li>Database Indexing: B-trees, B+ trees</li> <li>Networking: Routing tables</li> <li>Compression: Huffman coding trees</li> <li>AI: Decision trees</li> <li>XML/HTML Parsing: DOM trees</li> </ol>"},{"location":"Learning_resources/DSA/Trees_And_Graphs/#graph-concepts","title":"Graph Concepts","text":""},{"location":"Learning_resources/DSA/Trees_And_Graphs/#graph-definitions","title":"Graph Definitions","text":"<p>A graph G = (V, E) consists of: - V: Set of vertices (nodes) - E: Set of edges (connections between nodes)</p>"},{"location":"Learning_resources/DSA/Trees_And_Graphs/#graph-representations","title":"Graph Representations","text":"<ol> <li> <p>Adjacency Matrix: <pre><code># Undirected graph\ngraph_matrix = [\n    [0, 1, 1, 0],\n    [1, 0, 1, 1],\n    [1, 1, 0, 0],\n    [0, 1, 0, 0]\n]\n</code></pre></p> </li> <li> <p>Adjacency List: <pre><code>graph_list = {\n    'A': ['B', 'C'],\n    'B': ['A', 'C', 'D'],\n    'C': ['A', 'B'],\n    'D': ['B']\n}\n</code></pre></p> </li> </ol>"},{"location":"Learning_resources/DSA/Trees_And_Graphs/#graph-traversals","title":"Graph Traversals","text":""},{"location":"Learning_resources/DSA/Trees_And_Graphs/#breadth-first-search-bfs","title":"Breadth-First Search (BFS)","text":"<pre><code>from collections import deque\n\ndef bfs(graph, start):\n    visited = set()\n    queue = deque([start])\n    visited.add(start)\n\n    while queue:\n        vertex = queue.popleft()\n        print(vertex, end=\" \")\n\n        for neighbor in graph[vertex]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append(neighbor)\n\nprint(\"BFS:\")\nbfs(graph_list, 'A')  # A B C D\n</code></pre>"},{"location":"Learning_resources/DSA/Trees_And_Graphs/#depth-first-search-dfs","title":"Depth-First Search (DFS)","text":"<pre><code>def dfs(graph, node, visited=None):\n    if visited is None:\n        visited = set()\n    visited.add(node)\n    print(node, end=\" \")\n\n    for neighbor in graph[node]:\n        if neighbor not in visited:\n            dfs(graph, neighbor, visited)\n\nprint(\"\\nDFS:\")\ndfs(graph_list, 'A')  # A B C D\n</code></pre>"},{"location":"Learning_resources/DSA/Trees_And_Graphs/#minimum-spanning-trees","title":"Minimum Spanning Trees","text":""},{"location":"Learning_resources/DSA/Trees_And_Graphs/#kruskals-algorithm","title":"Kruskal's Algorithm","text":"<pre><code>class Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = []\n\n    def add_edge(self, u, v, w):\n        self.graph.append([u, v, w])\n\n    def find(self, parent, i):\n        if parent[i] == i:\n            return i\n        return self.find(parent, parent[i])\n\n    def union(self, parent, rank, x, y):\n        xroot = self.find(parent, x)\n        yroot = self.find(parent, y)\n\n        if rank[xroot] &lt; rank[yroot]:\n            parent[xroot] = yroot\n        elif rank[xroot] &gt; rank[yroot]:\n            parent[yroot] = xroot\n        else:\n            parent[yroot] = xroot\n            rank[xroot] += 1\n\n    def kruskal_mst(self):\n        result = []\n        i, e = 0, 0\n        self.graph = sorted(self.graph, key=lambda item: item[2])\n        parent = []\n        rank = []\n\n        for node in range(self.V):\n            parent.append(node)\n            rank.append(0)\n\n        while e &lt; self.V - 1:\n            u, v, w = self.graph[i]\n            i += 1\n            x = self.find(parent, u)\n            y = self.find(parent, v)\n\n            if x != y:\n                e += 1\n                result.append([u, v, w])\n                self.union(parent, rank, x, y)\n\n        print(\"Kruskal's MST:\")\n        for u, v, weight in result:\n            print(f\"{u} -- {v} == {weight}\")\n\ng = Graph(4)\ng.add_edge(0, 1, 10)\ng.add_edge(0, 2, 6)\ng.add_edge(0, 3, 5)\ng.add_edge(1, 3, 15)\ng.add_edge(2, 3, 4)\ng.kruskal_mst()\n</code></pre>"},{"location":"Learning_resources/DSA/Trees_And_Graphs/#prims-algorithm","title":"Prim's Algorithm","text":"<pre><code>import sys\n\nclass PrimGraph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = [[0 for _ in range(vertices)] for _ in range(vertices)]\n\n    def prim_mst(self):\n        key = [sys.maxsize] * self.V\n        parent = [None] * self.V\n        key[0] = 0\n        mst_set = [False] * self.V\n\n        parent[0] = -1\n\n        for _ in range(self.V):\n            u = self.min_key(key, mst_set)\n            mst_set[u] = True\n\n            for v in range(self.V):\n                if self.graph[u][v] &gt; 0 and not mst_set[v] and key[v] &gt; self.graph[u][v]:\n                    key[v] = self.graph[u][v]\n                    parent[v] = u\n\n        self.print_mst(parent)\n\n    def min_key(self, key, mst_set):\n        min_val = sys.maxsize\n        min_index = -1\n\n        for v in range(self.V):\n            if key[v] &lt; min_val and not mst_set[v]:\n                min_val = key[v]\n                min_index = v\n        return min_index\n\n    def print_mst(self, parent):\n        print(\"Prim's MST:\")\n        for i in range(1, self.V):\n            print(f\"{parent[i]} -- {i} == {self.graph[i][parent[i]]}\")\n\ng = PrimGraph(5)\ng.graph = [\n    [0, 2, 0, 6, 0],\n    [2, 0, 3, 8, 5],\n    [0, 3, 0, 0, 7],\n    [6, 8, 0, 0, 9],\n    [0, 5, 7, 9, 0]\n]\ng.prim_mst()\n</code></pre>"},{"location":"Learning_resources/DSA/Trees_And_Graphs/#shortest-path-algorithms","title":"Shortest Path Algorithms","text":""},{"location":"Learning_resources/DSA/Trees_And_Graphs/#dijkstras-algorithm","title":"Dijkstra's Algorithm","text":"<pre><code>import heapq\n\ndef dijkstra(graph, start):\n    distances = {vertex: float('infinity') for vertex in graph}\n    distances[start] = 0\n    pq = [(0, start)]\n\n    while pq:\n        current_dist, current_vertex = heapq.heappop(pq)\n\n        if current_dist &gt; distances[current_vertex]:\n            continue\n\n        for neighbor, weight in graph[current_vertex].items():\n            distance = current_dist + weight\n            if distance &lt; distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n\n    return distances\n\ngraph = {\n    'A': {'B': 2, 'C': 6},\n    'B': {'D': 5},\n    'C': {'D': 8},\n    'D': {}\n}\n\nprint(\"Dijkstra's shortest paths:\")\nprint(dijkstra(graph, 'A'))  # {'A': 0, 'B': 2, 'C': 6, 'D': 7}\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/","title":"MySQL Documentation","text":"<p>Welcome to the MySQL Documentation! This guide is designed to help you master MySQL, including installation, basic commands, advanced queries, and administration tasks.</p>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#getting-started","title":"Getting Started","text":""},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#installation","title":"Installation","text":"<ul> <li> <p>Ubuntu: <pre><code>sudo apt update\nsudo apt install mysql-server\nsudo systemctl start mysql\nsudo systemctl enable mysql\n</code></pre></p> </li> <li> <p>macOS (Homebrew): <pre><code>brew install mysql\nbrew services start mysql\n</code></pre></p> </li> <li> <p>Windows:</p> </li> <li>Download the MySQL Installer from the official website.</li> <li>Follow the installation wizard and set the root password.</li> </ul>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#verifying-installation","title":"Verifying Installation","text":"<p>To confirm MySQL is installed: <pre><code>mysql --version\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#basic-commands","title":"Basic Commands","text":""},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#starting-and-stopping-mysql-service","title":"Starting and Stopping MySQL Service","text":"<ul> <li>Start MySQL: <pre><code>sudo systemctl start mysql\n</code></pre></li> <li>Stop MySQL: <pre><code>sudo systemctl stop mysql\n</code></pre></li> <li>Restart MySQL: <pre><code>sudo systemctl restart mysql\n</code></pre></li> </ul>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#connecting-to-mysql","title":"Connecting to MySQL","text":"<p>To connect as the root user: <pre><code>mysql -u root -p\n</code></pre> - <code>-u</code>: Specifies the username. - <code>-p</code>: Prompts for the password.</p>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#database-operations","title":"Database Operations","text":""},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#create-a-database","title":"Create a Database","text":"<p><pre><code>CREATE DATABASE database_name;\n</code></pre> - Example: <pre><code>CREATE DATABASE test_db;\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#show-databases","title":"Show Databases","text":"<pre><code>SHOW DATABASES;\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#select-a-database","title":"Select a Database","text":"<pre><code>USE database_name;\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#drop-a-database","title":"Drop a Database","text":"<pre><code>DROP DATABASE database_name;\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#table-operations","title":"Table Operations","text":""},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#create-a-table","title":"Create a Table","text":"<p><pre><code>CREATE TABLE table_name (\n    column1 datatype,\n    column2 datatype,\n    ...\n);\n</code></pre> - Example: <pre><code>CREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(100)\n);\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#show-tables","title":"Show Tables","text":"<pre><code>SHOW TABLES;\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#describe-a-table","title":"Describe a Table","text":"<pre><code>DESCRIBE table_name;\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#drop-a-table","title":"Drop a Table","text":"<pre><code>DROP TABLE table_name;\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#crud-operations","title":"CRUD Operations","text":""},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#insert-data","title":"Insert Data","text":"<p><pre><code>INSERT INTO table_name (column1, column2, ...) VALUES (value1, value2, ...);\n</code></pre> - Example: <pre><code>INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com');\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#select-data","title":"Select Data","text":"<p><pre><code>SELECT column1, column2 FROM table_name;\n</code></pre> - Example: <pre><code>SELECT * FROM users;\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#update-data","title":"Update Data","text":"<p><pre><code>UPDATE table_name SET column1 = value1 WHERE condition;\n</code></pre> - Example: <pre><code>UPDATE users SET email = 'new_email@example.com' WHERE id = 1;\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#delete-data","title":"Delete Data","text":"<p><pre><code>DELETE FROM table_name WHERE condition;\n</code></pre> - Example: <pre><code>DELETE FROM users WHERE id = 1;\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#user-management","title":"User Management","text":""},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#create-a-user","title":"Create a User","text":"<pre><code>CREATE USER 'username'@'localhost' IDENTIFIED BY 'password';\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#grant-privileges","title":"Grant Privileges","text":"<pre><code>GRANT ALL PRIVILEGES ON database_name.* TO 'username'@'localhost';\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#show-user-privileges","title":"Show User Privileges","text":"<pre><code>SHOW GRANTS FOR 'username'@'localhost';\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#revoke-privileges","title":"Revoke Privileges","text":"<pre><code>REVOKE ALL PRIVILEGES ON database_name.* FROM 'username'@'localhost';\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#drop-a-user","title":"Drop a User","text":"<pre><code>DROP USER 'username'@'localhost';\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#backup-and-restore","title":"Backup and Restore","text":""},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#backup-a-database","title":"Backup a Database","text":"<pre><code>mysqldump -u username -p database_name &gt; backup.sql\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#restore-a-database","title":"Restore a Database","text":"<pre><code>mysql -u username -p database_name &lt; backup.sql\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#common-administrative-tasks","title":"Common Administrative Tasks","text":""},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#reset-root-password","title":"Reset Root Password","text":"<ol> <li>Stop MySQL:    <pre><code>sudo systemctl stop mysql\n</code></pre></li> <li>Start MySQL in Safe Mode:    <pre><code>sudo mysqld_safe --skip-grant-tables &amp;\n</code></pre></li> <li>Connect to MySQL:    <pre><code>mysql -u root\n</code></pre></li> <li>Reset the Password:    <pre><code>ALTER USER 'root'@'localhost' IDENTIFIED BY 'new_password';\n</code></pre></li> <li>Restart MySQL:    <pre><code>sudo systemctl restart mysql\n</code></pre></li> </ol>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#check-mysql-status","title":"Check MySQL Status","text":"<pre><code>sudo systemctl status mysql\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#advanced-queries","title":"Advanced Queries","text":""},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#joins","title":"Joins","text":"<ul> <li> <p>Inner Join: <pre><code>SELECT * FROM table1\nINNER JOIN table2 ON table1.id = table2.table1_id;\n</code></pre></p> </li> <li> <p>Left Join: <pre><code>SELECT * FROM table1\nLEFT JOIN table2 ON table1.id = table2.table1_id;\n</code></pre></p> </li> <li> <p>Right Join: <pre><code>SELECT * FROM table1\nRIGHT JOIN table2 ON table1.id = table2.table1_id;\n</code></pre></p> </li> </ul>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#indexing-and-optimization","title":"Indexing and Optimization","text":""},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#create-an-index","title":"Create an Index","text":"<pre><code>CREATE INDEX index_name ON table_name (column_name);\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#drop-an-index","title":"Drop an Index","text":"<pre><code>DROP INDEX index_name ON table_name;\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#troubleshooting","title":"Troubleshooting","text":""},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#view-error-logs","title":"View Error Logs","text":"<ul> <li>On Linux:   <pre><code>sudo tail -f /var/log/mysql/error.log\n</code></pre></li> </ul>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#check-for-running-queries","title":"Check for Running Queries","text":"<pre><code>SHOW FULL PROCESSLIST;\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/MySQL/#resources","title":"Resources","text":"<ul> <li>MySQL Official Documentation</li> <li>MySQL Tutorials</li> </ul> <p>This documentation is structured to provide step-by-step instructions for MySQL usage and administration tasks. For a complete guide, refer to the official documentation. ```</p>"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/","title":"Database Normalization","text":"<p>Database normalization is the process of organizing the fields and tables of a relational database to minimize redundancy and dependency. It involves dividing large tables into smaller tables and defining relationships between them to enhance data integrity and reduce duplication.</p> <p>Normalization is carried out in stages, each stage referred to as a \"normal form.\" Below are the key normal forms, their rules, and examples.</p>"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#objectives-of-normalization","title":"Objectives of Normalization","text":"<ul> <li>Reduce Data Redundancy: Avoid storing the same data in multiple places.</li> <li>Improve Data Integrity: Ensure data consistency and correctness.</li> <li>Facilitate Query Optimization: Enable efficient querying by structuring the data logically.</li> <li>Simplify Maintenance: Make it easier to update, delete, or add data.</li> </ul>"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#types-of-normal-forms","title":"Types of Normal Forms","text":""},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#1-first-normal-form-1nf","title":"1. First Normal Form (1NF)","text":"<p>A table is in 1NF if: - Each column contains atomic (indivisible) values. - Each row is unique.</p>"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#example-before-1nf","title":"Example (Before 1NF):","text":"OrderID Product Quantity 1 Pen, Pencil 5, 10 2 Notebook 15"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#problems","title":"Problems:","text":"<ul> <li>Non-atomic values (e.g., \"Pen, Pencil\" in the <code>Product</code> column).</li> <li>Hard to query specific items.</li> </ul>"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#after-applying-1nf","title":"After Applying 1NF:","text":"OrderID Product Quantity 1 Pen 5 1 Pencil 10 2 Notebook 15"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#2-second-normal-form-2nf","title":"2. Second Normal Form (2NF)","text":"<p>A table is in 2NF if:</p> <ul> <li>It is in 1NF.</li> <li>All non-key attributes are fully dependent on the primary key.</li> </ul>"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#example-before-2nf","title":"Example (Before 2NF):","text":"OrderID Product Quantity SupplierName 1 Pen 5 ABC Supplies 2 Pencil 10 ABC Supplies"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#problems_1","title":"Problems:","text":"<ul> <li><code>SupplierName</code> depends only on <code>Product</code>, not on the full composite key (<code>OrderID, Product</code>).</li> </ul>"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#after-applying-2nf","title":"After Applying 2NF:","text":"<p>Orders Table:</p> OrderID Product Quantity 1 Pen 5 2 Pencil 10 <p>Suppliers Table:</p> Product SupplierName Pen ABC Supplies Pencil ABC Supplies"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#3-third-normal-form-3nf","title":"3. Third Normal Form (3NF)","text":"<p>A table is in 3NF if: - It is in 2NF. - No transitive dependency exists (non-key attributes do not depend on other non-key attributes).</p>"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#example-before-3nf","title":"Example (Before 3NF):","text":"ProductID ProductName Category CategoryDescription 101 Pen Stationery Writing materials 102 Notebook Stationery Writing materials"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#problems_2","title":"Problems:","text":"<ul> <li><code>CategoryDescription</code> depends on <code>Category</code>, not directly on <code>ProductID</code>.</li> </ul>"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#after-applying-3nf","title":"After Applying 3NF:","text":"<p>Products Table:</p> ProductID ProductName Category 101 Pen Stationery 102 Notebook Stationery <p>Categories Table:</p> Category CategoryDescription Stationery Writing materials"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#4-boyce-codd-normal-form-bcnf","title":"4. Boyce-Codd Normal Form (BCNF)","text":"<p>A table is in BCNF if:</p> <ul> <li>It is in 3NF.</li> <li>Every determinant is a candidate key (a determinant is an attribute that uniquely determines other attributes).</li> </ul>"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#example","title":"Example:","text":"TeacherID Course Department T1 Math Science T2 Physics Science T3 Math Arts"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#problems_3","title":"Problems:","text":"<ul> <li><code>Course</code> determines <code>Department</code>, but <code>Course</code> is not a candidate key.</li> </ul>"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#after-applying-bcnf","title":"After Applying BCNF:","text":"<p>Teachers Table:</p> TeacherID Course T1 Math T2 Physics T3 Math <p>Courses Table:</p> Course Department Math Science Physics Science Math Arts"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#5-fourth-normal-form-4nf","title":"5. Fourth Normal Form (4NF)","text":"<p>A table is in 4NF if:</p> <ul> <li>It is in BCNF.</li> <li>It has no multi-valued dependencies (an attribute depends on another attribute independently of other attributes).</li> </ul>"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#example-before-4nf","title":"Example (Before 4NF):","text":"StudentID Course Hobby 1 Math Reading 1 Math Painting 2 Physics Reading 2 Physics Chess"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#problems_4","title":"Problems:","text":"<ul> <li><code>Course</code> and <code>Hobby</code> are independent of each other but are stored together.</li> </ul>"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#after-applying-4nf","title":"After Applying 4NF:","text":"<p>Students-Courses Table:</p> StudentID Course 1 Math 2 Physics <p>Students-Hobbies Table:</p> StudentID Hobby 1 Reading 1 Painting 2 Reading 2 Chess"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#6-fifth-normal-form-5nf","title":"6. Fifth Normal Form (5NF)","text":"<p>A table is in 5NF if: - It is in 4NF. - It has no join dependencies (a table should not be decomposable into smaller tables without losing data).</p>"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#example_1","title":"Example:","text":"ProjectID EmployeeID Role P1 E1 Developer P1 E2 Tester P2 E1 Developer P2 E3 Designer"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#after-applying-5nf","title":"After Applying 5NF:","text":"<p>Projects-Employees Table:</p> ProjectID EmployeeID P1 E1 P1 E2 P2 E1 P2 E3 <p>Employees-Roles Table:</p> EmployeeID Role E1 Developer E2 Tester E3 Designer"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#6-sixth-normal-form-6nf","title":"6. Sixth Normal Form (6NF)","text":"<p>A table is in 6NF if:</p> <ul> <li>It is in 5NF.</li> <li>It deals with temporal data and non-additive join dependencies, typically requiring specialized use cases.</li> </ul>"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#example_2","title":"Example:","text":"<p>Consider a scenario with temporal data where changes in attributes over time are stored, like salary changes for employees.</p>"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#benefits-of-normalization","title":"Benefits of Normalization","text":"<ol> <li>Eliminates Redundancy: Reduces duplication, saving storage space.</li> <li>Improves Data Consistency: Updates and deletes are consistent across tables.</li> <li>Enhances Query Performance: Structured data allows for faster and more efficient queries.</li> </ol>"},{"location":"Learning_resources/Data%20Science/DBMS/Normalization/#when-not-to-normalize","title":"When Not to Normalize","text":"<p>Sometimes, denormalization is preferred for: - Analytical purposes, where joins may hinder performance. - Situations requiring quick read operations.</p> <p>By understanding and applying normalization, you can design databases that are efficient, maintainable, and reliable for your applications.</p>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/","title":"PostgreSQL: From Installation to Database Management","text":"<p>This guide covers essential PostgreSQL commands and operations for beginners to get started with PostgreSQL on a Unix-based system.</p>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#installation","title":"\ud83d\udce6 Installation","text":""},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#ubuntudebian","title":"Ubuntu/Debian","text":"<pre><code>sudo apt update\nsudo apt install postgresql postgresql-contrib\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#fedora","title":"Fedora","text":"<p><pre><code>sudo dnf install postgresql-server postgresql-contrib\nsudo postgresql-setup --initdb\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n</code></pre> \ud83e\uddd1\u200d\ud83d\udd27 Managing PostgreSQL Service</p>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#start-postgresql","title":"Start PostgreSQL","text":"<pre><code>sudo systemctl start postgresql\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#stop-postgresql","title":"Stop PostgreSQL","text":"<pre><code>sudo systemctl stop postgresql\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#restart-postgresql","title":"Restart PostgreSQL","text":"<pre><code>sudo systemctl restart postgresql\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#check-status","title":"Check status","text":"<p><pre><code>sudo systemctl status postgresql\n</code></pre> \ud83d\udc64 PostgreSQL User and Role Management</p>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#switch-to-the-postgres-user","title":"Switch to the postgres user","text":"<pre><code>sudo -i -u postgres\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#access-postgresql-shell","title":"Access PostgreSQL shell","text":"<p><pre><code>psql\n</code></pre> or </p>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#direct-access-postgresql-shell","title":"Direct Access PostgreSQL shell","text":"<pre><code>sudo -u postgres psql\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#create-a-new-roleuser","title":"Create a new role/user","text":"<pre><code>CREATE ROLE your_username WITH LOGIN PASSWORD 'your_password';\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#grant-privileges-to-the-user","title":"Grant privileges to the user","text":"<pre><code>ALTER ROLE your_username CREATEDB;\n</code></pre> <p>\ud83c\udfd7\ufe0f Database Operations</p>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#create-a-new-database","title":"Create a new database","text":"<pre><code>CREATE DATABASE your_database_name;\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#connect-to-a-database","title":"Connect to a database","text":"<pre><code>psql -d your_database_name\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#or-within-psql-shell","title":"Or within psql shell:","text":"<pre><code>\\c your_database_name\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#list-databases","title":"List databases","text":"<pre><code>\\l\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#drop-a-database","title":"Drop a database","text":"<pre><code>DROP DATABASE your_database_name;\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#table-management","title":"\ud83d\udcc4 Table Management","text":""},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#create-a-table","title":"Create a table","text":"<pre><code>CREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#insert-data","title":"Insert data","text":"<pre><code>INSERT INTO users (username, email) VALUES ('santosh', 'santosh@example.com');\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#view-data","title":"View data","text":"<pre><code>SELECT * FROM users;\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#update-data","title":"Update data","text":"<pre><code>UPDATE users SET email = 'new@example.com' WHERE username = 'santosh';\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#delete-data","title":"Delete data","text":"<p><pre><code>DELETE FROM users WHERE username = 'santosh';\n</code></pre> \ud83d\udd10 Role and Permission Management</p>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#list-roles","title":"List roles","text":"<pre><code>\\du\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#grant-permissions-on-a-database","title":"Grant permissions on a database","text":"<pre><code>GRANT ALL PRIVILEGES ON DATABASE your_database TO your_username;\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#revoke-permissions","title":"Revoke permissions","text":"<p><pre><code>REVOKE ALL PRIVILEGES ON DATABASE your_database FROM your_username;\n</code></pre> \ud83d\udee0\ufe0f Useful psql Commands <pre><code>\\q                      -- Quit psql\n\\dt                     -- List tables\n\\d table_name           -- Describe table structure\n\\du                     -- List roles\n\\l                      -- List databases\n\\c db_name              -- Connect to database\n</code></pre> \ud83d\udce4 Backup and Restore</p>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#backup-a-database","title":"Backup a database","text":"<pre><code>pg_dump your_database_name &gt; backup.sql\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#restore-from-a-backup","title":"Restore from a backup","text":"<pre><code>psql your_database_name &lt; backup.sql\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#export-to-csv","title":"Export to CSV","text":"<pre><code>COPY users TO '/path/to/file.csv' DELIMITER ',' CSV HEADER;\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#import-from-csv","title":"Import from CSV","text":"<pre><code>COPY users FROM '/path/to/file.csv' DELIMITER ',' CSV HEADER;\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#reset-postgresql-password","title":"\ud83d\udd04 Reset PostgreSQL Password","text":"<p><pre><code>sudo -u postgres psql\n</code></pre> <pre><code>ALTER USER postgres WITH PASSWORD 'new_password';\n</code></pre></p> <p>\ud83d\udd01 Stored Procedure</p>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#create-stored-procedure","title":"Create Stored Procedure","text":"<pre><code>CREATE OR REPLACE PROCEDURE increase_salary(emp_id INT, increment NUMERIC)\nLANGUAGE plpgsql\nAS $$\nBEGIN\n    UPDATE employees\n    SET salary = salary + increment\n    WHERE id = emp_id;\nEND;\n$$;\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#call-stored-procedure","title":"Call Stored Procedure","text":"<pre><code>CALL increase_salary(1, 1000.00);\n</code></pre> <p>\ud83d\udd14 Trigger</p>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#step-1-create-audit-table","title":"Step 1: Create Audit Table","text":"<pre><code>CREATE TABLE employee_audit (\n    id SERIAL PRIMARY KEY,\n    employee_id INT,\n    old_salary NUMERIC,\n    new_salary NUMERIC,\n    changed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#step-2-create-trigger-function","title":"Step 2: Create Trigger Function","text":"<pre><code>CREATE OR REPLACE FUNCTION log_salary_changes()\nRETURNS TRIGGER AS $$\nBEGIN\n    IF NEW.salary &lt;&gt; OLD.salary THEN\n        INSERT INTO employee_audit (employee_id, old_salary, new_salary)\n        VALUES (OLD.id, OLD.salary, NEW.salary);\n    END IF;\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n</code></pre>"},{"location":"Learning_resources/Data%20Science/DBMS/POSTGRESQL/#step-3-create-trigger","title":"Step 3: Create Trigger","text":"<p><pre><code>CREATE TRIGGER trigger_salary_change\nAFTER UPDATE ON employees\nFOR EACH ROW\nEXECUTE FUNCTION log_salary_changes();\n</code></pre> \ud83e\uddea Verify Trigger <pre><code>UPDATE employees\nSET salary = salary + 2000\nWHERE id = 1;\n\nSELECT * FROM employee_audit;\n</code></pre></p> <p>\ud83d\udcda References</p> <p>PostgreSQL Documentation</p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Geopandas/","title":"Geopandas Data Visualization Guide","text":"<p>Geopandas extends pandas to enable spatial operations and geographic visualizations. Here's a comprehensive guide to creating maps and spatial visualizations with Geopandas.</p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Geopandas/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Basic Map Plotting</li> <li>Choropleth Maps</li> <li>Point Maps</li> <li>Heatmaps</li> <li>Line Maps</li> <li>Interactive Maps</li> <li>Customizing Maps</li> </ol>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Geopandas/#basic-map-plotting","title":"Basic Map Plotting","text":""},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Geopandas/#simple-boundary-plot","title":"Simple Boundary Plot","text":"<p>Purpose: Visualize geographic boundaries Best for: Showing regions/countries/states</p> <pre><code>import geopandas as gpd\n\n# Load example dataset\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n\n# Plot countries\nax = world.plot(figsize=(10, 6))\nax.set_title(\"World Countries\")\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Geopandas/#multiple-layers","title":"Multiple Layers","text":"<p>Purpose: Combine different geographic layers Best for: Contextual mapping</p> <pre><code>cities = gpd.read_file(gpd.datasets.get_path('naturalearth_cities'))\n\nax = world.plot(color='lightgrey', edgecolor='black', figsize=(12, 8))\ncities.plot(ax=ax, color='red', markersize=5)\nax.set_title(\"World Map with Major Cities\")\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Geopandas/#choropleth-maps","title":"Choropleth Maps","text":""},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Geopandas/#basic-choropleth","title":"Basic Choropleth","text":"<p>Purpose: Color regions by attribute values Best for: Thematic mapping of statistics</p> <pre><code>ax = world.plot(column='pop_est', \n                legend=True,\n                figsize=(12, 8),\n                cmap='OrRd',\n                scheme='quantiles')\nax.set_title(\"World Population Estimate\")\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Geopandas/#custom-classification-schemes","title":"Custom Classification Schemes","text":"<p>Purpose: Control how data is binned Best for: Highlighting specific value ranges</p> <pre><code>ax = world.plot(column='gdp_md_est',\n                legend=True,\n                figsize=(12, 8),\n                cmap='Blues',\n                scheme='natural_breaks',\n                k=5)\nax.set_title(\"World GDP Estimate (Natural Breaks)\")\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Geopandas/#point-maps","title":"Point Maps","text":""},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Geopandas/#scatter-plot-on-map","title":"Scatter Plot on Map","text":"<p>Purpose: Show point data with geographic context Best for: Event locations, site analysis</p> <pre><code>ax = world.plot(color='lightgrey', figsize=(12, 8))\ncities.plot(ax=ax, \n           column='name', \n           markersize=cities['pop_max']/1000000,\n           cmap='viridis',\n           legend=True)\nax.set_title(\"World Cities by Population\")\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Geopandas/#bubble-map","title":"Bubble Map","text":"<p>Purpose: Show magnitude with point size Best for: Comparing quantitative values at points</p> <pre><code>ax = world.plot(color='lightgrey', figsize=(12, 8))\ncities.plot(ax=ax, \n           markersize=cities['pop_max']/500000,\n           color='red',\n           alpha=0.5)\nax.set_title(\"City Population Bubble Map\")\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Geopandas/#heatmaps","title":"Heatmaps","text":""},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Geopandas/#density-heatmap","title":"Density Heatmap","text":"<p>Purpose: Show point density Best for: Hotspot analysis</p> <pre><code>import matplotlib.pyplot as plt\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\n\nfig, ax = plt.subplots(figsize=(12, 8))\ndivider = make_axes_locatable(ax)\ncax = divider.append_axes(\"right\", size=\"5%\", pad=0.1)\n\nworld.plot(ax=ax, color='lightgrey')\ncities.plot(ax=ax, \n           markersize=1,\n           color='darkred',\n           alpha=0.3)\nax.set_title(\"City Density Heatmap\")\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Geopandas/#line-maps","title":"Line Maps","text":""},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Geopandas/#route-visualization","title":"Route Visualization","text":"<p>Purpose: Show paths/routes/networks Best for: Transportation analysis</p> <pre><code># Example with NYC taxi data\nroutes = gpd.read_file('taxi_routes.geojson')\nnyc = gpd.read_file('nyc_boundary.geojson')\n\nax = nyc.plot(color='lightgrey', figsize=(12, 8))\nroutes.plot(ax=ax, linewidth=0.5, alpha=0.3, color='blue')\nax.set_title(\"Taxi Routes in NYC\")\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Geopandas/#interactive-maps","title":"Interactive Maps","text":""},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Geopandas/#folium-integration","title":"Folium Integration","text":"<p>Purpose: Create interactive web maps Best for: Exploratory analysis</p> <pre><code>import folium\nfrom folium.plugins import HeatMap\n\nm = folium.Map(location=[20, 0], zoom_start=2)\n\n# Add GeoJSON layer\nfolium.GeoJson(world).add_to(m)\n\n# Add points\nfor idx, row in cities.iterrows():\n    folium.CircleMarker(\n        location=[row.geometry.y, row.geometry.x],\n        radius=3,\n        color='red',\n        fill=True\n    ).add_to(m)\n\nm.save('interactive_map.html')\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Geopandas/#customizing-maps","title":"Customizing Maps","text":""},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Geopandas/#advanced-styling","title":"Advanced Styling","text":"<p>Purpose: Create publication-quality maps Best for: Final presentation</p> <pre><code>fig, ax = plt.subplots(figsize=(15, 10))\n\n# Base map\nworld.plot(ax=ax, \n           color='#f0f0f0', \n           edgecolor='#999999', \n           linewidth=0.5)\n\n# Highlight specific countries\nworld[world['continent'] == 'Africa'].plot(\n    ax=ax, \n    color='#2ca25f', \n    edgecolor='black'\n)\n\n# Add cities\ncities.plot(ax=ax, \n            color='red', \n            markersize=5, \n            alpha=0.7)\n\n# Customize\nax.set_title(\"Africa with Major Cities\", fontsize=16)\nax.set_axis_off()\nplt.tight_layout()\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Geopandas/#adding-map-elements","title":"Adding Map Elements","text":"<p>Purpose: Enhance map readability Best for: Professional maps</p> <pre><code>import contextily as ctx\n\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Plot your geodataframe\nnyc.plot(ax=ax, alpha=0.5, edgecolor='k')\n\n# Add basemap\nctx.add_basemap(ax, crs=nyc.crs, source=ctx.providers.Stamen.TonerLite)\n\n# Add scalebar\nfrom mpl_toolkits.axes_grid1.anchored_artists import AnchoredSizeBar\nscalebar = AnchoredSizeBar(ax.transData,\n                          10000,  # 10km\n                          '10 km', \n                          'lower right',\n                          pad=0.5,\n                          color='black',\n                          frameon=False,\n                          size_vertical=1)\nax.add_artist(scalebar)\n\nax.set_title(\"New York City with Basemap\")\nax.set_axis_off()\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Geopandas/#key-geopandas-features","title":"Key Geopandas Features","text":"<ol> <li>CRS Support: Handle different coordinate reference systems</li> <li>Spatial Joins: Combine data based on geographic relationships</li> <li>Geometric Operations: Buffers, intersections, unions</li> <li>Attribute Queries: Filter data using spatial predicates</li> <li>Integration: Works with matplotlib, folium, plotly, and more</li> </ol> <p>To install required packages: <pre><code>pip install geopandas matplotlib folium contextily\n</code></pre></p> <p>Geopandas provides the foundation for geographic data science in Python, combining pandas' data manipulation with geographic operations and visualization capabilities.</p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Matplotlib/","title":"Data Visualization using Matplotlib","text":"<p>Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python. Below is a complete guide covering various types of graphs with explanations, syntax, and example code.</p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Matplotlib/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Line Plot</li> <li>Bar Chart</li> <li>Histogram</li> <li>Scatter Plot</li> <li>Pie Chart</li> <li>Box Plot</li> <li>Violin Plot</li> <li>Heatmap</li> <li>Area Plot</li> <li>3D Plotting</li> </ol>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Matplotlib/#line-plot","title":"Line Plot","text":"<p>Used to visualize trends over time or ordered categories.</p> <p>Syntax: <pre><code>plt.plot(x, y, linestyle, color, marker, label)\n</code></pre></p> <p>Example: <pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nplt.figure(figsize=(8, 4))\nplt.plot(x, y, linestyle='-', color='blue', marker='.', label='sin(x)')\nplt.title('Sine Wave')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.legend()\nplt.grid(True)\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Matplotlib/#bar-chart","title":"Bar Chart","text":"<p>Used to compare categorical data.</p> <p>Syntax: <pre><code>plt.bar(x, height, width, color, label)\n</code></pre></p> <p>Example: <pre><code>categories = ['A', 'B', 'C', 'D']\nvalues = [15, 20, 12, 25]\n\nplt.figure(figsize=(6, 4))\nplt.bar(categories, values, width=0.6, color=['red', 'green', 'blue', 'orange'])\nplt.title('Bar Chart Example')\nplt.xlabel('Categories')\nplt.ylabel('Values')\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Matplotlib/#histogram","title":"Histogram","text":"<p>Used to show the distribution of numerical data.</p> <p>Syntax: <pre><code>plt.hist(data, bins, color, edgecolor)\n</code></pre></p> <p>Example: <pre><code>data = np.random.normal(0, 1, 1000)\n\nplt.figure(figsize=(6, 4))\nplt.hist(data, bins=30, color='skyblue', edgecolor='black')\nplt.title('Histogram of Normal Distribution')\nplt.xlabel('Value')\nplt.ylabel('Frequency')\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Matplotlib/#scatter-plot","title":"Scatter Plot","text":"<p>Used to show relationship between two numerical variables.</p> <p>Syntax: <pre><code>plt.scatter(x, y, color, marker, size)\n</code></pre></p> <p>Example: <pre><code>x = np.random.rand(50)\ny = x + np.random.normal(0, 0.1, 50)\n\nplt.figure(figsize=(6, 4))\nplt.scatter(x, y, color='green', marker='o', s=50)\nplt.title('Scatter Plot Example')\nplt.xlabel('X values')\nplt.ylabel('Y values')\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Matplotlib/#pie-chart","title":"Pie Chart","text":"<p>Used to show proportions of a whole.</p> <p>Syntax: <pre><code>plt.pie(data, labels, colors, explode, autopct)\n</code></pre></p> <p>Example: <pre><code>sizes = [30, 25, 15, 10, 20]\nlabels = ['A', 'B', 'C', 'D', 'E']\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'orange']\n\nplt.figure(figsize=(6, 6))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\nplt.title('Pie Chart Example')\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Matplotlib/#box-plot","title":"Box Plot","text":"<p>Used to show distribution of data through quartiles.</p> <p>Syntax: <pre><code>plt.boxplot(data, vert, patch_artist)\n</code></pre></p> <p>Example: <pre><code>data = [np.random.normal(0, std, 100) for std in range(1, 4)]\n\nplt.figure(figsize=(6, 4))\nplt.boxplot(data, vert=True, patch_artist=True)\nplt.title('Box Plot Example')\nplt.xlabel('Groups')\nplt.ylabel('Values')\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Matplotlib/#violin-plot","title":"Violin Plot","text":"<p>Similar to box plot but shows the probability density.</p> <p>Syntax: <pre><code>plt.violinplot(data, showmeans, showmedians)\n</code></pre></p> <p>Example: <pre><code>data = [np.random.normal(0, std, 100) for std in range(1, 4)]\n\nplt.figure(figsize=(6, 4))\nplt.violinplot(data, showmeans=True, showmedians=True)\nplt.title('Violin Plot Example')\nplt.xlabel('Groups')\nplt.ylabel('Values')\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Matplotlib/#heatmap","title":"Heatmap","text":"<p>Used to visualize matrix-like data with colors.</p> <p>Syntax: <pre><code>plt.imshow(data, cmap)\nplt.colorbar()\n</code></pre></p> <p>Example: <pre><code>data = np.random.rand(10, 10)\n\nplt.figure(figsize=(6, 6))\nplt.imshow(data, cmap='hot', interpolation='nearest')\nplt.colorbar()\nplt.title('Heatmap Example')\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Matplotlib/#area-plot","title":"Area Plot","text":"<p>Used to show cumulative totals over time.</p> <p>Syntax: <pre><code>plt.stackplot(x, y1, y2, ..., colors, labels)\n</code></pre></p> <p>Example: <pre><code>x = np.arange(0, 10, 0.1)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\nplt.figure(figsize=(8, 4))\nplt.stackplot(x, y1, y2, colors=['skyblue', 'lightgreen'], labels=['sin(x)', 'cos(x)'])\nplt.title('Area Plot Example')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.legend()\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Matplotlib/#3d-plotting","title":"3D Plotting","text":"<p>Used for three-dimensional visualizations.</p> <p>Syntax: <pre><code>from mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, cmap)\n</code></pre></p> <p>Example: <pre><code>from mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(111, projection='3d')\n\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\nax.plot_surface(X, Y, Z, cmap='viridis')\nax.set_title('3D Surface Plot')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_zlabel('Z-axis')\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Matplotlib/#common-matplotlib-functions","title":"Common Matplotlib Functions","text":"Function Description <code>plt.figure()</code> Creates a new figure <code>plt.title()</code> Sets the title of the plot <code>plt.xlabel()</code>/<code>plt.ylabel()</code> Sets x/y-axis label <code>plt.xlim()</code>/<code>plt.ylim()</code> Sets x/y-axis limits <code>plt.legend()</code> Shows legend <code>plt.grid()</code> Adds grid lines <code>plt.savefig()</code> Saves the figure to a file <code>plt.show()</code> Displays the plot <p>Remember to always include <code>plt.show()</code> at the end of your plotting commands to display the visualization. For Jupyter notebooks, you may want to use the magic command <code>%matplotlib inline</code> at the beginning of your notebook.</p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly-2/","title":"Data Visualization with Plotly: Essential Chart Types Explained","text":"<p>Plotly is a powerful Python library for creating interactive, publication-quality visualizations. Here's a concise guide to its main chart types with examples:</p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly-2/#basic-charts","title":"Basic Charts","text":""},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly-2/#1-scatter-plots","title":"1. Scatter Plots","text":"<p>Purpose: Show relationships between two continuous variables Best for: Correlation analysis, clusters, outliers <pre><code>import plotly.express as px\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", color=\"species\")\nfig.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly-2/#2-line-charts","title":"2. Line Charts","text":"<p>Purpose: Display trends over time/ordered categories Best for: Time series, progress tracking <pre><code>df = px.data.stocks()\nfig = px.line(df, x=\"date\", y=\"GOOG\", title=\"Google Stock Price\")\nfig.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly-2/#3-bar-charts","title":"3. Bar Charts","text":"<p>Purpose: Compare quantities across categories Best for: Performance comparison, survey results <pre><code>df = px.data.tips()\nfig = px.bar(df, x=\"day\", y=\"total_bill\", color=\"sex\")\nfig.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly-2/#4-pie-charts","title":"4. Pie Charts","text":"<p>Purpose: Show proportional composition Best for: Market share, budget allocation <pre><code>df = px.data.tips()\nfig = px.pie(df, names=\"day\", values=\"total_bill\")\nfig.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly-2/#statistical-charts","title":"Statistical Charts","text":""},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly-2/#5-histograms","title":"5. Histograms","text":"<p>Purpose: Display data distribution Best for: Understanding spread, skewness <pre><code>fig = px.histogram(df, x=\"total_bill\", nbins=20)\nfig.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly-2/#6-box-plots","title":"6. Box Plots","text":"<p>Purpose: Show quartiles and outliers Best for: Statistical comparison, outlier detection <pre><code>fig = px.box(df, x=\"day\", y=\"total_bill\", color=\"smoker\")\nfig.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly-2/#7-violin-plots","title":"7. Violin Plots","text":"<p>Purpose: Combine box plot with density estimation Best for: Distribution shape comparison <pre><code>fig = px.violin(df, x=\"day\", y=\"total_bill\", box=True)\nfig.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly-2/#advanced-visualizations","title":"Advanced Visualizations","text":""},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly-2/#8-heatmaps","title":"8. Heatmaps","text":"<p>Purpose: Visualize matrix data with colors Best for: Correlation matrices, confusion matrices <pre><code>fig = px.imshow([[1, 20, 30], [20, 1, 60], [30, 60, 1]])\nfig.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly-2/#9-3d-scatter-plots","title":"9. 3D Scatter Plots","text":"<p>Purpose: Explore 3-variable relationships Best for: Multidimensional data analysis <pre><code>fig = px.scatter_3d(df, x='sepal_length', y='sepal_width', z='petal_width')\nfig.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly-2/#10-maps-choropleth","title":"10. Maps (Choropleth)","text":"<p>Purpose: Geographic data visualization Best for: Regional comparisons, election results <pre><code>df = px.data.gapminder().query(\"year == 2007\")\nfig = px.choropleth(df, locations=\"iso_alpha\", color=\"gdpPercap\")\nfig.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly-2/#financial-charts","title":"Financial Charts","text":""},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly-2/#11-candlestick-charts","title":"11. Candlestick Charts","text":"<p>Purpose: Show financial market data Best for: Stock price movements <pre><code>df = px.data.stocks(indexed=True)\nfig = px.line(df, facet_col=\"company\", facet_col_wrap=2)\nfig.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly-2/#interactive-features","title":"Interactive Features","text":"<p>Plotly charts automatically include: - Hover tooltips - Zoom/pan controls - Click legend to toggle traces - Download as image option</p> <p>To customize: <pre><code>fig.update_layout(\n    title=\"Custom Title\",\n    xaxis_title=\"X Label\",\n    yaxis_title=\"Y Label\"\n)\n</code></pre></p> <p>For Jupyter notebooks, ensure you have the required renderer: <pre><code>import plotly.io as pio\npio.renderers.default = \"notebook\"\n</code></pre></p> <p>Plotly excels at creating interactive visualizations that can be embedded in web applications (using Dash) or exported as standalone HTML files. The library offers over 40 chart types with extensive customization options while maintaining simplicity through its Plotly Express high-level API.</p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/","title":"Data Visualization using Plotly","text":"<p>Plotly is an interactive, open-source visualization library that supports over 40 chart types. It provides high-level APIs for Python (Plotly Express) and low-level graph objects (Plotly Graph Objects) for more customization.</p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Basic Charts</li> <li>Statistical Charts</li> <li>Financial Charts</li> <li>Maps</li> <li>3D Charts</li> <li>Subplots</li> <li>Animation</li> <li>Customization</li> </ol>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#basic-charts","title":"Basic Charts","text":""},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#scatter-plot","title":"Scatter Plot","text":"<p>Syntax (Plotly Express): <pre><code>px.scatter(data_frame, x, y, color, size, hover_name, trendline)\n</code></pre></p> <p>Example: <pre><code>import plotly.express as px\n\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", \n                 color=\"species\", size=\"petal_length\",\n                 hover_name=\"species\", trendline=\"ols\")\nfig.show()\n</code></pre></p> <p>Syntax (Graph Objects): <pre><code>go.Scatter(x, y, mode, name, marker)\n</code></pre></p> <p>Example: <pre><code>import plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x=df[\"sepal_width\"],\n    y=df[\"sepal_length\"],\n    mode=\"markers\",\n    marker=dict(\n        size=df[\"petal_length\"]*2,\n        color=df[\"species_id\"],\n        showscale=True\n    )\n))\nfig.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#line-plot","title":"Line Plot","text":"<p>Syntax: <pre><code>px.line(data_frame, x, y, color, line_group)\n</code></pre></p> <p>Example: <pre><code>df = px.data.gapminder().query(\"country=='Canada'\")\nfig = px.line(df, x=\"year\", y=\"lifeExp\", \n              title=\"Life expectancy in Canada\")\nfig.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#bar-chart","title":"Bar Chart","text":"<p>Syntax: <pre><code>px.bar(data_frame, x, y, color, barmode)\n</code></pre></p> <p>Example: <pre><code>df = px.data.tips()\nfig = px.bar(df, x=\"day\", y=\"total_bill\", \n             color=\"sex\", barmode=\"group\")\nfig.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#pie-chart","title":"Pie Chart","text":"<p>Syntax: <pre><code>px.pie(data_frame, names, values, color_discrete_sequence)\n</code></pre></p> <p>Example: <pre><code>df = px.data.tips()\nfig = px.pie(df, names=\"day\", values=\"total_bill\",\n             color_discrete_sequence=px.colors.sequential.RdBu)\nfig.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#statistical-charts","title":"Statistical Charts","text":""},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#histogram","title":"Histogram","text":"<p>Syntax: <pre><code>px.histogram(data_frame, x, y, color, marginal, nbins)\n</code></pre></p> <p>Example: <pre><code>df = px.data.tips()\nfig = px.histogram(df, x=\"total_bill\", color=\"sex\", \n                   marginal=\"rug\", nbins=30)\nfig.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#box-plot","title":"Box Plot","text":"<p>Syntax: <pre><code>px.box(data_frame, x, y, color, points)\n</code></pre></p> <p>Example: <pre><code>fig = px.box(df, x=\"day\", y=\"total_bill\", \n             color=\"smoker\", points=\"all\")\nfig.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#violin-plot","title":"Violin Plot","text":"<p>Syntax: <pre><code>px.violin(data_frame, x, y, color, box)\n</code></pre></p> <p>Example: <pre><code>fig = px.violin(df, x=\"day\", y=\"total_bill\", \n                color=\"sex\", box=True)\nfig.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#density-heatmap","title":"Density Heatmap","text":"<p>Syntax: <pre><code>px.density_heatmap(data_frame, x, y, z, nbinsx, nbinsy)\n</code></pre></p> <p>Example: <pre><code>fig = px.density_heatmap(df, x=\"total_bill\", y=\"tip\", \n                         nbinsx=20, nbinsy=20)\nfig.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#financial-charts","title":"Financial Charts","text":""},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#candlestick-chart","title":"Candlestick Chart","text":"<p>Syntax: <pre><code>go.Candlestick(x, open, high, low, close)\n</code></pre></p> <p>Example: <pre><code>import pandas as pd\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\nfig = go.Figure(go.Candlestick(\n    x=df['Date'],\n    open=df['AAPL.Open'],\n    high=df['AAPL.High'],\n    low=df['AAPL.Low'],\n    close=df['AAPL.Close']\n))\nfig.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#ohlc-chart","title":"OHLC Chart","text":"<p>Syntax: <pre><code>go.Ohlc(x, open, high, low, close)\n</code></pre></p> <p>Example: <pre><code>fig = go.Figure(go.Ohlc(\n    x=df['Date'],\n    open=df['AAPL.Open'],\n    high=df['AAPL.High'],\n    low=df['AAPL.Low'],\n    close=df['AAPL.Close']\n))\nfig.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#maps","title":"Maps","text":""},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#scatter-map","title":"Scatter Map","text":"<p>Syntax: <pre><code>px.scatter_geo(data_frame, lat, lon, color, size)\n</code></pre></p> <p>Example: <pre><code>df = px.data.gapminder().query(\"year == 2007\")\nfig = px.scatter_geo(df, locations=\"iso_alpha\",\n                     color=\"continent\",\n                     size=\"pop\",\n                     projection=\"natural earth\")\nfig.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#choropleth-map","title":"Choropleth Map","text":"<p>Syntax: <pre><code>px.choropleth(data_frame, locations, color, locationmode)\n</code></pre></p> <p>Example: <pre><code>fig = px.choropleth(df, locations=\"iso_alpha\",\n                    color=\"lifeExp\",\n                    hover_name=\"country\",\n                    color_continuous_scale=px.colors.sequential.Plasma)\nfig.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#3d-charts","title":"3D Charts","text":""},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#3d-scatter-plot","title":"3D Scatter Plot","text":"<p>Syntax: <pre><code>px.scatter_3d(data_frame, x, y, z, color)\n</code></pre></p> <p>Example: <pre><code>df = px.data.iris()\nfig = px.scatter_3d(df, x='sepal_length', \n                    y='sepal_width', z='petal_width',\n                    color='species')\nfig.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#surface-plot","title":"Surface Plot","text":"<p>Syntax: <pre><code>go.Surface(z, colorscale)\n</code></pre></p> <p>Example: <pre><code>import numpy as np\nz = np.random.rand(10,10)\nfig = go.Figure(go.Surface(z=z, colorscale=\"Viridis\"))\nfig.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#subplots","title":"Subplots","text":""},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#make-subplots","title":"Make Subplots","text":"<p>Syntax: <pre><code>make_subplots(rows, cols, subplot_titles)\n</code></pre></p> <p>Example: <pre><code>from plotly.subplots import make_subplots\n\nfig = make_subplots(rows=1, cols=2)\n\nfig.add_trace(go.Scatter(x=[1,2,3], y=[4,5,6]), row=1, col=1)\nfig.add_trace(go.Bar(x=[1,2,3], y=[3,2,1]), row=1, col=2)\n\nfig.update_layout(height=400, width=800, title_text=\"Subplots\")\nfig.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#animation","title":"Animation","text":""},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#animated-charts","title":"Animated Charts","text":"<p>Syntax: <pre><code>px.scatter(data_frame, animation_frame, animation_group)\n</code></pre></p> <p>Example: <pre><code>df = px.data.gapminder()\nfig = px.scatter(df, x=\"gdpPercap\", y=\"lifeExp\",\n                 size=\"pop\", color=\"continent\",\n                 hover_name=\"country\",\n                 animation_frame=\"year\",\n                 animation_group=\"country\",\n                 range_x=[100,100000], range_y=[25,90])\nfig.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#customization","title":"Customization","text":""},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#update-layout","title":"Update Layout","text":"<p>Syntax: <pre><code>fig.update_layout(title, xaxis_title, yaxis_title)\n</code></pre></p> <p>Example: <pre><code>fig.update_layout(\n    title=\"Customized Chart\",\n    xaxis_title=\"X Axis Title\",\n    yaxis_title=\"Y Axis Title\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=18,\n        color=\"#7f7f7f\"\n    )\n)\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#update-traces","title":"Update Traces","text":"<p>Syntax: <pre><code>fig.update_traces(marker_size, line_width)\n</code></pre></p> <p>Example: <pre><code>fig.update_traces(\n    marker=dict(size=12, line=dict(width=2, color='DarkSlateGrey')),\n    selector=dict(mode='markers')\n)\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Plotly/#key-plotly-features","title":"Key Plotly Features","text":"<ol> <li>Interactivity: Hover tooltips, zoom, pan, and click events</li> <li>Themes: Built-in templates like <code>plotly</code>, <code>plotly_white</code>, <code>plotly_dark</code></li> <li>Export: Save as PNG, JPEG, SVG, or PDF</li> <li>Dash Integration: Build interactive web applications</li> <li>Web Support: Embed charts in websites and notebooks</li> </ol> <p>To use Plotly in Jupyter notebooks, you may need to install the required extensions: <pre><code>pip install jupyter-dash\n</code></pre></p> <p>Plotly offers both a high-level API (Plotly Express) for quick visualization and a low-level API (Graph Objects) for detailed customization. The library works seamlessly with Pandas DataFrames and integrates well with Dash for building analytical web applications.</p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Seaborn/","title":"Data Visualization using Seaborn","text":"<p>Seaborn is a Python data visualization library built on top of Matplotlib that provides a high-level interface for drawing attractive and informative statistical graphics. Below is a comprehensive guide covering various types of Seaborn plots with explanations, syntax, and example code.</p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Seaborn/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Relational Plots</li> <li>Distribution Plots</li> <li>Categorical Plots</li> <li>Regression Plots</li> <li>Matrix Plots</li> <li>Multi-plot Grids</li> <li>Styling and Themes</li> </ol>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Seaborn/#relational-plots","title":"Relational Plots","text":"<p>Used to visualize relationships between variables.</p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Seaborn/#scatter-plot-relplot-or-scatterplot","title":"Scatter Plot (<code>relplot</code> or <code>scatterplot</code>)","text":"<p>Syntax: <pre><code>sns.scatterplot(x, y, data, hue, size, style)\n# or\nsns.relplot(x, y, data, kind='scatter', hue, size, style)\n</code></pre></p> <p>Example: <pre><code>import seaborn as sns\nimport matplotlib.pyplot as plt\n\ntips = sns.load_dataset('tips')\n\n# Using scatterplot\nplt.figure(figsize=(8, 6))\nsns.scatterplot(x='total_bill', y='tip', data=tips, hue='time', size='size')\nplt.title('Scatter Plot of Tips vs Total Bill')\nplt.show()\n\n# Using relplot\nsns.relplot(x='total_bill', y='tip', data=tips, kind='scatter', \n            hue='day', style='time', size='size')\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Seaborn/#line-plot-lineplot","title":"Line Plot (<code>lineplot</code>)","text":"<p>Syntax: <pre><code>sns.lineplot(x, y, data, hue, style, ci)\n</code></pre></p> <p>Example: <pre><code>fmri = sns.load_dataset('fmri')\n\nplt.figure(figsize=(10, 6))\nsns.lineplot(x='timepoint', y='signal', data=fmri, \n             hue='region', style='event', ci=68)\nplt.title('FMRI Signal Over Time')\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Seaborn/#distribution-plots","title":"Distribution Plots","text":"<p>Used to visualize distributions of data.</p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Seaborn/#histogram-histplot","title":"Histogram (<code>histplot</code>)","text":"<p>Syntax: <pre><code>sns.histplot(data, x, y, bins, kde, hue)\n</code></pre></p> <p>Example: <pre><code>penguins = sns.load_dataset('penguins')\n\nplt.figure(figsize=(8, 6))\nsns.histplot(data=penguins, x='flipper_length_mm', \n             bins=20, kde=True, hue='species')\nplt.title('Distribution of Flipper Length')\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Seaborn/#kernel-density-estimate-kdeplot","title":"Kernel Density Estimate (<code>kdeplot</code>)","text":"<p>Syntax: <pre><code>sns.kdeplot(data, x, y, hue, shade)\n</code></pre></p> <p>Example: <pre><code>plt.figure(figsize=(8, 6))\nsns.kdeplot(data=penguins, x='bill_length_mm', \n            hue='species', shade=True)\nplt.title('KDE of Bill Length')\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Seaborn/#joint-plot-jointplot","title":"Joint Plot (<code>jointplot</code>)","text":"<p>Syntax: <pre><code>sns.jointplot(x, y, data, kind='scatter'|'kde'|'hist'|'reg'|'hex')\n</code></pre></p> <p>Example: <pre><code>sns.jointplot(x='total_bill', y='tip', data=tips, \n              kind='reg', hue='time')\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Seaborn/#pair-plot-pairplot","title":"Pair Plot (<code>pairplot</code>)","text":"<p>Syntax: <pre><code>sns.pairplot(data, hue, vars, kind, diag_kind)\n</code></pre></p> <p>Example: <pre><code>sns.pairplot(penguins, hue='species', \n             vars=['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm'])\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Seaborn/#categorical-plots","title":"Categorical Plots","text":"<p>Used to visualize categorical data.</p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Seaborn/#bar-plot-barplot","title":"Bar Plot (<code>barplot</code>)","text":"<p>Syntax: <pre><code>sns.barplot(x, y, data, hue, ci, estimator)\n</code></pre></p> <p>Example: <pre><code>plt.figure(figsize=(8, 6))\nsns.barplot(x='day', y='total_bill', data=tips, \n            hue='sex', ci=68, estimator=sum)\nplt.title('Total Bill by Day and Gender')\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Seaborn/#count-plot-countplot","title":"Count Plot (<code>countplot</code>)","text":"<p>Syntax: <pre><code>sns.countplot(x, data, hue)\n</code></pre></p> <p>Example: <pre><code>plt.figure(figsize=(8, 6))\nsns.countplot(x='day', data=tips, hue='sex')\nplt.title('Count of Customers by Day')\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Seaborn/#box-plot-boxplot","title":"Box Plot (<code>boxplot</code>)","text":"<p>Syntax: <pre><code>sns.boxplot(x, y, data, hue)\n</code></pre></p> <p>Example: <pre><code>plt.figure(figsize=(10, 6))\nsns.boxplot(x='day', y='total_bill', data=tips, hue='time')\nplt.title('Box Plot of Total Bill by Day and Time')\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Seaborn/#violin-plot-violinplot","title":"Violin Plot (<code>violinplot</code>)","text":"<p>Syntax: <pre><code>sns.violinplot(x, y, data, hue, split)\n</code></pre></p> <p>Example: <pre><code>plt.figure(figsize=(10, 6))\nsns.violinplot(x='day', y='total_bill', data=tips, \n               hue='sex', split=True)\nplt.title('Violin Plot of Total Bill by Day and Gender')\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Seaborn/#swarm-plot-swarmplot","title":"Swarm Plot (<code>swarmplot</code>)","text":"<p>Syntax: <pre><code>sns.swarmplot(x, y, data, hue)\n</code></pre></p> <p>Example: <pre><code>plt.figure(figsize=(10, 6))\nsns.swarmplot(x='day', y='total_bill', data=tips, hue='sex')\nplt.title('Swarm Plot of Total Bill by Day')\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Seaborn/#regression-plots","title":"Regression Plots","text":"<p>Used to visualize relationships with regression fits.</p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Seaborn/#regression-plot-regplot","title":"Regression Plot (<code>regplot</code>)","text":"<p>Syntax: <pre><code>sns.regplot(x, y, data, ci, order)\n</code></pre></p> <p>Example: <pre><code>plt.figure(figsize=(8, 6))\nsns.regplot(x='total_bill', y='tip', data=tips, \n            ci=95, order=2)\nplt.title('Quadratic Regression of Tips vs Total Bill')\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Seaborn/#lm-plot-lmplot","title":"LM Plot (<code>lmplot</code>)","text":"<p>Syntax: <pre><code>sns.lmplot(x, y, data, hue, col, row)\n</code></pre></p> <p>Example: <pre><code>sns.lmplot(x='total_bill', y='tip', data=tips, \n           hue='smoker', col='time', row='sex')\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Seaborn/#matrix-plots","title":"Matrix Plots","text":"<p>Used for matrix-like data visualization.</p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Seaborn/#heatmap-heatmap","title":"Heatmap (<code>heatmap</code>)","text":"<p>Syntax: <pre><code>sns.heatmap(data, annot, fmt, cmap)\n</code></pre></p> <p>Example: <pre><code>flights = sns.load_dataset('flights')\nflights_matrix = flights.pivot('month', 'year', 'passengers')\n\nplt.figure(figsize=(10, 8))\nsns.heatmap(flights_matrix, annot=True, fmt='d', cmap='YlGnBu')\nplt.title('Passengers Heatmap by Year and Month')\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Seaborn/#cluster-map-clustermap","title":"Cluster Map (<code>clustermap</code>)","text":"<p>Syntax: <pre><code>sns.clustermap(data, standard_scale, z_score)\n</code></pre></p> <p>Example: <pre><code>plt.figure(figsize=(10, 8))\nsns.clustermap(flights_matrix, standard_scale=1, cmap='coolwarm')\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Seaborn/#multi-plot-grids","title":"Multi-plot Grids","text":"<p>For creating multiple plots in a grid.</p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Seaborn/#facet-grid-facetgrid","title":"Facet Grid (<code>FacetGrid</code>)","text":"<p>Syntax: <pre><code>g = sns.FacetGrid(data, col, row, hue)\ng.map(plot_type, x, y)\n</code></pre></p> <p>Example: <pre><code>g = sns.FacetGrid(tips, col='time', row='smoker', hue='sex')\ng.map(sns.scatterplot, 'total_bill', 'tip')\ng.add_legend()\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Seaborn/#pair-grid-pairgrid","title":"Pair Grid (<code>PairGrid</code>)","text":"<p>Syntax: <pre><code>g = sns.PairGrid(data, vars, hue)\ng.map_upper(func)\ng.map_diag(func)\ng.map_lower(func)\n</code></pre></p> <p>Example: <pre><code>g = sns.PairGrid(penguins, vars=['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm'], hue='species')\ng.map_upper(sns.scatterplot)\ng.map_diag(sns.histplot)\ng.map_lower(sns.kdeplot)\ng.add_legend()\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Seaborn/#styling-and-themes","title":"Styling and Themes","text":"<p>Seaborn provides several built-in themes.</p> <p>Syntax: <pre><code>sns.set_style('darkgrid'|'whitegrid'|'dark'|'white'|'ticks')\nsns.set_context('paper'|'notebook'|'talk'|'poster')\nsns.set_palette('palette_name')\n</code></pre></p> <p>Example: <pre><code>sns.set_style('whitegrid')\nsns.set_palette('husl')\nsns.set_context('talk')\n\nplt.figure(figsize=(8, 6))\nsns.barplot(x='day', y='total_bill', data=tips)\nplt.title('Styled Bar Plot')\nplt.show()\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Data%20Visualization/Seaborn/#common-seaborn-functions","title":"Common Seaborn Functions","text":"Function Description <code>sns.load_dataset()</code> Load example datasets <code>sns.set()</code> Set aesthetic parameters <code>sns.despine()</code> Remove spines from plot <code>sns.color_palette()</code> Return a list of colors <code>sns.palplot()</code> Plot a color palette <code>sns.axes_style()</code> Return the parameters of the style <p>Seaborn works best with Pandas DataFrames, where variables are stored in columns. Most functions accept <code>x</code>, <code>y</code>, and <code>hue</code> parameters to specify variables from the DataFrame. </p>"},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/","title":"Preprocessing Pipeline for Transformer Models with Attention Mechanisms","text":""},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/#1-text-tokenization","title":"1. Text Tokenization","text":""},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/#concept","title":"Concept","text":"<p>Convert raw text into numerical tokens that the model can process.</p>"},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/#steps","title":"Steps","text":"<ol> <li>Split text into words/subwords</li> <li>Map tokens to vocabulary indices</li> <li>Handle special tokens ([CLS], [SEP], [PAD])</li> </ol>"},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/#example","title":"Example","text":"<pre><code>from transformers import BertTokenizer\n\ntokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n\ntext = \"The cat sat on the mat.\"\ntokens = tokenizer.tokenize(text)\ntoken_ids = tokenizer.convert_tokens_to_ids(tokens)\n\nprint(\"Original:\", text)\nprint(\"Tokens:\", tokens)\nprint(\"Token IDs:\", token_ids)\n</code></pre> <p>Output: <pre><code>Original: The cat sat on the mat.\nTokens: ['the', 'cat', 'sat', 'on', 'the', 'mat', '.']\nToken IDs: [1996, 4937, 2038, 2006, 1996, 4812, 1012]\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/#2-sequence-paddingtruncation","title":"2. Sequence Padding/Truncation","text":""},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/#concept_1","title":"Concept","text":"<p>Ensure all sequences have uniform length for batch processing.</p>"},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/#steps_1","title":"Steps","text":"<ol> <li>Pad shorter sequences with [PAD] tokens</li> <li>Truncate longer sequences to max length</li> </ol>"},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/#example_1","title":"Example","text":"<pre><code>max_length = 10\npadded_ids = token_ids + [tokenizer.pad_token_id] * (max_length - len(token_ids))\nattention_mask = [1] * len(token_ids) + [0] * (max_length - len(token_ids))\n\nprint(\"Padded IDs:\", padded_ids)\nprint(\"Attention Mask:\", attention_mask)\n</code></pre> <p>Output: <pre><code>Padded IDs: [1996, 4937, 2038, 2006, 1996, 4812, 1012, 0, 0, 0]\nAttention Mask: [1, 1, 1, 1, 1, 1, 1, 0, 0, 0]\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/#visualization","title":"Visualization","text":"<pre><code>graph LR\n    A[\"Before Padding&lt;br/&gt;[1996, 4937, 2038, 2006, 1996, 4812, 1012]\"] --&gt;|Padding to length 10| B[\"After Padding&lt;br/&gt;[1996, 4937, 2038, 2006, 1996, 4812, 1012, 0, 0, 0]\"]\n    B --&gt; C[\"Attention Mask&lt;br/&gt;[1, 1, 1, 1, 1, 1, 1, 0, 0, 0]\"]\n\n    classDef data fill:#f9ffff,stroke:#333,stroke-width:1px;\n    class A,B,C data;\n    style A fill:#0000aa,stroke:#0066cc\n    style B fill:#0000ee,stroke:#009900\n    style C fill:#ff0000,stroke:#cc0000</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/#3-positional-encoding","title":"3. Positional Encoding","text":""},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/#concept_2","title":"Concept","text":"<p>Add information about token positions since Transformers don't have inherent sequence awareness.</p>"},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/#formula","title":"Formula","text":"<pre><code>PE(pos,2i) = sin(pos/10000^(2i/d_model))\nPE(pos,2i+1) = cos(pos/10000^(2i/d_model))\n</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/#pytorch-implementation","title":"PyTorch Implementation","text":"<p><pre><code>import torch\nimport math\n\ndef positional_encoding(max_len, d_model):\n    position = torch.arange(max_len).unsqueeze(1)\n    div_term = torch.exp(torch.arange(0, d_model, 2) * (-math.log(10000.0) / d_model)\n    pe = torch.zeros(max_len, d_model)\n    pe[:, 0::2] = torch.sin(position * div_term)\n    pe[:, 1::2] = torch.cos(position * div_term)\n    return pe\n\nd_model = 512\npe = positional_encoding(max_length, d_model)\nprint(\"Positional Encoding Shape:\", pe.shape)\n</code></pre> Example: <pre><code>Token Embeddings: [E1, E2, E3, ..., En]\nPositional Encodings: [PE1, PE2, PE3, ..., PEn]\nFinal Input: [E1+PE1, E2+PE2, E3+PE3, ..., En+PEn]\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/#visualization_1","title":"Visualization","text":"<pre><code>graph TD\n    A[\"Token Embeddings&lt;br/&gt;[E\u2081, E\u2082, E\u2083, ..., E\u2099]\"] --&gt; C[\"Final Input&lt;br/&gt;[E\u2081+PE\u2081, E\u2082+PE\u2082, E\u2083+PE\u2083, ..., E\u2099+PE\u2099]\"]\n    B[\"Positional Encodings&lt;br/&gt;[PE\u2081, PE\u2082, PE\u2083, ..., PE\u2099]\"] --&gt; C\n\n    classDef embeddings fill:#e60,stroke:#0066cc,stroke-width:2px\n    classDef positional fill:#e60,stroke:#f1c232,stroke-width:2px\n    classDef final fill:#e60,stroke:#82b366,stroke-width:2px\n\n    class A embeddings\n    class B positional\n    class C final\n\n    style A text-align:left\n    style B text-align:left\n    style C text-align:left</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/#4-attention-mask-creation","title":"4. Attention Mask Creation","text":""},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/#concept_3","title":"Concept","text":"<p>Tell the model which tokens to attend to (1=real token, 0=padding).</p>"},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/#example_2","title":"Example","text":"<pre><code>import torch\n\nattention_mask = torch.tensor([attention_mask])  # From Step 2\nprint(\"Attention Mask Tensor:\")\nprint(attention_mask)\n</code></pre> <p>Output: <pre><code>tensor([[1, 1, 1, 1, 1, 1, 1, 0, 0, 0]])\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/#visualization_2","title":"Visualization","text":"<pre><code>graph LR\n    A[\"Tokens:&lt;/br&gt;[The, cat, sat, on, the, mat, ., [PAD], [PAD], [PAD]]\"] --&gt; B\n    B[\"Mask:&lt;/br&gt;[1,   1,   1,   1,   1,   1,  1,   0,     0,     0]\"]</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/#5-segment-embeddings-for-bert-style-models","title":"5. Segment Embeddings (for BERT-style models)","text":""},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/#concept_4","title":"Concept","text":"<p>Distinguish between multiple sequences (e.g., question/answer pairs).</p>"},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/#example_3","title":"Example","text":"<pre><code>segment_ids = [0] * max_length  # Single sequence\nsegment_ids = torch.tensor([segment_ids])\nprint(\"Segment IDs:\", segment_ids)\n</code></pre> <p>Output: <pre><code>tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/#6-final-input-preparation","title":"6. Final Input Preparation","text":"<p>Combine all components into model-ready tensors:</p> <pre><code>inputs = {\n    'input_ids': torch.tensor([padded_ids]),\n    'attention_mask': attention_mask,\n    'token_type_ids': segment_ids\n}\n</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/#7-complete-pipeline-with-pytorch","title":"7. Complete Pipeline with PyTorch","text":"<pre><code>from transformers import BertTokenizer\nimport torch\n\ntokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n\ndef preprocess(text, max_length=10):\n    # Tokenization\n    encoding = tokenizer(\n        text,\n        max_length=max_length,\n        padding='max_length',\n        truncation=True,\n        return_tensors='pt'\n    )\n\n    # Add positional encoding (usually handled internally)\n    return {\n        'input_ids': encoding['input_ids'],\n        'attention_mask': encoding['attention_mask'],\n        'token_type_ids': encoding['token_type_ids']\n    }\n\n# Example usage\ninputs = preprocess(\"The cat sat on the mat.\")\nprint(\"Processed Inputs:\")\nprint(inputs)\n</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/#8-attention-mechanism-implementation","title":"8. Attention Mechanism Implementation","text":""},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/#scaled-dot-product-attention","title":"Scaled Dot-Product Attention","text":"<pre><code>def scaled_dot_product_attention(Q, K, V, mask=None):\n    d_k = Q.size(-1)\n    scores = torch.matmul(Q, K.transpose(-2, -1)) / torch.sqrt(torch.tensor(d_k))\n\n    if mask is not None:\n        scores = scores.masked_fill(mask == 0, -1e9)\n\n    attention = torch.softmax(scores, dim=-1)\n    output = torch.matmul(attention, V)\n    return output\n\n# Example usage\nd_model = 512\nseq_len = 10\nQ = torch.randn(1, 8, seq_len, d_model//8)  # (batch, heads, seq_len, head_dim)\nK = torch.randn(1, 8, seq_len, d_model//8)\nV = torch.randn(1, 8, seq_len, d_model//8)\n\nattention_output = scaled_dot_product_attention(Q, K, V)\nprint(\"Attention Output Shape:\", attention_output.shape)\n</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/#9-complete-transformer-block","title":"9. Complete Transformer Block","text":"<pre><code>class TransformerBlock(nn.Module):\n    def __init__(self, d_model, n_heads):\n        super().__init__()\n        self.attention = nn.MultiheadAttention(d_model, n_heads)\n        self.norm1 = nn.LayerNorm(d_model)\n        self.ff = nn.Sequential(\n            nn.Linear(d_model, 4*d_model),\n            nn.ReLU(),\n            nn.Linear(4*d_model, d_model)\n        self.norm2 = nn.LayerNorm(d_model)\n\n    def forward(self, x, mask):\n        attn_output, _ = self.attention(x, x, x, key_padding_mask=mask)\n        x = self.norm1(x + attn_output)\n        ff_output = self.ff(x)\n        return self.norm2(x + ff_output)\n</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/Attention%20Mechanisms/#visual-summary-of-full-pipeline","title":"Visual Summary of Full Pipeline","text":"<p><pre><code>graph TD\n    A[Raw Text] --&gt; B[Tokenization]\n    B --&gt; C[Token IDs + Special Tokens]\n    C --&gt; D[Padding/Truncation]\n    D --&gt; E[Input IDs + Attention Mask + Segment IDs]\n    E --&gt; F[Token Embeddings + Positional Encoding]\n    F --&gt; G[Transformer Encoder Layers]\n    G --&gt; H[Multi-Head Attention]\n    H --&gt; I[Output Representations]</code></pre> This complete pipeline shows how text gets transformed into the numerical representations that Transformer models use to compute attention and make predictions.</p>"},{"location":"Learning_resources/Data%20Science/NLP/Feature%20Engineering/","title":"Complete Guide to Intermediate NLP: Feature Engineering","text":"<p>This tutorial covers essential feature engineering techniques for NLP, including Bag-of-Words (BoW), TF-IDF, and word embeddings (Word2Vec, GloVe, FastText) with Python implementations.</p>"},{"location":"Learning_resources/Data%20Science/NLP/Feature%20Engineering/#1-bag-of-words-bow","title":"1. Bag-of-Words (BoW)","text":""},{"location":"Learning_resources/Data%20Science/NLP/Feature%20Engineering/#what-is-bow","title":"What is BoW?","text":"<ul> <li>Represents text as a vector of word counts</li> <li>Ignores word order but captures frequency</li> <li>Creates a vocabulary from all unique words in corpus</li> </ul>"},{"location":"Learning_resources/Data%20Science/NLP/Feature%20Engineering/#implementation-with-scikit-learn","title":"Implementation with Scikit-learn","text":"<pre><code>from sklearn.feature_extraction.text import CountVectorizer\n\ncorpus = [\n    \"This is the first document.\",\n    \"This document is the second document.\",\n    \"And this is the third one.\",\n    \"Is this the first document?\"\n]\n\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(corpus)\n\nprint(\"Vocabulary:\", vectorizer.get_feature_names_out())\nprint(\"BoW Matrix:\\n\", X.toarray())\n</code></pre> <p>Output: <pre><code>Vocabulary: ['and' 'document' 'first' 'is' 'one' 'second' 'the' 'third' 'this']\nBoW Matrix:\n [[0 1 1 1 0 0 1 0 1]\n [0 2 0 1 0 1 1 0 1]\n [1 0 0 1 1 0 1 1 1]\n [0 1 1 1 0 0 1 0 1]]\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/NLP/Feature%20Engineering/#key-parameters","title":"Key Parameters","text":"<ul> <li><code>max_features</code>: Limit vocabulary size</li> <li><code>ngram_range</code>: Include word combinations (e.g., (1,2) for unigrams+bigrams)</li> <li><code>stop_words</code>: Remove common words</li> </ul>"},{"location":"Learning_resources/Data%20Science/NLP/Feature%20Engineering/#2-tf-idf-term-frequency-inverse-document-frequency","title":"2. TF-IDF (Term Frequency-Inverse Document Frequency)","text":""},{"location":"Learning_resources/Data%20Science/NLP/Feature%20Engineering/#what-is-tf-idf","title":"What is TF-IDF?","text":"<ul> <li>Measures word importance in a document relative to corpus</li> <li>Formula: <code>TF-IDF = TF(t,d) \u00d7 IDF(t)</code></li> <li>TF: Term frequency in document</li> <li>IDF: log(total docs / docs containing term)</li> </ul>"},{"location":"Learning_resources/Data%20Science/NLP/Feature%20Engineering/#implementation","title":"Implementation","text":"<pre><code>from sklearn.feature_extraction.text import TfidfVectorizer\n\ntfidf = TfidfVectorizer()\nX_tfidf = tfidf.fit_transform(corpus)\n\nprint(\"TF-IDF Matrix:\\n\", X_tfidf.toarray().round(2))\n</code></pre> <p>Output: <pre><code>TF-IDF Matrix:\n [[0.   0.47 0.58 0.38 0.   0.   0.38 0.   0.38]\n [0.   0.69 0.   0.28 0.   0.54 0.28 0.   0.28]\n [0.51 0.   0.   0.27 0.51 0.   0.27 0.51 0.27]\n [0.   0.47 0.58 0.38 0.   0.   0.38 0.   0.38]]\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/NLP/Feature%20Engineering/#when-to-use-tf-idf-vs-bow","title":"When to Use TF-IDF vs BoW?","text":"<ul> <li>TF-IDF: When word importance matters (search, recommendations)</li> <li>BoW: When simple frequency is sufficient (quick prototypes)</li> </ul>"},{"location":"Learning_resources/Data%20Science/NLP/Feature%20Engineering/#3-word-embeddings","title":"3. Word Embeddings","text":""},{"location":"Learning_resources/Data%20Science/NLP/Feature%20Engineering/#why-word-embeddings","title":"Why Word Embeddings?","text":"<ul> <li>BoW/TF-IDF lose semantic meaning</li> <li>Embeddings capture word relationships in dense vectors</li> <li>Similar words have similar vector representations</li> </ul>"},{"location":"Learning_resources/Data%20Science/NLP/Feature%20Engineering/#types-of-word-embeddings","title":"Types of Word Embeddings","text":"Model Description Key Feature Word2Vec Predicts words from context (CBOW) or context from words (Skip-gram) Efficient, good for large corpora GloVe Uses global word co-occurrence statistics Captures global patterns FastText Extends Word2Vec with subword information Handles rare/unknown words"},{"location":"Learning_resources/Data%20Science/NLP/Feature%20Engineering/#4-word2vec-implementation","title":"4. Word2Vec Implementation","text":""},{"location":"Learning_resources/Data%20Science/NLP/Feature%20Engineering/#training-your-own-model","title":"Training Your Own Model","text":"<pre><code>from gensim.models import Word2Vec\nfrom nltk.tokenize import word_tokenize\nimport nltk\nnltk.download('punkt')\n\nsentences = [\n    \"Natural language processing is fascinating.\",\n    \"Word embeddings capture semantic meaning.\",\n    \"Deep learning models learn word representations.\"\n]\n\n# Tokenize sentences\ntokenized = [word_tokenize(sent.lower()) for sent in sentences]\n\n# Train Word2Vec\nmodel = Word2Vec(\n    sentences=tokenized,\n    vector_size=100,  # Dimensionality of embeddings\n    window=5,        # Context window size\n    min_count=1,     # Ignore words with freq &lt; this\n    sg=1             # 1 for skip-gram, 0 for CBOW\n)\n\n# Get word vector\nprint(\"Vector for 'fascinating':\", model.wv['fascinating'][:5])  # First 5 dimensions\n\n# Find similar words\nprint(\"Similar to 'language':\", model.wv.most_similar('language', topn=3))\n</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/Feature%20Engineering/#using-pre-trained-vectors","title":"Using Pre-trained Vectors","text":"<pre><code>import gensim.downloader as api\n\n# Download pre-trained model\nw2v_model = api.load('word2vec-google-news-300')\n\n# Example operations\nprint(\"Similar to 'king':\", w2v_model.most_similar('king', topn=3))\nprint(\"Vector math: king - man + woman \u2248\", w2v_model.most_similar(positive=['woman', 'king'], negative=['man'], topn=1))\n</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/Feature%20Engineering/#5-glove-implementation","title":"5. GloVe Implementation","text":"<pre><code># Download pre-trained GloVe\nglove_model = api.load(\"glove-wiki-gigaword-300\")\n\n# Similar words\nprint(\"Similar to 'Paris':\", glove_model.most_similar('Paris', topn=3))\n</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/Feature%20Engineering/#6-fasttext-implementation","title":"6. FastText Implementation","text":"<pre><code># Download pre-trained FastText\nfasttext_model = api.load('fasttext-wiki-news-subwords-300')\n\n# Handles out-of-vocabulary words via subwords\nprint(\"Vector for 'unhappiness':\", fasttext_model['unhappiness'][:5])\nprint(\"Similar to 'sadness':\", fasttext_model.most_similar('sadness', topn=3))\n</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/Feature%20Engineering/#7-choosing-the-right-embedding","title":"7. Choosing the Right Embedding","text":"Scenario Recommended Embedding Small dataset Pre-trained Word2Vec/GloVe Many rare words FastText Domain-specific text Train your own Word2Vec Multilingual tasks FastText"},{"location":"Learning_resources/Data%20Science/NLP/Feature%20Engineering/#8-practical-tips","title":"8. Practical Tips","text":"<ol> <li>Dimensionality: Typically 100-300 dimensions</li> <li>Context Window: </li> <li>Smaller (2-5): Syntactic tasks</li> <li>Larger (10+): Semantic tasks</li> <li>Preprocessing: Always clean text before training embeddings</li> <li>Evaluation: Use analogies test set (e.g., <code>king - man + woman \u2248 queen</code>)</li> </ol>"},{"location":"Learning_resources/Data%20Science/NLP/Feature%20Engineering/#next-steps","title":"Next Steps","text":"<p>\u27a1\ufe0f Try these techniques on your own text data \u27a1\ufe0f Explore document embeddings (Doc2Vec, Sentence-BERT) \u27a1\ufe0f Combine with machine learning models (LSTMs, Transformers)  </p>"},{"location":"Learning_resources/Data%20Science/NLP/Introduction/","title":"Complete NLP Tutorial: Introduction to NLP &amp; Text Preprocessing","text":"<p>This tutorial covers Natural Language Processing (NLP) fundamentals and text preprocessing techniques with Python code examples.  </p>"},{"location":"Learning_resources/Data%20Science/NLP/Introduction/#1-what-is-nlp","title":"1. What is NLP?","text":"<p>Natural Language Processing (NLP) is a branch of AI that enables computers to understand, interpret, and generate human language.  </p>"},{"location":"Learning_resources/Data%20Science/NLP/Introduction/#key-applications","title":"Key Applications","text":"Application Description Example Chatbots AI conversational agents ChatGPT, Google Bard Machine Translation Text translation between languages Google Translate Sentiment Analysis Detecting emotions in text Twitter sentiment analysis Named Entity Recognition (NER) Identifying names, places, dates Extracting \"Apple\" as a company Text Summarization Condensing long documents News article summarization"},{"location":"Learning_resources/Data%20Science/NLP/Introduction/#2-text-preprocessing","title":"2. Text Preprocessing","text":"<p>Raw text data must be cleaned and normalized before NLP tasks.  </p>"},{"location":"Learning_resources/Data%20Science/NLP/Introduction/#key-steps-in-text-preprocessing","title":"Key Steps in Text Preprocessing","text":"<ol> <li>Tokenization </li> <li>Stemming &amp; Lemmatization </li> <li>Stopword Removal </li> <li>Regex Cleaning </li> </ol>"},{"location":"Learning_resources/Data%20Science/NLP/Introduction/#3-tokenization","title":"3. Tokenization","text":"<p>Splitting text into words, sentences, or subwords.  </p>"},{"location":"Learning_resources/Data%20Science/NLP/Introduction/#methods","title":"Methods","text":"Method Library Use Case Word Tokenization <code>nltk.word_tokenize()</code> Splitting sentences into words Sentence Tokenization <code>nltk.sent_tokenize()</code> Splitting paragraphs into sentences Subword Tokenization Hugging Face <code>Tokenizer</code> Handling rare words (e.g., \"unhappiness\" \u2192 \"un\", \"happiness\")"},{"location":"Learning_resources/Data%20Science/NLP/Introduction/#example-word-sentence-tokenization","title":"Example: Word &amp; Sentence Tokenization","text":"<pre><code>import nltk\nnltk.download('punkt')\n\ntext = \"NLP is amazing! It helps computers understand language.\"\n\n# Word Tokenization\nwords = nltk.word_tokenize(text)\nprint(\"Word Tokens:\", words)  \n# Output: ['NLP', 'is', 'amazing', '!', 'It', 'helps', 'computers', 'understand', 'language', '.']\n\n# Sentence Tokenization\nsentences = nltk.sent_tokenize(text)\nprint(\"Sentence Tokens:\", sentences)  \n# Output: ['NLP is amazing!', 'It helps computers understand language.']\n</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/Introduction/#4-stemming-vs-lemmatization","title":"4. Stemming vs. Lemmatization","text":"<p>Both reduce words to their base form, but lemmatization is more accurate.  </p> Method Example (Input \u2192 Output) Library Stemming \"running\" \u2192 \"run\" <code>PorterStemmer</code>, <code>SnowballStemmer</code> Lemmatization \"better\" \u2192 \"good\" <code>WordNetLemmatizer</code> (requires POS tag)"},{"location":"Learning_resources/Data%20Science/NLP/Introduction/#example-stemming-lemmatization","title":"Example: Stemming &amp; Lemmatization","text":"<pre><code>from nltk.stem import PorterStemmer, WordNetLemmatizer\nnltk.download('wordnet')\n\ntext = \"running runs ran better\"\n\n# Stemming\nstemmer = PorterStemmer()\nstemmed = [stemmer.stem(word) for word in text.split()]\nprint(\"Stemmed:\", stemmed)  \n# Output: ['run', 'run', 'ran', 'better']\n\n# Lemmatization\nlemmatizer = WordNetLemmatizer()\nlemmatized = [lemmatizer.lemmatize(word, pos='v') for word in text.split()]  # 'v' for verb\nprint(\"Lemmatized:\", lemmatized)  \n# Output: ['run', 'run', 'run', 'better']\n</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/Introduction/#5-stopword-removal","title":"5. Stopword Removal","text":"<p>Stopwords (e.g., \"the\", \"is\", \"and\") add noise and are often removed.  </p>"},{"location":"Learning_resources/Data%20Science/NLP/Introduction/#example-removing-stopwords","title":"Example: Removing Stopwords","text":"<pre><code>from nltk.corpus import stopwords\nnltk.download('stopwords')\n\ntext = \"This is an example sentence showing off stopword filtration.\"\ntokens = word_tokenize(text.lower())\n\nstop_words = set(stopwords.words('english'))\nfiltered = [word for word in tokens if word not in stop_words and word.isalpha()]\n\nprint(\"Filtered:\", filtered)  \n# Output: ['example', 'sentence', 'showing', 'stopword', 'filtration']\n</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/Introduction/#6-regex-cleaning","title":"6. Regex Cleaning","text":"<p>Removing unwanted characters (URLs, emails, punctuation).  </p>"},{"location":"Learning_resources/Data%20Science/NLP/Introduction/#example-cleaning-text-with-regex","title":"Example: Cleaning Text with Regex","text":"<pre><code>import re\n\ntext = \"Check out https://example.com! Email me at user@email.com.\"\n\n# Remove URLs\ncleaned = re.sub(r'http\\S+|www\\S+|https\\S+', '', text, flags=re.MULTILINE)\n\n# Remove emails\ncleaned = re.sub(r'\\S+@\\S+', '', cleaned)\n\n# Remove punctuation\ncleaned = re.sub(r'[^\\w\\s]', '', cleaned)\n\nprint(\"Cleaned Text:\", cleaned)  \n# Output: \"Check out  Email me at \"\n</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/Introduction/#7-full-text-preprocessing-pipeline","title":"7. Full Text Preprocessing Pipeline","text":"<p>Combining all steps for clean text:  </p> <pre><code>def preprocess_text(text):\n    # Lowercase\n    text = text.lower()\n\n    # Remove URLs, emails\n    text = re.sub(r'http\\S+|www\\S+|https\\S+|\\S+@\\S+', '', text)\n\n    # Remove punctuation\n    text = re.sub(r'[^\\w\\s]', '', text)\n\n    # Tokenize\n    tokens = word_tokenize(text)\n\n    # Remove stopwords\n    stop_words = set(stopwords.words('english'))\n    tokens = [word for word in tokens if word not in stop_words]\n\n    # Lemmatize\n    lemmatizer = WordNetLemmatizer()\n    tokens = [lemmatizer.lemmatize(word) for word in tokens]\n\n    return \" \".join(tokens)\n\ntext = \"NLP is awesome! Check https://nlp.org for more info.\"\nprint(\"Processed:\", preprocess_text(text))  \n# Output: \"nlp awesome check info\"\n</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/Introduction/#8-libraries-comparison","title":"8. Libraries Comparison","text":"Task NLTK spaCy TextBlob Tokenization \u2705 \u2705 (faster) \u2705 Lemmatization \u2705 (needs POS) \u2705 (automatic POS) \u2705 Stopwords \u2705 \u2705 \u2705 Sentiment Analysis \u274c \u274c \u2705"},{"location":"Learning_resources/Data%20Science/NLP/Introduction/#example-spacy-for-faster-processing","title":"Example: spaCy for Faster Processing","text":"<pre><code>import spacy\nnlp = spacy.load(\"en_core_web_sm\")\n\ntext = \"Apple is looking at buying U.K. startup for $1 billion.\"\ndoc = nlp(text)\n\n# Extract tokens, lemmas, and POS tags\nfor token in doc:\n    print(token.text, token.lemma_, token.pos_)\n</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/Introduction/#summary","title":"Summary","text":"<p>\u2705 NLP enables machines to work with human language. \u2705 Text Preprocessing includes tokenization, lemmatization, stopword removal, and regex cleaning. \u2705 NLTK is great for learning, spaCy for production, and TextBlob for quick sentiment analysis.  </p> <p>Next Steps: \u27a1\ufe0f Try these techniques on real datasets (e.g., Twitter data). \u27a1\ufe0f Explore feature extraction (TF-IDF, Word2Vec).  </p> <p>Would you like a tutorial on Feature Engineering for NLP next? \ud83d\ude80</p>"},{"location":"Learning_resources/Data%20Science/NLP/NLP%20with%20Deep%20Learning/","title":"Deep Learning for NLP: A Comprehensive Tutorial","text":""},{"location":"Learning_resources/Data%20Science/NLP/NLP%20with%20Deep%20Learning/#introduction-to-deep-learning-for-nlp","title":"Introduction to Deep Learning for NLP","text":"<p>Deep Learning has revolutionized NLP by enabling models to:</p> <pre><code>- Learn complex patterns in text\n- Handle variable-length sequences\n- Capture contextual meaning better than traditional methods\n</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/NLP%20with%20Deep%20Learning/#table-of-contents","title":"Table of Contents","text":"<ol> <li>RNNs &amp; LSTMs for Text Classification</li> <li>Seq2Seq Models with Attention</li> <li>Transformer Implementation</li> <li>Fine-Tuning Pretrained Models (BERT)</li> </ol>"},{"location":"Learning_resources/Data%20Science/NLP/NLP%20with%20Deep%20Learning/#1-rnns-lstms-for-text-classification","title":"1. RNNs &amp; LSTMs for Text Classification","text":""},{"location":"Learning_resources/Data%20Science/NLP/NLP%20with%20Deep%20Learning/#concept","title":"Concept","text":"<p>RNNs process sequential data by maintaining hidden states between time steps. LSTMs improve upon RNNs with gating mechanisms to better capture long-term dependencies.</p>"},{"location":"Learning_resources/Data%20Science/NLP/NLP%20with%20Deep%20Learning/#pytorch-implementation","title":"PyTorch Implementation","text":"<pre><code>import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torchtext.data import get_tokenizer\nfrom torchtext.vocab import build_vocab_from_iterator\n\n# Sample data\ntexts = [\"I loved the movie\", \"The film was terrible\", \"It was okay\"]\nlabels = [1, 0, 1]  # 1=positive, 0=negative\n\n# Tokenization and vocabulary\ntokenizer = get_tokenizer('basic_english')\nvocab = build_vocab_from_iterator(map(tokenizer, texts), specials=['&lt;unk&gt;'])\nvocab.set_default_index(vocab['&lt;unk&gt;'])\n\n# Numericalize texts\ntext_pipeline = lambda x: vocab(tokenizer(x))\ninput_ids = [text_pipeline(text) for text in texts]\n\n# Padding\npadded_sequences = torch.nn.utils.rnn.pad_sequence(\n    [torch.tensor(seq) for seq in input_ids],\n    batch_first=True,\n    padding_value=0\n)\n\n# LSTM Model\nclass SentimentLSTM(nn.Module):\n    def __init__(self, vocab_size, embed_dim, hidden_dim):\n        super().__init__()\n        self.embedding = nn.Embedding(vocab_size, embed_dim)\n        self.lstm = nn.LSTM(embed_dim, hidden_dim, batch_first=True)\n        self.fc = nn.Linear(hidden_dim, 1)\n\n    def forward(self, x):\n        embedded = self.embedding(x)\n        output, (hidden, cell) = self.lstm(embedded)\n        return torch.sigmoid(self.fc(hidden.squeeze(0)))\n\n# Training setup\nmodel = SentimentLSTM(len(vocab), 100, 256)\ncriterion = nn.BCELoss()\noptimizer = optim.Adam(model.parameters())\n\n# Convert data to tensors\nX = padded_sequences\ny = torch.tensor(labels, dtype=torch.float32).unsqueeze(1)\n\n# Training loop\nfor epoch in range(10):\n    optimizer.zero_grad()\n    outputs = model(X)\n    loss = criterion(outputs, y)\n    loss.backward()\n    optimizer.step()\n    print(f'Epoch {epoch+1}, Loss: {loss.item():.4f}')\n\n# Prediction\ntest_text = \"This was fantastic\"\ntest_seq = torch.tensor([vocab(tokenizer(test_text))]).unsqueeze(0)\nprint(model(test_seq))  # Output close to 1 = positive\n</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/NLP%20with%20Deep%20Learning/#2-seq2seq-with-attention","title":"2. Seq2Seq with Attention","text":""},{"location":"Learning_resources/Data%20Science/NLP/NLP%20with%20Deep%20Learning/#concept_1","title":"Concept","text":"<p>Seq2Seq models use an encoder-decoder architecture with attention mechanisms to focus on relevant parts of the input sequence when generating outputs.</p>"},{"location":"Learning_resources/Data%20Science/NLP/NLP%20with%20Deep%20Learning/#pytorch-implementation_1","title":"PyTorch Implementation","text":"<pre><code>import random\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\n# Sample data (English to French)\npairs = [(\"hello\", \"bonjour\"), (\"thanks\", \"merci\")]\n\n# Character-level vocabularies\nsrc_vocab = {'&lt;pad&gt;': 0, '&lt;sos&gt;': 1, '&lt;eos&gt;': 2}\ntgt_vocab = {'&lt;pad&gt;': 0, '&lt;sos&gt;': 1, '&lt;eos&gt;': 2}\n\nfor eng, fr in pairs:\n    for char in eng:\n        if char not in src_vocab:\n            src_vocab[char] = len(src_vocab)\n    for char in fr:\n        if char not in tgt_vocab:\n            tgt_vocab[char] = len(tgt_vocab)\n\n# Encoder\nclass Encoder(nn.Module):\n    def __init__(self, input_size, hidden_size):\n        super().__init__()\n        self.embedding = nn.Embedding(input_size, hidden_size)\n        self.gru = nn.GRU(hidden_size, hidden_size)\n\n    def forward(self, x):\n        embedded = self.embedding(x)\n        outputs, hidden = self.gru(embedded)\n        return outputs, hidden\n\n# Attention Decoder\nclass Decoder(nn.Module):\n    def __init__(self, output_size, hidden_size):\n        super().__init__()\n        self.embedding = nn.Embedding(output_size, hidden_size)\n        self.gru = nn.GRU(hidden_size, hidden_size)\n        self.attention = nn.Linear(hidden_size * 2, 1)\n        self.out = nn.Linear(hidden_size, output_size)\n\n    def forward(self, x, hidden, encoder_outputs):\n        embedded = self.embedding(x)\n        query = hidden.squeeze(0).unsqueeze(1)\n        attention_weights = F.softmax(\n            self.attention(torch.cat((query.expand(-1, encoder_outputs.size(0), -1), \n                                   encoder_outputs.permute(1, 0, 2)), dim=1),\n            dim=1\n        )\n        context = torch.bmm(attention_weights, encoder_outputs.permute(1, 0, 2))\n        rnn_input = torch.cat((embedded, context.permute(1, 0, 2)), dim=2)\n        output, hidden = self.gru(rnn_input, hidden)\n        output = self.out(output.squeeze(0))\n        return output, hidden, attention_weights\n\n# Training setup\nencoder = Encoder(len(src_vocab), 256)\ndecoder = Decoder(len(tgt_vocab), 256)\noptimizer = optim.Adam(list(encoder.parameters()) + list(decoder.parameters()))\n\n# Training loop (simplified)\nfor epoch in range(100):\n    for src, tgt in pairs:\n        # Convert to tensors\n        src_tensor = torch.tensor([src_vocab[c] for c in src])\n        tgt_tensor = torch.tensor([tgt_vocab[c] for c in tgt])\n\n        # Forward pass\n        encoder_outputs, hidden = encoder(src_tensor)\n        decoder_output, _, _ = decoder(tgt_tensor[:-1], hidden, encoder_outputs)\n\n        # Loss and backprop\n        loss = F.cross_entropy(decoder_output, tgt_tensor[1:])\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/NLP%20with%20Deep%20Learning/#3-transformer-implementation","title":"3. Transformer Implementation","text":""},{"location":"Learning_resources/Data%20Science/NLP/NLP%20with%20Deep%20Learning/#concept_2","title":"Concept","text":"<p>Transformers use self-attention mechanisms to process all words in parallel, making them more efficient than RNNs for long sequences.</p>"},{"location":"Learning_resources/Data%20Science/NLP/NLP%20with%20Deep%20Learning/#pytorch-implementation_2","title":"PyTorch Implementation","text":"<pre><code>import torch\nimport torch.nn as nn\nimport math\n\nclass TransformerModel(nn.Module):\n    def __init__(self, vocab_size, d_model=512, nhead=8, num_layers=6):\n        super().__init__()\n        self.embedding = nn.Embedding(vocab_size, d_model)\n        self.pos_encoder = PositionalEncoding(d_model)\n        encoder_layer = nn.TransformerEncoderLayer(d_model, nhead)\n        self.transformer_encoder = nn.TransformerEncoder(encoder_layer, num_layers)\n        self.fc = nn.Linear(d_model, vocab_size)\n\n    def forward(self, src):\n        src = self.embedding(src) * math.sqrt(d_model)\n        src = self.pos_encoder(src)\n        output = self.transformer_encoder(src)\n        return self.fc(output)\n\nclass PositionalEncoding(nn.Module):\n    def __init__(self, d_model, max_len=5000):\n        super().__init__()\n        pe = torch.zeros(max_len, d_model)\n        position = torch.arange(0, max_len, dtype=torch.float).unsqueeze(1)\n        div_term = torch.exp(torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model))\n        pe[:, 0::2] = torch.sin(position * div_term)\n        pe[:, 1::2] = torch.cos(position * div_term)\n        self.register_buffer('pe', pe)\n\n    def forward(self, x):\n        return x + self.pe[:x.size(1), :]\n\n# Example usage\nmodel = TransformerModel(vocab_size=10000)\nsrc = torch.randint(0, 10000, (10, 32))  # (seq_len, batch_size)\noutput = model(src)\n</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/NLP%20with%20Deep%20Learning/#4-fine-tuning-pretrained-models-bert","title":"4. Fine-Tuning Pretrained Models (BERT)","text":""},{"location":"Learning_resources/Data%20Science/NLP/NLP%20with%20Deep%20Learning/#concept_3","title":"Concept","text":"<p>BERT (Bidirectional Encoder Representations from Transformers) is a powerful pretrained model that can be fine-tuned for specific NLP tasks.</p>"},{"location":"Learning_resources/Data%20Science/NLP/NLP%20with%20Deep%20Learning/#pytorch-implementation_3","title":"PyTorch Implementation","text":"<pre><code>from transformers import BertTokenizer, BertForSequenceClassification\nimport torch\n\n# Load pretrained model and tokenizer\ntokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\nmodel = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=2)\n\n# Sample data\ntexts = [\"This movie was great!\", \"Terrible experience\"]\nlabels = [1, 0]  # 1=positive, 0=negative\n\n# Tokenize inputs\ninputs = tokenizer(texts, padding=True, truncation=True, return_tensors=\"pt\")\nlabels = torch.tensor(labels).unsqueeze(0)\n\n# Forward pass\noutputs = model(**inputs, labels=labels)\nloss = outputs.loss\nlogits = outputs.logits\n\n# Training setup\noptimizer = torch.optim.AdamW(model.parameters(), lr=5e-5)\n\n# Training loop (simplified)\nfor epoch in range(3):\n    model.train()\n    optimizer.zero_grad()\n    outputs = model(**inputs, labels=labels)\n    loss = outputs.loss\n    loss.backward()\n    optimizer.step()\n    print(f'Epoch {epoch+1}, Loss: {loss.item():.4f}')\n\n# Prediction\ntest_text = [\"I enjoyed this film\"]\ntest_inputs = tokenizer(test_text, return_tensors=\"pt\")\nwith torch.no_grad():\n    logits = model(**test_inputs).logits\npredicted_class = torch.argmax(logits).item()\nprint(\"Positive\" if predicted_class == 1 else \"Negative\")\n</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/NLP%20with%20Deep%20Learning/#conclusion","title":"Conclusion","text":"<ul> <li>RNNs/LSTMs: Good starting point for sequence modeling</li> <li>Seq2Seq with Attention: Powerful for translation/summarization</li> <li>Transformers: State-of-the-art architecture (BERT, GPT)</li> <li>Fine-Tuning: Leverage pretrained models for specific tasks</li> </ul> <p>These PyTorch implementations provide a solid foundation for building advanced NLP systems. For production use, consider using HuggingFace's <code>transformers</code> library for optimized implementations.</p>"},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/","title":"Comprehensive Tutorial on Traditional NLP Models","text":""},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Introduction to Traditional NLP Models</li> <li>Text Classification</li> <li>Naive Bayes</li> <li>Logistic Regression</li> <li>Sequence Models</li> <li>Hidden Markov Models (HMM)</li> <li>Conditional Random Fields (CRF)</li> <li>Sentiment Analysis</li> <li>Named Entity Recognition (NER)</li> <li>Topic Modeling (LDA)</li> <li>Conclusion</li> </ol>"},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/#1-introduction-to-traditional-nlp-models","title":"1. Introduction to Traditional NLP Models","text":"<p>Traditional NLP models rely on statistical and probabilistic methods to process and analyze text. Unlike deep learning models, they are: - Interpretable: Easier to understand decision-making. - Less data-hungry: Work well with smaller datasets. - Computationally efficient: Faster training and inference.</p> <p>This tutorial covers key traditional NLP models with definitions, concepts, code, and examples.</p>"},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/#2-text-classification","title":"2. Text Classification","text":"<p>Text classification assigns predefined categories to text documents.</p>"},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/#21-naive-bayes","title":"2.1 Naive Bayes","text":""},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/#concept","title":"Concept","text":"<ul> <li>Based on Bayes\u2019 Theorem with a \"naive\" assumption that features (words) are independent.</li> <li>Types:</li> <li>Multinomial Naive Bayes: Best for text (word counts).</li> <li>Bernoulli Naive Bayes: For binary word occurrences.</li> </ul>"},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/#example-classifying-news-articles","title":"Example: Classifying News Articles","text":"<p><pre><code>from sklearn.datasets import fetch_20newsgroups\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.metrics import classification_report\n\n# Load dataset\ncategories = ['sci.space', 'comp.graphics', 'rec.autos']\nnewsgroups_train = fetch_20newsgroups(subset='train', categories=categories)\nnewsgroups_test = fetch_20newsgroups(subset='test', categories=categories)\n\n# Build pipeline (vectorizer \u2192 classifier)\nmodel = make_pipeline(CountVectorizer(), MultinomialNB())\n\n# Train\nmodel.fit(newsgroups_train.data, newsgroups_train.target)\n\n# Evaluate\npredicted = model.predict(newsgroups_test.data)\nprint(classification_report(newsgroups_test.target, predicted, target_names=newsgroups_test.target_names))\n</code></pre> Output: <pre><code>              precision    recall  f1-score   support\n  comp.graphics       0.97      0.89      0.93       389\n      rec.autos       0.95      0.98      0.96       396\n     sci.space       0.94      0.98      0.96       394\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Works well for small datasets.</li> <li>Fast but may underperform if words are highly correlated.</li> </ul>"},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/#22-logistic-regression","title":"2.2 Logistic Regression","text":""},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/#concept_1","title":"Concept","text":"<ul> <li>A linear model for classification.</li> <li>Uses TF-IDF (Term Frequency-Inverse Document Frequency) for word weighting.</li> <li>Outputs probabilities using the sigmoid function.</li> </ul>"},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/#example-email-spam-detection","title":"Example: Email Spam Detection","text":"<p><pre><code>from sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Example dataset (spam vs. ham)\ntexts = [\"Win a free prize!\", \"Meeting at 3 PM\", \"Urgent: Claim your reward\", \"Project update\"]\nlabels = [1, 0, 1, 0]  # 1=spam, 0=ham\n\n# TF-IDF + Logistic Regression\nmodel = make_pipeline(TfidfVectorizer(), LogisticRegression())\nmodel.fit(texts, labels)\n\n# Predict\nprint(model.predict([\"Free lottery!\"]))  # Output: [1] (spam)\n</code></pre> Output: <code>[1]</code> (classified as spam)</p>"},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/#key-takeaways_1","title":"Key Takeaways","text":"<ul> <li>More flexible than Naive Bayes.</li> <li>Handles correlated features better.</li> </ul>"},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/#3-sequence-models","title":"3. Sequence Models","text":"<p>Used for tasks where word order matters (e.g., POS tagging, NER).</p>"},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/#31-hidden-markov-models-hmm","title":"3.1 Hidden Markov Models (HMM)","text":""},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/#concept_2","title":"Concept","text":"<ul> <li>States (hidden, e.g., POS tags) emit observations (words).</li> <li>Assumes Markov Property: Current state depends only on the previous state.</li> </ul>"},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/#example-pos-tagging","title":"Example: POS Tagging","text":"<p><pre><code>import nltk\nfrom nltk.corpus import brown\nfrom hmmlearn import hmm\nimport numpy as np\n\n# Prepare data (POS tags)\nnltk.download('brown')\ntagged_sents = brown.tagged_sents(tagset='universal')[:1000]  # Simplify tags\n\n# Encode words and tags\ntag_set = set(tag for sent in tagged_sents for (word, tag) in sent)\nword_set = set(word.lower() for sent in tagged_sents for (word, tag) in sent)\ntag2id = {tag: i for i, tag in enumerate(tag_set)}\nword2id = {word: i for i, word in enumerate(word_set)}\n\n# Train HMM\nmodel = hmm.CategoricalHMM(n_components=len(tag_set))\nX = np.array([[word2id.get(word.lower(), -1)] for sent in tagged_sents for (word, tag) in sent])\nlengths = [len(sent) for sent in tagged_sents]\nmodel.fit(X, lengths=lengths)\n\n# Predict POS for a new sentence\ntest_sentence = \"The quick brown fox jumps\".split()\ntest_ids = np.array([[word2id.get(word.lower(), -1)] for word in test_sentence])\npredicted_tags = model.predict(test_ids)\nprint([list(tag2id.keys())[t] for t in predicted_tags])\n</code></pre> Output: <code>['DET', 'ADJ', 'ADJ', 'NOUN', 'VERB']</code></p>"},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/#key-takeaways_2","title":"Key Takeaways","text":"<ul> <li>Good for POS tagging but struggles with long dependencies.</li> </ul>"},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/#32-conditional-random-fields-crf","title":"3.2 Conditional Random Fields (CRF)","text":""},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/#concept_3","title":"Concept","text":"<ul> <li>Discriminative model (unlike HMM, which is generative).</li> <li>Considers entire sequence for predictions (better for NER).</li> </ul>"},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/#example-named-entity-recognition-ner","title":"Example: Named Entity Recognition (NER)","text":"<p><pre><code>from sklearn_crfsuite import CRF\nfrom sklearn_crfsuite.metrics import flat_classification_report\n\n# Example data (IOB format)\ntrain_data = [\n    [(\"Apple\", \"B-ORG\"), (\"Inc.\", \"I-ORG\"), (\"is\", \"O\"), (\"in\", \"O\"), (\"Cupertino\", \"B-LOC\")]\n]\n\n# Feature extraction\ndef word2features(sent, i):\n    word = sent[i][0]\n    features = {\n        'word.lower()': word.lower(),\n        'word[-3:]': word[-3:],\n        'is_capitalized': word[0].isupper(),\n    }\n    return features\n\nX_train = [[word2features(sent, i) for i in range(len(sent))] for sent in train_data]\ny_train = [[tag for (word, tag) in sent] for sent in train_data]\n\n# Train CRF\ncrf = CRF(algorithm='lbfgs')\ncrf.fit(X_train, y_train)\n\n# Predict\ntest_sent = [(\"Microsoft\", \"\"), (\"is\", \"\"), (\"in\", \"\"), (\"Seattle\", \"\")]\nX_test = [word2features(test_sent, i) for i in range(len(test_sent))]\npred_tags = crf.predict_single(X_test)\nprint(pred_tags)  # Output: ['B-ORG', 'O', 'O', 'B-LOC']\n</code></pre> Output: <code>['B-ORG', 'O', 'O', 'B-LOC']</code> (Microsoft=ORG, Seattle=LOC)</p>"},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/#key-takeaways_3","title":"Key Takeaways","text":"<ul> <li>Best for NER (beats HMM).</li> <li>Handles context dependencies better.</li> </ul>"},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/#4-sentiment-analysis","title":"4. Sentiment Analysis","text":"<p>Classifies text as positive, negative, or neutral.</p>"},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/#example-movie-reviews","title":"Example: Movie Reviews","text":"<p><pre><code>from sklearn.datasets import load_files\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\n# Load dataset (e.g., IMDb reviews)\nreviews = load_files('aclImdb')  # Replace with your dataset path\nX_train, X_test, y_train, y_test = train_test_split(reviews.data, reviews.target, test_size=0.2)\n\n# Train model\nmodel = make_pipeline(TfidfVectorizer(), LogisticRegression())\nmodel.fit(X_train, y_train)\n\n# Predict sentiment\nprint(model.predict([\"This movie was terrible!\"])[0])  # Output: 0 (negative)\n</code></pre> Output: <code>0</code> (negative sentiment)</p>"},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/#5-named-entity-recognition-ner","title":"5. Named Entity Recognition (NER)","text":"<p>Identifies entities (e.g., persons, organizations) in text.</p>"},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/#example-spacy-for-ner","title":"Example: SpaCy for NER","text":"<p><pre><code>import spacy\n\nnlp = spacy.load(\"en_core_web_sm\")\ndoc = nlp(\"Apple is looking to buy U.K. startup for $1 billion\")\n\nfor ent in doc.ents:\n    print(ent.text, ent.label_)\n</code></pre> Output: <pre><code>Apple ORG\nU.K. GPE\n$1 billion MONEY\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/#6-topic-modeling-lda","title":"6. Topic Modeling (LDA)","text":"<p>Discovers latent topics in documents.</p>"},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/#example-newsgroup-topics","title":"Example: Newsgroup Topics","text":"<p><pre><code>from sklearn.decomposition import LatentDirichletAllocation\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Vectorize text\nvectorizer = CountVectorizer(max_df=0.95, min_df=2, stop_words='english')\nX = vectorizer.fit_transform(newsgroups_train.data)\n\n# Train LDA\nlda = LatentDirichletAllocation(n_components=3, random_state=42)\nlda.fit(X)\n\n# Display topics\nfor idx, topic in enumerate(lda.components_):\n    print(f\"Topic {idx}:\")\n    print([vectorizer.get_feature_names_out()[i] for i in topic.argsort()[-10:]])\n</code></pre> Output: <pre><code>Topic 0: ['car', 'engine', 'cars', 'dealer', 'ford', 'bmw', 'toyota', 'drive', 'speed', 'wheels']\nTopic 1: ['graphics', 'image', '3d', 'files', 'format', 'jpeg', 'computer', 'software', 'display', 'video']\nTopic 2: ['space', 'nasa', 'earth', 'orbit', 'moon', 'launch', 'shuttle', 'mission', 'solar', 'satellite']\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/NLP/Traditional%20NLP%20models/#7-conclusion","title":"7. Conclusion","text":"<ul> <li>Naive Bayes &amp; Logistic Regression: Good for text classification.</li> <li>HMM &amp; CRF: Best for sequence labeling (POS, NER).</li> <li>Sentiment Analysis: Classifies emotions in text.</li> <li>LDA: Discovers hidden topics.</li> </ul> <p>These models are still relevant for interpretable, efficient NLP tasks! \ud83d\ude80</p>"},{"location":"Learning_resources/Data%20Science/NLP/Transformer%20Models%20And%20BERT/","title":"Transformer Models &amp; BERT: A Comprehensive PyTorch Tutorial","text":"<p>This tutorial provides an in-depth exploration of Transformer models, covering attention mechanisms, BERT/GPT/T5 architectures, and fine-tuning pre-trained models using PyTorch and Hugging Face.</p>"},{"location":"Learning_resources/Data%20Science/NLP/Transformer%20Models%20And%20BERT/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Attention Mechanism &amp; Self-Attention</li> <li>Transformer Architecture</li> <li>BERT Architecture</li> <li>GPT Architecture</li> <li>T5 Architecture</li> <li>Fine-tuning Pre-trained Models with Hugging Face</li> <li>Conclusion</li> </ol>"},{"location":"Learning_resources/Data%20Science/NLP/Transformer%20Models%20And%20BERT/#1-attention-mechanism-self-attention","title":"1. Attention Mechanism &amp; Self-Attention","text":""},{"location":"Learning_resources/Data%20Science/NLP/Transformer%20Models%20And%20BERT/#concept","title":"Concept","text":"<ul> <li>Attention Mechanism: Allows models to focus on relevant parts of input sequences when making predictions.</li> <li>Self-Attention: A variant where input sequences attend to themselves to capture relationships between all positions.</li> </ul>"},{"location":"Learning_resources/Data%20Science/NLP/Transformer%20Models%20And%20BERT/#key-components","title":"Key Components","text":"<ul> <li>Query (Q): What the model is looking for</li> <li>Key (K): What the input contains</li> <li>Value (V): Actual content to be weighted</li> </ul>"},{"location":"Learning_resources/Data%20Science/NLP/Transformer%20Models%20And%20BERT/#pytorch-implementation","title":"PyTorch Implementation","text":"<pre><code>import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nclass SelfAttention(nn.Module):\n    def __init__(self, embed_size, heads):\n        super(SelfAttention, self).__init__()\n        self.embed_size = embed_size\n        self.heads = heads\n        self.head_dim = embed_size // heads\n\n        assert (self.head_dim * heads == embed_size), \"Embed size needs to be divisible by heads\"\n\n        self.values = nn.Linear(self.head_dim, self.head_dim, bias=False)\n        self.keys = nn.Linear(self.head_dim, self.head_dim, bias=False)\n        self.queries = nn.Linear(self.head_dim, self.head_dim, bias=False)\n        self.fc_out = nn.Linear(heads * self.head_dim, embed_size)\n\n    def forward(self, values, keys, query, mask):\n        N = query.shape[0]\n        value_len, key_len, query_len = values.shape[1], keys.shape[1], query.shape[1]\n\n        # Split embedding into self.heads pieces\n        values = values.reshape(N, value_len, self.heads, self.head_dim)\n        keys = keys.reshape(N, key_len, self.heads, self.head_dim)\n        queries = query.reshape(N, query_len, self.heads, self.head_dim)\n\n        energy = torch.einsum(\"nqhd,nkhd-&gt;nhqk\", [queries, keys])\n\n        if mask is not None:\n            energy = energy.masked_fill(mask == 0, float(\"-1e20\"))\n\n        attention = torch.softmax(energy / (self.embed_size ** (1/2)), dim=3)\n\n        out = torch.einsum(\"nhql,nlhd-&gt;nqhd\", [attention, values]).reshape(\n            N, query_len, self.heads * self.head_dim\n        )\n\n        out = self.fc_out(out)\n        return out\n\n# Example usage\nembed_size = 256\nheads = 8\ninput_tensor = torch.randn(1, 10, embed_size)  # (batch, seq_len, embed_size)\nself_attn = SelfAttention(embed_size, heads)\noutput = self_attn(input_tensor, input_tensor, input_tensor, mask=None)\nprint(output.shape)  # torch.Size([1, 10, 256])\n</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/Transformer%20Models%20And%20BERT/#2-transformer-architecture","title":"2. Transformer Architecture","text":""},{"location":"Learning_resources/Data%20Science/NLP/Transformer%20Models%20And%20BERT/#concept_1","title":"Concept","text":"<p>The Transformer model consists of: - Encoder: Processes input sequence - Decoder: Generates output sequence - Multi-Head Attention: Multiple attention heads capture different relationships - Position-wise Feed Forward Networks: Processes each position separately - Residual Connections &amp; Layer Normalization: Helps training deep networks</p>"},{"location":"Learning_resources/Data%20Science/NLP/Transformer%20Models%20And%20BERT/#pytorch-implementation_1","title":"PyTorch Implementation","text":"<pre><code>class TransformerBlock(nn.Module):\n    def __init__(self, embed_size, heads, dropout, forward_expansion):\n        super(TransformerBlock, self).__init__()\n        self.attention = SelfAttention(embed_size, heads)\n        self.norm1 = nn.LayerNorm(embed_size)\n        self.norm2 = nn.LayerNorm(embed_size)\n\n        self.feed_forward = nn.Sequential(\n            nn.Linear(embed_size, forward_expansion * embed_size),\n            nn.ReLU(),\n            nn.Linear(forward_expansion * embed_size, embed_size)\n        )\n\n        self.dropout = nn.Dropout(dropout)\n\n    def forward(self, value, key, query, mask):\n        attention = self.attention(value, key, query, mask)\n        x = self.dropout(self.norm1(attention + query))\n        forward = self.feed_forward(x)\n        out = self.dropout(self.norm2(forward + x))\n        return out\n\nclass Encoder(nn.Module):\n    def __init__(\n        self,\n        src_vocab_size,\n        embed_size,\n        num_layers,\n        heads,\n        device,\n        forward_expansion,\n        dropout,\n        max_length\n    ):\n        super(Encoder, self).__init__()\n        self.embed_size = embed_size\n        self.device = device\n        self.word_embedding = nn.Embedding(src_vocab_size, embed_size)\n        self.position_embedding = nn.Embedding(max_length, embed_size)\n\n        self.layers = nn.ModuleList(\n            [\n                TransformerBlock(\n                    embed_size,\n                    heads,\n                    dropout=dropout,\n                    forward_expansion=forward_expansion\n                )\n                for _ in range(num_layers)\n            ]\n        )\n\n        self.dropout = nn.Dropout(dropout)\n\n    def forward(self, x, mask):\n        N, seq_length = x.shape\n        positions = torch.arange(0, seq_length).expand(N, seq_length).to(self.device)\n\n        out = self.dropout(self.word_embedding(x) + self.position_embedding(positions))\n\n        for layer in self.layers:\n            out = layer(out, out, out, mask)\n\n        return out\n</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/Transformer%20Models%20And%20BERT/#3-bert-architecture","title":"3. BERT Architecture","text":""},{"location":"Learning_resources/Data%20Science/NLP/Transformer%20Models%20And%20BERT/#concept_2","title":"Concept","text":"<ul> <li>Bidirectional Encoder Representations from Transformers</li> <li>Uses masked language modeling (MLM) and next sentence prediction (NSP)</li> <li>Processes all words simultaneously (not sequential like RNNs)</li> </ul>"},{"location":"Learning_resources/Data%20Science/NLP/Transformer%20Models%20And%20BERT/#pytorch-implementation-simplified","title":"PyTorch Implementation (Simplified)","text":"<pre><code>from transformers import BertModel, BertTokenizer\n\n# Load pre-trained BERT\ntokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\nmodel = BertModel.from_pretrained('bert-base-uncased')\n\n# Example usage\ninputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\noutputs = model(**inputs)\n\nlast_hidden_states = outputs.last_hidden_state\npooler_output = outputs.pooler_output\n\nprint(f\"Last hidden states shape: {last_hidden_states.shape}\")  # [1, 7, 768]\nprint(f\"Pooler output shape: {pooler_output.shape}\")  # [1, 768]\n</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/Transformer%20Models%20And%20BERT/#4-gpt-architecture","title":"4. GPT Architecture","text":""},{"location":"Learning_resources/Data%20Science/NLP/Transformer%20Models%20And%20BERT/#concept_3","title":"Concept","text":"<ul> <li>Generative Pre-trained Transformer</li> <li>Uses decoder-only transformer</li> <li>Autoregressive generation (predicts next token given previous ones)</li> </ul>"},{"location":"Learning_resources/Data%20Science/NLP/Transformer%20Models%20And%20BERT/#pytorch-implementation_2","title":"PyTorch Implementation","text":"<pre><code>from transformers import GPT2Model, GPT2Tokenizer\n\ntokenizer = GPT2Tokenizer.from_pretrained('gpt2')\nmodel = GPT2Model.from_pretrained('gpt2')\n\ninputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\noutputs = model(**inputs)\n\nlast_hidden_states = outputs.last_hidden_state\nprint(f\"Hidden states shape: {last_hidden_states.shape}\")  # [1, 7, 768]\n</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/Transformer%20Models%20And%20BERT/#5-t5-architecture","title":"5. T5 Architecture","text":""},{"location":"Learning_resources/Data%20Science/NLP/Transformer%20Models%20And%20BERT/#concept_4","title":"Concept","text":"<ul> <li>Text-to-Text Transfer Transformer</li> <li>All NLP tasks framed as text-to-text problems</li> <li>Uses both encoder and decoder</li> </ul>"},{"location":"Learning_resources/Data%20Science/NLP/Transformer%20Models%20And%20BERT/#pytorch-implementation_3","title":"PyTorch Implementation","text":"<pre><code>from transformers import T5Tokenizer, T5ForConditionalGeneration\n\ntokenizer = T5Tokenizer.from_pretrained('t5-small')\nmodel = T5ForConditionalGeneration.from_pretrained('t5-small')\n\ninput_ids = tokenizer(\n    \"translate English to German: The house is wonderful\", \n    return_tensors=\"pt\"\n).input_ids\n\noutputs = model.generate(input_ids)\nprint(tokenizer.decode(outputs[0], skip_special_tokens=True))\n# Output: \"Das Haus ist wunderbar\"\n</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/Transformer%20Models%20And%20BERT/#6-fine-tuning-pre-trained-models-with-hugging-face","title":"6. Fine-tuning Pre-trained Models with Hugging Face","text":""},{"location":"Learning_resources/Data%20Science/NLP/Transformer%20Models%20And%20BERT/#concept_5","title":"Concept","text":"<p>Fine-tuning adapts pre-trained models to specific tasks by continuing training on domain-specific data.</p>"},{"location":"Learning_resources/Data%20Science/NLP/Transformer%20Models%20And%20BERT/#example-text-classification-with-bert","title":"Example: Text Classification with BERT","text":"<pre><code>from transformers import BertTokenizer, BertForSequenceClassification\nfrom transformers import Trainer, TrainingArguments\nimport torch\nfrom torch.utils.data import Dataset\n\n# Custom dataset\nclass TextDataset(Dataset):\n    def __init__(self, texts, labels, tokenizer, max_len):\n        self.texts = texts\n        self.labels = labels\n        self.tokenizer = tokenizer\n        self.max_len = max_len\n\n    def __len__(self):\n        return len(self.texts)\n\n    def __getitem__(self, idx):\n        text = str(self.texts[idx])\n        label = self.labels[idx]\n\n        encoding = self.tokenizer(\n            text,\n            max_length=self.max_len,\n            padding='max_length',\n            truncation=True,\n            return_tensors='pt'\n        )\n\n        return {\n            'input_ids': encoding['input_ids'].flatten(),\n            'attention_mask': encoding['attention_mask'].flatten(),\n            'labels': torch.tensor(label, dtype=torch.long)\n        }\n\n# Sample data\ntrain_texts = [\"Great movie!\", \"Terrible experience\", \"It was okay\"]\ntrain_labels = [1, 0, 1]  # 1=positive, 0=negative\n\n# Initialize model and tokenizer\ntokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\nmodel = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=2)\n\n# Create dataset\ntrain_dataset = TextDataset(train_texts, train_labels, tokenizer, max_len=128)\n\n# Training arguments\ntraining_args = TrainingArguments(\n    output_dir='./results',\n    num_train_epochs=3,\n    per_device_train_batch_size=16,\n    save_steps=10_000,\n    save_total_limit=2,\n)\n\n# Trainer\ntrainer = Trainer(\n    model=model,\n    args=training_args,\n    train_dataset=train_dataset,\n)\n\n# Fine-tune\ntrainer.train()\n\n# Prediction\ndef predict(text):\n    inputs = tokenizer(text, return_tensors=\"pt\", padding=True, truncation=True)\n    outputs = model(**inputs)\n    probs = torch.softmax(outputs.logits, dim=1)\n    return probs.argmax().item()\n\nprint(predict(\"I loved this film!\"))  # Output: 1 (positive)\n</code></pre>"},{"location":"Learning_resources/Data%20Science/NLP/Transformer%20Models%20And%20BERT/#7-conclusion","title":"7. Conclusion","text":"<ul> <li>Attention Mechanisms: Enable models to focus on relevant input parts</li> <li>Transformer Architectures: Foundation for BERT, GPT, T5</li> <li>Pre-trained Models: Powerful starting points for NLP tasks</li> <li>Fine-tuning: Adapts models to specific domains with minimal data</li> </ul> <p>This tutorial provides the essential knowledge and PyTorch implementations to work with modern Transformer models. For production use, leverage the Hugging Face ecosystem for optimized implementations.</p>"},{"location":"Learning_resources/Data%20Science/NLP/roadmap/","title":"Roadmap to Learn NLP &amp; LLMs (Beginner to Advanced)","text":""},{"location":"Learning_resources/Data%20Science/NLP/roadmap/#phase-1-foundations-beginner","title":"Phase 1: Foundations (Beginner)","text":""},{"location":"Learning_resources/Data%20Science/NLP/roadmap/#1-prerequisites","title":"1. Prerequisites","text":"<ul> <li>Python Programming (Basic to Intermediate)  </li> <li>Data types, loops, functions, OOP  </li> <li>Libraries: NumPy, Pandas, Matplotlib  </li> <li>Mathematics &amp; Statistics </li> <li>Linear Algebra (Vectors, Matrices)  </li> <li>Probability &amp; Statistics (Bayes\u2019 Theorem, Distributions)  </li> <li>Calculus (Derivatives, Gradients)  </li> </ul>"},{"location":"Learning_resources/Data%20Science/NLP/roadmap/#2-introduction-to-nlp","title":"2. Introduction to NLP","text":"<ul> <li>What is NLP? </li> <li>Applications (Chatbots, Translation, Sentiment Analysis)  </li> <li>Text Preprocessing </li> <li>Tokenization, Stemming, Lemmatization  </li> <li>Stopword Removal, Regex Cleaning  </li> <li>Libraries: NLTK, spaCy, TextBlob  </li> </ul> <p>Example: Text Cleaning with Python <pre><code>import nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\n\ntext = \"Natural Language Processing is amazing!\"\ntokens = word_tokenize(text.lower())\nclean_tokens = [word for word in tokens if word.isalpha() and word not in stopwords.words('english')]\nprint(clean_tokens)  # Output: ['natural', 'language', 'processing', 'amazing']\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/NLP/roadmap/#phase-2-intermediate-nlp","title":"Phase 2: Intermediate NLP","text":""},{"location":"Learning_resources/Data%20Science/NLP/roadmap/#3-feature-engineering-for-text","title":"3. Feature Engineering for Text","text":"<ul> <li>Bag-of-Words (BoW) &amp; TF-IDF </li> <li>Word Embeddings </li> <li>Word2Vec (Skip-gram, CBOW)  </li> <li>GloVe, FastText  </li> <li>Library: Gensim, Scikit-learn </li> </ul> <p>Example: TF-IDF with Scikit-learn <pre><code>from sklearn.feature_extraction.text import TfidfVectorizer\n\ncorpus = [\"NLP is fascinating.\", \"I love learning NLP.\"]\nvectorizer = TfidfVectorizer()\nX = vectorizer.fit_transform(corpus)\nprint(vectorizer.get_feature_names_out())\nprint(X.toarray())\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/NLP/roadmap/#4-traditional-nlp-models","title":"4. Traditional NLP Models","text":"<ul> <li>Naive Bayes, Logistic Regression for Text Classification </li> <li>Sequence Models </li> <li>Hidden Markov Models (HMM)  </li> <li>Conditional Random Fields (CRF) for NER  </li> <li>Sentiment Analysis, Named Entity Recognition (NER), Topic Modeling (LDA) </li> </ul> <p>Example: Sentiment Analysis with NLTK <pre><code>from nltk.sentiment import SentimentIntensityAnalyzer\n\nsia = SentimentIntensityAnalyzer()\ntext = \"I love NLP, but it's challenging.\"\nprint(sia.polarity_scores(text))  # Output: {'neg': 0.0, 'neu': 0.5, 'pos': 0.5, 'compound': 0.34}\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/NLP/roadmap/#phase-3-deep-learning-for-nlp-advanced","title":"Phase 3: Deep Learning for NLP (Advanced)","text":""},{"location":"Learning_resources/Data%20Science/NLP/roadmap/#5-neural-networks-for-nlp","title":"5. Neural Networks for NLP","text":"<ul> <li>Recurrent Neural Networks (RNNs) &amp; LSTMs </li> <li>Seq2Seq Models &amp; Attention Mechanism </li> <li>Transformers (Key Concept for LLMs) </li> </ul> <p>Example: LSTM for Text Classification (Keras) <pre><code>from keras.models import Sequential\nfrom keras.layers import Embedding, LSTM, Dense\n\nmodel = Sequential([\n    Embedding(input_dim=10000, output_dim=128),\n    LSTM(64),\n    Dense(1, activation='sigmoid')\n])\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/NLP/roadmap/#6-transformer-models-bert","title":"6. Transformer Models &amp; BERT","text":"<ul> <li>Attention Mechanism &amp; Self-Attention </li> <li>BERT, GPT, T5 Architecture </li> <li>Fine-tuning Pre-trained Models (Hugging Face) </li> </ul> <p>Example: BERT for Text Classification <pre><code>from transformers import BertTokenizer, TFBertForSequenceClassification\nimport tensorflow as tf\n\ntokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\nmodel = TFBertForSequenceClassification.from_pretrained('bert-base-uncased')\n\ninputs = tokenizer(\"NLP is awesome!\", return_tensors=\"tf\")\noutputs = model(inputs)\nprint(outputs.logits)\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/NLP/roadmap/#phase-4-large-language-models-llms","title":"Phase 4: Large Language Models (LLMs)","text":""},{"location":"Learning_resources/Data%20Science/NLP/roadmap/#7-working-with-llms","title":"7. Working with LLMs","text":"<ul> <li>GPT-4, LLaMA, Claude, Mistral </li> <li>Prompt Engineering &amp; Few-shot Learning </li> <li>Retrieval-Augmented Generation (RAG) </li> </ul> <p>Example: GPT-4 with OpenAI API <pre><code>import openai\n\nresponse = openai.ChatCompletion.create(\n    model=\"gpt-4\",\n    messages=[{\"role\": \"user\", \"content\": \"Explain NLP in simple terms.\"}]\n)\nprint(response.choices[0].message.content)\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/NLP/roadmap/#8-fine-tuning-deploying-llms","title":"8. Fine-tuning &amp; Deploying LLMs","text":"<ul> <li>LoRA, QLoRA for Efficient Fine-tuning </li> <li>Deploying LLMs with FastAPI, Gradio </li> <li>LangChain &amp; LlamaIndex for AI Agents </li> </ul> <p>Example: Fine-tuning LLaMA with LoRA <pre><code>from peft import LoraConfig, get_peft_model\nfrom transformers import AutoModelForCausalLM\n\nmodel = AutoModelForCausalLM.from_pretrained(\"meta-llama/Llama-2-7b\")\nlora_config = LoraConfig(task_type=\"CAUSAL_LM\", r=8, lora_alpha=16, lora_dropout=0.1)\nmodel = get_peft_model(model, lora_config)\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/NLP/roadmap/#phase-5-advanced-topics-research","title":"Phase 5: Advanced Topics &amp; Research","text":""},{"location":"Learning_resources/Data%20Science/NLP/roadmap/#9-cutting-edge-nlp-llm-research","title":"9. Cutting-Edge NLP &amp; LLM Research","text":"<ul> <li>Multimodal Models (GPT-4V, LLaVA) </li> <li>Agentic AI (AutoGPT, BabyAGI) </li> <li>Ethics, Bias, and Safety in LLMs </li> </ul>"},{"location":"Learning_resources/Data%20Science/NLP/roadmap/#10-real-world-projects","title":"10. Real-World Projects","text":"<ul> <li>Build a Chatbot (RAG-based) </li> <li>Document Summarization System </li> <li>Custom LLM Fine-tuning for Domain-Specific Tasks </li> </ul>"},{"location":"Learning_resources/Data%20Science/NLP/roadmap/#learning-resources","title":"Learning Resources","text":"Topic Resources Python Basics Python Crash Course (Book), W3Schools NLP Fundamentals NLTK Book, spaCy Course Deep Learning for NLP CS224N (Stanford NLP Course) Transformers &amp; LLMs Hugging Face Course, Andrej Karpathy\u2019s YouTube LLM Deployment LangChain Docs, FastAPI Tutorials"},{"location":"Learning_resources/Data%20Science/NLP/roadmap/#final-tips","title":"Final Tips","text":"<p>\u2705 Hands-on Projects (Kaggle, Hugging Face) \u2705 Read Research Papers (ArXiv, Papers With Code) \u2705 Join NLP Communities (Hugging Face, Reddit NLP)  </p>"},{"location":"Learning_resources/Data%20Science/Statistics/Adv_Hypothesis_testing/","title":"Advanced Hypothesis Testing in Python","text":""},{"location":"Learning_resources/Data%20Science/Statistics/Adv_Hypothesis_testing/#introduction-to-two-sample-tests","title":"Introduction to Two-Sample Tests","text":"<p>Two-sample hypothesis testing allows us to compare statistics across different groups within our data. Let's explore this concept through both theoretical understanding and practical applications.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/Adv_Hypothesis_testing/#business-context-and-real-world-applications","title":"Business Context and Real-World Applications","text":"<p>Consider these practical scenarios where two-sample tests are valuable:</p> <ol> <li> <p>A/B Testing in E-commerce:</p> <ul> <li>Comparing conversion rates between two website designs</li> <li>Analyzing customer spending across different marketing campaigns</li> <li>Evaluating user engagement metrics between mobile and desktop users</li> </ul> </li> <li> <p>HR Analytics:</p> <ul> <li>Comparing salaries between different departments</li> <li>Analyzing performance metrics between remote and office workers</li> <li>Evaluating training program effectiveness</li> </ul> </li> </ol> <p>Let's implement these concepts using Python.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/Adv_Hypothesis_testing/#t-tests-implementation","title":"T-Tests Implementation","text":""},{"location":"Learning_resources/Data%20Science/Statistics/Adv_Hypothesis_testing/#two-sample-independent-t-test","title":"Two-Sample Independent T-Test","text":"<pre><code>import pandas as pd\nimport numpy as np\nfrom scipy.stats import t\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef perform_two_sample_ttest(data, group_column, value_column, group1, group2, alpha=0.05):\n    \"\"\"\n    Performs a two-sample t-test with detailed analysis and visualization.\n\n    Parameters:\n    -----------\n    data : pandas DataFrame\n        The dataset containing the groups and values\n    group_column : str\n        Name of the column containing group labels\n    value_column : str\n        Name of the column containing the values to compare\n    group1, group2 : str\n        Names of the groups to compare\n    alpha : float\n        Significance level\n    \"\"\"\n    # Extract the two groups\n    sample1 = data[data[group_column] == group1][value_column]\n    sample2 = data[data[group_column] == group2][value_column]\n\n    # Calculate basic statistics\n    n1, n2 = len(sample1), len(sample2)\n    mean1, mean2 = sample1.mean(), sample2.mean()\n    var1, var2 = sample1.var(ddof=1), sample2.var(ddof=1)\n\n    # Calculate t-statistic\n    pooled_se = np.sqrt(var1/n1 + var2/n2)\n    t_stat = (mean1 - mean2) / pooled_se\n\n    # Calculate degrees of freedom\n    df = n1 + n2 - 2\n\n    # Calculate p-value (two-tailed test)\n    p_value = 2 * (1 - t.cdf(abs(t_stat), df))\n\n    # Create visualization\n    plt.figure(figsize=(10, 6))\n\n    # Create violin plots\n    sns.violinplot(data=data, x=group_column, y=value_column)\n    plt.title(f'Distribution Comparison: {group1} vs {group2}')\n\n    # Print results\n    results = {\n        'Group 1 Mean': mean1,\n        'Group 2 Mean': mean2,\n        'Mean Difference': mean1 - mean2,\n        'T-statistic': t_stat,\n        'P-value': p_value,\n        'Significant': p_value &lt; alpha\n    }\n\n    return results, plt.gcf()\n\n# Example usage with Stack Overflow data\nstack_overflow = pd.read_csv('stack_overflow_data.csv')\n\nresults, fig = perform_two_sample_ttest(\n    stack_overflow,\n    'age_first_code_cut',\n    'converted_comp',\n    'child',\n    'adult',\n    alpha=0.05\n)\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Statistics/Adv_Hypothesis_testing/#paired-t-test-implementation","title":"Paired T-Test Implementation","text":"<p>Paired t-tests are used when we have matched pairs of observations. Here's a comprehensive implementation:</p> <pre><code>def perform_paired_ttest(data, before_col, after_col, alpha=0.05):\n    \"\"\"\n    Performs a paired t-test with visualization and detailed analysis.\n\n    Parameters:\n    -----------\n    data : pandas DataFrame\n        Dataset containing before and after measurements\n    before_col, after_col : str\n        Column names for before and after measurements\n    alpha : float\n        Significance level\n    \"\"\"\n    # Calculate differences\n    differences = data[after_col] - data[before_col]\n\n    # Basic statistics\n    mean_diff = differences.mean()\n    std_diff = differences.std(ddof=1)\n    n = len(differences)\n\n    # Calculate t-statistic\n    t_stat = mean_diff / (std_diff / np.sqrt(n))\n\n    # Degrees of freedom\n    df = n - 1\n\n    # Calculate p-value (two-tailed)\n    p_value = 2 * (1 - t.cdf(abs(t_stat), df))\n\n    # Create visualizations\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))\n\n    # Before-After plot\n    ax1.scatter(data[before_col], data[after_col])\n    min_val = min(data[before_col].min(), data[after_col].min())\n    max_val = max(data[before_col].max(), data[after_col].max())\n    ax1.plot([min_val, max_val], [min_val, max_val], 'r--')\n    ax1.set_xlabel('Before')\n    ax1.set_ylabel('After')\n    ax1.set_title('Before vs After Measurements')\n\n    # Differences histogram\n    sns.histplot(differences, kde=True, ax=ax2)\n    ax2.axvline(x=0, color='r', linestyle='--')\n    ax2.set_title('Distribution of Differences')\n\n    results = {\n        'Mean Difference': mean_diff,\n        'Standard Deviation of Differences': std_diff,\n        'T-statistic': t_stat,\n        'P-value': p_value,\n        'Significant': p_value &lt; alpha,\n        'Confidence Interval': t.interval(1-alpha, df, \n                                       loc=mean_diff, \n                                       scale=std_diff/np.sqrt(n))\n    }\n\n    return results, fig\n\n# Example with Republican voting data\nrepub_votes = pd.read_csv('republican_votes.csv')\n\nresults, fig = perform_paired_ttest(\n    repub_votes,\n    'repub_percent_08',\n    'repub_percent_12',\n    alpha=0.05\n)\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Statistics/Adv_Hypothesis_testing/#anova-testing","title":"ANOVA Testing","text":"<p>ANOVA (Analysis of Variance) is used when comparing more than two groups. Here's a comprehensive implementation:</p> <pre><code>def perform_anova_analysis(data, group_column, value_column, alpha=0.05):\n    \"\"\"\n    Performs one-way ANOVA with visualization and post-hoc analysis.\n\n    Parameters:\n    -----------\n    data : pandas DataFrame\n        Dataset containing groups and values\n    group_column : str\n        Column name containing group labels\n    value_column : str\n        Column name containing values to compare\n    alpha : float\n        Significance level\n    \"\"\"\n    import pingouin as pg\n\n    # Perform ANOVA\n    anova_results = pg.anova(data=data,\n                            dv=value_column,\n                            between=group_column)\n\n    # Perform pairwise t-tests with Bonferroni correction\n    posthoc = pg.pairwise_tests(data=data,\n                               dv=value_column,\n                               between=group_column,\n                               padjust='bonf')\n\n    # Create visualizations\n    plt.figure(figsize=(12, 6))\n\n    # Box plot\n    sns.boxplot(data=data, x=group_column, y=value_column)\n    plt.xticks(rotation=45)\n    plt.title('Distribution by Group')\n\n    # Add statistical annotations\n    if anova_results['p-unc'].iloc[0] &lt; alpha:\n        plt.text(0.02, 0.98, 'Significant differences detected',\n                transform=plt.gca().transAxes,\n                verticalalignment='top',\n                color='red')\n\n    return {\n        'anova_results': anova_results,\n        'posthoc_tests': posthoc,\n        'plot': plt.gcf()\n    }\n\n# Example with job satisfaction data\nresults = perform_anova_analysis(\n    stack_overflow,\n    'job_sat',\n    'converted_comp',\n    alpha=0.05\n)\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Statistics/Adv_Hypothesis_testing/#statistical-power-analysis","title":"Statistical Power Analysis","text":"<p>Understanding statistical power is crucial for designing effective hypothesis tests:</p> <pre><code>def calculate_power_analysis(data1, data2, alpha=0.05, n_simulations=1000):\n    \"\"\"\n    Performs power analysis through simulation.\n\n    Parameters:\n    -----------\n    data1, data2 : array-like\n        The two groups to compare\n    alpha : float\n        Significance level\n    n_simulations : int\n        Number of simulations to run\n    \"\"\"\n    from scipy import stats\n\n    # Calculate effect size\n    effect_size = (np.mean(data1) - np.mean(data2)) / \\\n                 np.sqrt((np.var(data1) + np.var(data2)) / 2)\n\n    # Simulate tests\n    significant_tests = 0\n\n    for _ in range(n_simulations):\n        # Resample with replacement\n        sample1 = np.random.choice(data1, size=len(data1), replace=True)\n        sample2 = np.random.choice(data2, size=len(data2), replace=True)\n\n        # Perform t-test\n        _, p_value = stats.ttest_ind(sample1, sample2)\n\n        if p_value &lt; alpha:\n            significant_tests += 1\n\n    power = significant_tests / n_simulations\n\n    return {\n        'effect_size': effect_size,\n        'power': power,\n        'n_simulations': n_simulations\n    }\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Statistics/Adv_Hypothesis_testing/#best-practices-and-guidelines","title":"Best Practices and Guidelines","text":"<ol> <li> <p>Choosing the Right Test</p> <ul> <li>Use paired t-tests when observations are naturally paired</li> <li>Use independent t-tests when comparing unrelated groups</li> <li>Use ANOVA when comparing more than two groups</li> <li>Consider non-parametric alternatives when assumptions are violated</li> </ul> </li> <li> <p>Sample Size Considerations</p> <ul> <li>Larger sample sizes increase statistical power</li> <li>Use power analysis to determine required sample size</li> <li>Consider practical significance alongside statistical significance</li> </ul> </li> <li> <p>Assumptions Checking</p> <ul> <li>Normality of distributions</li> <li>Homogeneity of variances</li> <li>Independence of observations</li> </ul> </li> <li> <p>Multiple Testing</p> <ul> <li>Apply appropriate corrections (e.g., Bonferroni) when performing multiple tests</li> <li>Consider family-wise error rate</li> <li>Be cautious of data dredging</li> </ul> </li> <li> <p>Reporting Results</p> <ul> <li>Always report effect sizes alongside p-values</li> <li>Include confidence intervals</li> <li>Provide clear visualizations</li> <li>Document all decisions and assumptions</li> </ul> </li> </ol>"},{"location":"Learning_resources/Data%20Science/Statistics/Adv_Hypothesis_testing/#real-world-applications","title":"Real-World Applications","text":""},{"location":"Learning_resources/Data%20Science/Statistics/Adv_Hypothesis_testing/#e-commerce-example","title":"E-commerce Example","text":"<pre><code># Example: Analyzing customer spending between mobile and desktop users\ndef analyze_platform_spending(data):\n    \"\"\"\n    Analyzes spending patterns between mobile and desktop users.\n    \"\"\"\n    results, fig = perform_two_sample_ttest(\n        data,\n        'platform',\n        'spending',\n        'mobile',\n        'desktop'\n    )\n\n    # Additional business metrics\n    roi_mobile = calculate_roi(data[data['platform'] == 'mobile'])\n    roi_desktop = calculate_roi(data[data['platform'] == 'desktop'])\n\n    return {\n        'statistical_results': results,\n        'visualization': fig,\n        'business_metrics': {\n            'mobile_roi': roi_mobile,\n            'desktop_roi': roi_desktop\n        }\n    }\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Statistics/Adv_Hypothesis_testing/#hr-analytics-example","title":"HR Analytics Example","text":"<pre><code># Example: Analyzing salary differences across departments\ndef analyze_salary_equity(data):\n    \"\"\"\n    Performs comprehensive salary analysis across departments.\n    \"\"\"\n    # Perform ANOVA\n    anova_results = perform_anova_analysis(\n        data,\n        'department',\n        'salary'\n    )\n\n    # Additional equity metrics\n    gender_analysis = analyze_gender_pay_gap(data)\n    experience_analysis = analyze_experience_impact(data)\n\n    return {\n        'anova_results': anova_results,\n        'equity_metrics': {\n            'gender_analysis': gender_analysis,\n            'experience_impact': experience_analysis\n        }\n    }\n</code></pre> <p>This documentation provides a comprehensive guide to performing various types of hypothesis tests in Python, complete with practical examples and business applications. The code is structured to be both educational and immediately useful in real-world scenarios.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/Data_distribution/","title":"Chapter 3: Data Distribution","text":""},{"location":"Learning_resources/Data%20Science/Statistics/Data_distribution/#normal-distribution","title":"Normal Distribution","text":""},{"location":"Learning_resources/Data%20Science/Statistics/Data_distribution/#overview","title":"Overview","text":"<p>The normal distribution, also known as the Gaussian distribution, is characterized by:</p> <ul> <li>Symmetrical bell-shaped curve</li> <li>Total area under the curve equals 1</li> <li>The curve never reaches zero</li> <li>Defined by two parameters: mean (\u03bc) and standard deviation (\u03c3)</li> </ul>"},{"location":"Learning_resources/Data%20Science/Statistics/Data_distribution/#key-properties","title":"Key Properties","text":"<ol> <li> <p>Standard Normal Distribution</p> <ul> <li>Mean = 0</li> <li>Standard deviation = 1</li> </ul> </li> <li> <p>Areas under the Normal Distribution</p> <ul> <li>68% of data falls within 1 standard deviation</li> <li>95% of data falls within 2 standard deviations</li> <li>99.7% of data falls within 3 standard deviations</li> </ul> </li> </ol>"},{"location":"Learning_resources/Data%20Science/Statistics/Data_distribution/#working-with-normal-distributions-in-python","title":"Working with Normal Distributions in Python","text":"<pre><code>from scipy.stats import norm\n\n# Example using women's heights\n# Mean = 161 cm, Standard deviation = 7 cm\n\n# Calculate probability of being shorter than 154 cm\nprob_shorter = norm.cdf(154, 161, 7)  # Returns 0.158655 (about 16%)\n\n# Calculate probability of being taller than 154 cm\nprob_taller = 1 - norm.cdf(154, 161, 7)  # Returns 0.841345 (about 84%)\n\n# Calculate probability of height between 154-157 cm\nprob_between = norm.cdf(157, 161, 7) - norm.cdf(154, 161, 7)  # Returns 0.1252\n\n# Find height threshold where 90% of women are shorter\nheight_90th = norm.ppf(0.9, 161, 7)  # Returns 169.97086\n\n# Generate random heights\nrandom_heights = norm.rvs(161, 7, size=10)\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Statistics/Data_distribution/#central-limit-theorem-clt","title":"Central Limit Theorem (CLT)","text":""},{"location":"Learning_resources/Data%20Science/Statistics/Data_distribution/#overview_1","title":"Overview","text":"<p>The Central Limit Theorem states that the sampling distribution of a statistic becomes closer to the normal distribution as the number of trials increases.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/Data_distribution/#requirements","title":"Requirements","text":"<ul> <li>Samples should be random and independent</li> </ul>"},{"location":"Learning_resources/Data%20Science/Statistics/Data_distribution/#implementation-example","title":"Implementation Example","text":"<pre><code>import pandas as pd\nimport numpy as np\n\n# Create a die\ndie = pd.Series([1, 2, 3, 4, 5, 6])\n\n# Function to generate sample means\ndef generate_sample_means(n_samples, sample_size):\n    sample_means = []\n    for i in range(n_samples):\n        sample_means.append(np.mean(die.sample(sample_size, replace=True)))\n    return sample_means\n\n# Generate different numbers of sample means\nsample_means_100 = generate_sample_means(100, 5)\nsample_means_1000 = generate_sample_means(1000, 5)\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Statistics/Data_distribution/#poisson-distribution","title":"Poisson Distribution","text":""},{"location":"Learning_resources/Data%20Science/Statistics/Data_distribution/#overview_2","title":"Overview","text":"<p>The Poisson distribution models the probability of events occurring over a fixed period when these events appear to happen at a certain rate but completely at random.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/Data_distribution/#key-concepts","title":"Key Concepts","text":"<ul> <li>Lambda (\u03bb) represents the average number of events per time interval</li> <li>The distribution peaks at lambda</li> <li>Applicable to various scenarios like:</li> <li>Animal shelter adoptions</li> <li>Restaurant customer arrivals</li> <li>Earthquake occurrences</li> </ul>"},{"location":"Learning_resources/Data%20Science/Statistics/Data_distribution/#python-implementation","title":"Python Implementation","text":"<pre><code>from scipy.stats import poisson\n\n# Example: Average adoptions per week = 8\nlambda_param = 8\n\n# Probability of exactly 5 adoptions\nprob_exact = poisson.pmf(5, lambda_param)  # Returns 0.09160366\n\n# Probability of 5 or fewer adoptions\nprob_less_equal = poisson.cdf(5, lambda_param)  # Returns 0.1912361\n\n# Probability of more than 5 adoptions\nprob_greater = 1 - poisson.cdf(5, lambda_param)  # Returns 0.8087639\n\n# Generate random samples\nrandom_samples = poisson.rvs(lambda_param, size=10)\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Statistics/Data_distribution/#exponential-distribution","title":"Exponential Distribution","text":""},{"location":"Learning_resources/Data%20Science/Statistics/Data_distribution/#overview_3","title":"Overview","text":"<p>The exponential distribution models the probability of time between Poisson events.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/Data_distribution/#key-properties_1","title":"Key Properties","text":"<ul> <li>Uses the same lambda (rate) as the Poisson distribution</li> <li>Continuous distribution (time)</li> <li>Expected value = 1/\u03bb</li> </ul>"},{"location":"Learning_resources/Data%20Science/Statistics/Data_distribution/#python-implementation_1","title":"Python Implementation","text":"<pre><code>from scipy.stats import expon\n\n# Example: Average 0.5 customer service tickets per minute\nlambda_rate = 0.5\nscale = 1/lambda_rate  # scale = 2\n\n# Probability of waiting less than 1 minute\nprob_less_1min = expon.cdf(1, scale=scale)\n\n# Probability of waiting more than 4 minutes\nprob_more_4min = 1 - expon.cdf(4, scale=scale)\n\n# Probability of waiting between 1 and 4 minutes\nprob_between = expon.cdf(4, scale=scale) - expon.cdf(1, scale=scale)\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Statistics/Data_distribution/#additional-distributions","title":"Additional Distributions","text":""},{"location":"Learning_resources/Data%20Science/Statistics/Data_distribution/#students-t-distribution","title":"Student's t-Distribution","text":"<ul> <li>Similar shape to normal distribution</li> <li>Has degrees of freedom (df) parameter</li> <li>Lower df = thicker tails</li> <li>Higher df = closer to normal distribution</li> </ul>"},{"location":"Learning_resources/Data%20Science/Statistics/Data_distribution/#log-normal-distribution","title":"Log-Normal Distribution","text":"<ul> <li>Variable whose logarithm is normally distributed</li> <li>Common applications:</li> <li>Chess game lengths</li> <li>Adult blood pressure</li> <li>Hospital admissions during epidemics</li> </ul>"},{"location":"Learning_resources/Data%20Science/Statistics/Data_distribution/#references","title":"References","text":"<ul> <li>Content developed by Maggie Matsui for DataCamp</li> <li>All code examples use SciPy's stats module</li> <li>Visualizations can be created using matplotlib or seaborn (not shown in examples)</li> </ul>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing/","title":"Hypothesis Testing in Python","text":""},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing/#introduction-to-hypothesis-testing","title":"Introduction to Hypothesis Testing","text":"<p>Hypothesis testing is a fundamental concept in statistics that helps us make decisions about populations based on sample data. Let's explore this concept through both theoretical understanding and practical implementation in Python.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing/#understanding-ab-testing","title":"Understanding A/B Testing","text":"<p>A/B testing is a practical application of hypothesis testing commonly used in business decisions. Consider the real-world example of Electronic Arts (EA) and SimCity 5:</p> <ul> <li>EA wanted to increase pre-orders of their game</li> <li>They tested different advertising scenarios</li> <li>Users were split into control and treatment groups</li> <li>The results showed that the treatment group (no ad) got 43.4% more purchases than the control group (with ad)</li> </ul> <p>This raises an important question: Was this result statistically significant, or just due to chance? This is where hypothesis testing comes in.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing/#working-with-sample-data","title":"Working with Sample Data","text":"<p>Let's start with loading and examining our data:</p> <pre><code>import pandas as pd\nimport numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n\n# Load the Stack Overflow Developer Survey data\nstack_overflow = pd.read_csv('stack_overflow_data.csv')\n\n# Example of examining the data\nprint(stack_overflow.head())\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing/#bootstrapping-for-hypothesis-testing","title":"Bootstrapping for Hypothesis Testing","text":"<p>Bootstrapping is a powerful technique for generating sampling distributions. Here's how to implement it:</p> <pre><code>def generate_bootstrap_distribution(data, column, statistic_func, n_bootstraps=5000):\n    \"\"\"\n    Generate a bootstrap distribution for a given statistic.\n\n    Parameters:\n    -----------\n    data : pandas DataFrame\n        The dataset to sample from\n    column : str\n        The column name to calculate the statistic on\n    statistic_func : function\n        The function to calculate the statistic (e.g., np.mean)\n    n_bootstraps : int\n        Number of bootstrap samples to generate\n\n    Returns:\n    --------\n    list\n        Bootstrap distribution of the statistic\n    \"\"\"\n    boot_distn = []\n    for _ in range(n_bootstraps):\n        # Resample with replacement\n        sample = data.sample(frac=1, replace=True)\n        # Calculate and store the statistic\n        boot_distn.append(statistic_func(sample[column]))\n\n    return boot_distn\n\n# Example usage\nso_boot_distn = generate_bootstrap_distribution(\n    stack_overflow, \n    'converted_comp', \n    np.mean\n)\n\n# Visualize the bootstrap distribution\nplt.figure(figsize=(10, 6))\nplt.hist(so_boot_distn, bins=50, edgecolor='black')\nplt.title('Bootstrap Distribution of Mean Compensation')\nplt.xlabel('Mean Compensation')\nplt.ylabel('Frequency')\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing/#z-scores-and-hypothesis-testing","title":"Z-Scores and Hypothesis Testing","text":""},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing/#understanding-z-scores","title":"Understanding Z-Scores","text":"<p>Z-scores are standardized values that tell us how many standard deviations an observation is from the mean. The formula is:</p> <p>z = (sample statistic - hypothesized parameter value) / standard error</p> <pre><code>def calculate_z_score(sample_stat, hypoth_value, std_error):\n    \"\"\"\n    Calculate the z-score for a hypothesis test.\n    \"\"\"\n    return (sample_stat - hypoth_value) / std_error\n\n# Example: Testing mean compensation\nmean_comp_samp = stack_overflow['converted_comp'].mean()\nmean_comp_hyp = 110000\nstd_error = np.std(so_boot_distn, ddof=1)\n\nz_score = calculate_z_score(mean_comp_samp, mean_comp_hyp, std_error)\nprint(f\"Z-score: {z_score:.3f}\")\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing/#p-values-and-statistical-significance","title":"P-Values and Statistical Significance","text":""},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing/#understanding-p-values","title":"Understanding P-Values","text":"<p>P-values represent the probability of obtaining a result at least as extreme as the observed result, assuming the null hypothesis is true.</p> <pre><code>def calculate_p_value(z_score, alternative='two-sided'):\n    \"\"\"\n    Calculate p-value for a given z-score.\n\n    Parameters:\n    -----------\n    z_score : float\n        The calculated z-score\n    alternative : str\n        Type of test ('two-sided', 'greater', 'less')\n\n    Returns:\n    --------\n    float\n        The p-value\n    \"\"\"\n    if alternative == 'two-sided':\n        return 2 * (1 - norm.cdf(abs(z_score)))\n    elif alternative == 'greater':\n        return 1 - norm.cdf(z_score)\n    else:  # alternative == 'less'\n        return norm.cdf(z_score)\n\n# Example usage\np_value = calculate_p_value(z_score, alternative='greater')\nprint(f\"P-value: {p_value:.4f}\")\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing/#statistical-significance","title":"Statistical Significance","text":"<p>A result is considered statistically significant if the p-value is less than the chosen significance level (\u03b1). </p> <p>Common significance levels are:</p> <ul> <li>\u03b1 = 0.05 (5% significance level)</li> <li>\u03b1 = 0.01 (1% significance level)</li> <li>\u03b1 = 0.10 (10% significance level)</li> </ul> <pre><code>def test_hypothesis(p_value, alpha=0.05):\n    \"\"\"\n    Make a decision about the hypothesis test.\n\n    Parameters:\n    -----------\n    p_value : float\n        The calculated p-value\n    alpha : float\n        The significance level\n\n    Returns:\n    --------\n    str\n        The decision and interpretation\n    \"\"\"\n    if p_value &lt;= alpha:\n        return (f\"Reject the null hypothesis (p={p_value:.4f} \u2264 \u03b1={alpha}). \"\n                \"There is sufficient evidence to support the alternative hypothesis.\")\n    else:\n        return (f\"Fail to reject the null hypothesis (p={p_value:.4f} &gt; \u03b1={alpha}). \"\n                \"There is insufficient evidence to support the alternative hypothesis.\")\n\n# Example usage\nalpha = 0.05\ndecision = test_hypothesis(p_value, alpha)\nprint(decision)\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing/#confidence-intervals","title":"Confidence Intervals","text":"<p>Confidence intervals provide a range of plausible values for the population parameter:</p> <pre><code>def calculate_confidence_interval(boot_distn, confidence_level=0.95):\n    \"\"\"\n    Calculate confidence interval from a bootstrap distribution.\n    \"\"\"\n    lower_percentile = (1 - confidence_level) / 2\n    upper_percentile = 1 - lower_percentile\n\n    lower = np.quantile(boot_distn, lower_percentile)\n    upper = np.quantile(boot_distn, upper_percentile)\n\n    return lower, upper\n\n# Example usage\nlower, upper = calculate_confidence_interval(so_boot_distn)\nprint(f\"95% Confidence Interval: ({lower:.2f}, {upper:.2f})\")\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing/#types-of-errors-in-hypothesis-testing","title":"Types of Errors in Hypothesis Testing","text":"<p>There are two types of errors that can occur in hypothesis testing:</p> <ol> <li> <p>Type I Error (False Positive):</p> <ul> <li>Rejecting H\u2080 when it's actually true</li> <li>Probability = \u03b1 (significance level)</li> </ul> </li> <li> <p>Type II Error (False Negative):</p> <ul> <li>Failing to reject H\u2080 when it's actually false</li> <li>Probability = \u03b2 (depends on sample size and effect size)</li> </ul> </li> </ol>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing/#best-practices-for-hypothesis-testing","title":"Best Practices for Hypothesis Testing","text":"<ol> <li>Always state your hypotheses clearly before conducting the test</li> <li>Choose your significance level (\u03b1) before collecting data</li> <li>Consider the practical significance, not just statistical significance</li> <li>Report confidence intervals along with p-values</li> <li>Be aware of multiple testing problems</li> <li>Use appropriate sample sizes</li> </ol>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing/#example-complete-hypothesis-test","title":"Example: Complete Hypothesis Test","text":"<p>Let's put it all together with a complete example:</p> <pre><code>def complete_hypothesis_test(data, column, hypothesis_value, \n                           alternative='two-sided', alpha=0.05):\n    \"\"\"\n    Conduct a complete hypothesis test.\n    \"\"\"\n    # Calculate sample statistic\n    sample_stat = data[column].mean()\n\n    # Generate bootstrap distribution\n    boot_distn = generate_bootstrap_distribution(data, column, np.mean)\n\n    # Calculate standard error\n    std_error = np.std(boot_distn, ddof=1)\n\n    # Calculate z-score\n    z_score = calculate_z_score(sample_stat, hypothesis_value, std_error)\n\n    # Calculate p-value\n    p_value = calculate_p_value(z_score, alternative)\n\n    # Calculate confidence interval\n    ci_lower, ci_upper = calculate_confidence_interval(boot_distn)\n\n    # Make decision\n    decision = test_hypothesis(p_value, alpha)\n\n    return {\n        'sample_statistic': sample_stat,\n        'z_score': z_score,\n        'p_value': p_value,\n        'confidence_interval': (ci_lower, ci_upper),\n        'decision': decision\n    }\n\n# Example usage\nresults = complete_hypothesis_test(\n    stack_overflow,\n    'converted_comp',\n    110000,\n    alternative='greater',\n    alpha=0.05\n)\n\n# Print results in a formatted way\nprint(\"Hypothesis Test Results\")\nprint(\"=====================\")\nprint(f\"Sample Statistic: {results['sample_statistic']:.2f}\")\nprint(f\"Z-score: {results['z_score']:.3f}\")\nprint(f\"P-value: {results['p_value']:.4f}\")\nprint(f\"95% Confidence Interval: ({results['confidence_interval'][0]:.2f}, \"\n      f\"{results['confidence_interval'][1]:.2f})\")\nprint(\"\\nDecision:\")\nprint(results['decision'])\n</code></pre> <p>This comprehensive guide provides both the theoretical foundation and practical implementation of hypothesis testing in Python. The code examples are designed to be reusable and adaptable for different hypothesis testing scenarios.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing_with_proportions/","title":"Hypothesis Testing with Proportions and Chi-Square Tests","text":"<p>This repository is a comprehensive guide to hypothesis testing, focusing on proportion tests and chi-square tests. The guide provides theoretical explanations, mathematical formulas, and Python code examples for practical applications.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing_with_proportions/#topics-covered","title":"Topics Covered","text":"<ol> <li>One-Sample Proportion Test:</li> <li>Z-test, Z-score, and p-value.</li> <li>Two-Sample Proportion Test.</li> <li>Chi-Square Test:</li> <li>Test of independence.</li> <li>Goodness-of-fit test.</li> </ol>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing_with_proportions/#1-one-sample-proportion-test","title":"1. One-Sample Proportion Test","text":""},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing_with_proportions/#overview","title":"Overview","text":"<p>The one-sample proportion test is used to determine whether the proportion of a specific category in a population matches a hypothesized proportion (\\(p_0\\)).</p> <p>Example: Testing if 60% of voters support a candidate.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing_with_proportions/#hypotheses","title":"Hypotheses","text":"<ul> <li>Null Hypothesis (\\(H_0\\)): The population proportion equals \\(p_0\\).</li> </ul> \\[ H_0: p = p_0 \\] <ul> <li>Alternative Hypothesis (\\(H_a\\)): The population proportion differs from \\(p_0\\).</li> </ul> \\[ H_a: p \\neq p_0 \\]"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing_with_proportions/#formula","title":"Formula","text":"<p>The Z-statistic is calculated as:</p> \\[ Z = \\frac{\\hat{p} - p_0}{\\sqrt{\\frac{p_0 (1 - p_0)}{n}}} \\] <p>Where:</p> <ul> <li>\\(\\hat{p}\\): Sample proportion.</li> <li>\\(p_0\\): Hypothesized proportion.</li> <li>\\(n\\): Sample size.</li> </ul>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing_with_proportions/#python-code-example","title":"Python Code Example","text":"<pre><code>from statsmodels.stats.proportion import proportions_ztest\n\n# Data\nsuccesses = 48  # Number of successes\nn = 100         # Sample size\np0 = 0.6        # Hypothesized proportion\n\n# Perform the test\nstat, p_value = proportions_ztest(count=successes, nobs=n, value=p0)\nprint(f\"Z-Statistic: {stat}, p-value: {p_value}\")\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing_with_proportions/#2-two-sample-proportion-test","title":"2. Two-Sample Proportion Test","text":""},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing_with_proportions/#overview_1","title":"Overview","text":"<p>The two-sample proportion test compares the proportions of two independent groups to determine if they are significantly different.</p> <p>Example: Comparing the proportion of male and female students passing an exam.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing_with_proportions/#hypotheses_1","title":"Hypotheses","text":"<ul> <li>Null Hypothesis (\\(H_0\\)): The proportions are equal.</li> </ul> \\[ H_0: p_1 = p_2 \\] <ul> <li>Alternative Hypothesis (\\(H_a\\)): The proportions are not equal.</li> </ul> \\[ H_a: p_1 \\neq p_2 \\]"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing_with_proportions/#formula_1","title":"Formula","text":"<p>The Z-statistic is calculated as:</p> \\[ Z = \\frac{\\hat{p}_1 - \\hat{p}_2}{\\sqrt{p (1 - p) \\left(\\frac{1}{n_1} + \\frac{1}{n_2}\\right)}} \\] <p>Where:</p> <ul> <li>\\(\\hat{p}_1, \\hat{p}_2\\): Sample proportions.</li> <li>\\(n_1, n_2\\): Sample sizes.</li> <li>\\(p\\): Pooled proportion:</li> </ul> \\[ p = \\frac{x_1 + x_2}{n_1 + n_2} \\]"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing_with_proportions/#python-code-example_1","title":"Python Code Example","text":"<pre><code># Data\nsuccesses = [50, 45]  # Successes in group 1 and group 2\nsample_sizes = [100, 100]  # Sample sizes of group 1 and group 2\n\n# Perform the test\nstat, p_value = proportions_ztest(count=successes, nobs=sample_sizes)\nprint(f\"Z-Statistic: {stat}, p-value: {p_value}\")\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing_with_proportions/#3-chi-square-test","title":"3. Chi-Square Test","text":""},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing_with_proportions/#overview_2","title":"Overview","text":"<p>Chi-Square tests are used for categorical data to test relationships between variables or whether observed frequencies match expected frequencies.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing_with_proportions/#31-chi-square-test-of-independence","title":"3.1 Chi-Square Test of Independence","text":"<p>Purpose: To test whether two categorical variables are independent.</p> <p>Example: Testing if gender and preference for a product are related.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing_with_proportions/#hypotheses_2","title":"Hypotheses","text":"<ul> <li>Null Hypothesis (\\(H_0\\)): The variables are independent.</li> <li>Alternative Hypothesis (\\(H_a\\)): The variables are not independent.</li> </ul>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing_with_proportions/#formula_2","title":"Formula","text":"\\[ \\chi^2 = \\sum \\frac{(O - E)^2}{E} \\] <p>Where:</p> <ul> <li>\\(O\\): Observed frequency.</li> <li> <p>\\(E\\): Expected frequency:</p> \\[ E = \\frac{\\text{row total} \\times \\text{column total}}{\\text{grand total}} \\] </li> </ul>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing_with_proportions/#python-code-example_2","title":"Python Code Example","text":"<pre><code>import numpy as np\nfrom scipy.stats import chi2_contingency\n\n# Data (contingency table)\ndata = np.array([[50, 30], [20, 100]])\n\n# Perform the test\nchi2, p_value, dof, expected = chi2_contingency(data)\nprint(f\"Chi2-Statistic: {chi2}, p-value: {p_value}\")\nprint(\"Expected Frequencies:\\n\", expected)\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing_with_proportions/#32-chi-square-goodness-of-fit-test","title":"3.2 Chi-Square Goodness-of-Fit Test","text":"<p>Purpose: To test if an observed distribution matches an expected distribution.</p> <p>Example: Testing if the distribution of dice rolls matches a uniform distribution.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing_with_proportions/#hypotheses_3","title":"Hypotheses","text":"<ul> <li>Null Hypothesis (\\(H_0\\)): The observed frequencies match the expected frequencies.</li> <li>Alternative Hypothesis (\\(H_a\\)): The observed frequencies do not match.</li> </ul>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing_with_proportions/#formula_3","title":"Formula","text":"\\[ \\chi^2 = \\sum \\frac{(O - E)^2}{E} \\] <p>Where:</p> <ul> <li>\\(O\\): Observed frequency.</li> <li>\\(E\\): Expected frequency.</li> </ul>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing_with_proportions/#python-code-example_3","title":"Python Code Example","text":"<pre><code>from scipy.stats import chisquare\n\n# Data\nobserved = [18, 22, 20, 25, 15]\nexpected = [20, 20, 20, 20, 20]  # Uniform distribution\n\n# Perform the test\nchi2, p_value = chisquare(f_obs=observed, f_exp=expected)\nprint(f\"Chi2-Statistic: {chi2}, p-value: {p_value}\")\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Statistics/Hypothesis_testing_with_proportions/#conclusion","title":"Conclusion","text":"<p>This guide provides a theoretical and practical understanding of hypothesis testing for proportions and categorical data using Chi-Square tests. The Python examples demonstrate how to implement these tests with dummy data. </p>"},{"location":"Learning_resources/Data%20Science/Statistics/Intro_to_Statistics/","title":"Chapter 1: Introduction to Statistics in Python","text":""},{"location":"Learning_resources/Data%20Science/Statistics/Intro_to_Statistics/#what-is-statistics","title":"What is Statistics?","text":"<p>Statistics is the practice and study of collecting, analyzing, and summarizing data.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/Intro_to_Statistics/#summary-statistic","title":"Summary Statistic","text":"<p>Definition: A summary statistic is a fact or summary derived from data.</p> <ul> <li>Example: \"50% of friends drive to work.\"</li> </ul>"},{"location":"Learning_resources/Data%20Science/Statistics/Intro_to_Statistics/#what-can-statistics-do","title":"What Can Statistics Do?","text":"<ul> <li>Examples of Questions Answered by Statistics:</li> <li>How likely is someone to purchase a product?</li> <li>What percentage of people drive to work?</li> <li>A/B tests: Which ad is more effective in increasing sales?</li> </ul>"},{"location":"Learning_resources/Data%20Science/Statistics/Intro_to_Statistics/#limitations-of-statistics","title":"Limitations of Statistics","text":"<ul> <li>Example: Statistics can analyze viewership data for a TV show like Game of Thrones, but it can't determine the root cause of its popularity.</li> </ul>"},{"location":"Learning_resources/Data%20Science/Statistics/Intro_to_Statistics/#types-of-statistics","title":"Types of Statistics","text":""},{"location":"Learning_resources/Data%20Science/Statistics/Intro_to_Statistics/#descriptive-statistics","title":"Descriptive Statistics","text":"<ul> <li>Purpose: Summarize and describe data.</li> <li>Example: \"50% of people take the bus.\"</li> </ul>"},{"location":"Learning_resources/Data%20Science/Statistics/Intro_to_Statistics/#inferential-statistics","title":"Inferential Statistics","text":"<ul> <li>Purpose: Make inferences about a population based on sample data.</li> <li>Example: Estimating the percentage of people who drive to work.</li> </ul>"},{"location":"Learning_resources/Data%20Science/Statistics/Intro_to_Statistics/#types-of-data","title":"Types of Data","text":""},{"location":"Learning_resources/Data%20Science/Statistics/Intro_to_Statistics/#numeric-quantitative","title":"Numeric (Quantitative)","text":"<ol> <li>Continuous (Measured): Examples include airplane speed, time spent waiting in line.</li> <li>Discrete (Counted): Examples include the number of pets or packages shipped.</li> </ol>"},{"location":"Learning_resources/Data%20Science/Statistics/Intro_to_Statistics/#categorical-qualitative","title":"Categorical (Qualitative)","text":"<ol> <li>Nominal (Unordered): Examples include marital status or country of residence.</li> <li>Ordinal (Ordered): Examples include survey responses such as \"Strongly disagree\" to \"Strongly agree.\"</li> </ol>"},{"location":"Learning_resources/Data%20Science/Statistics/Intro_to_Statistics/#why-does-data-type-matter","title":"Why Does Data Type Matter?","text":""},{"location":"Learning_resources/Data%20Science/Statistics/Intro_to_Statistics/#summary-statistics-example","title":"Summary Statistics Example","text":"<pre><code>import numpy as np\nnp.mean(car_speeds['speed_mph'])  # Calculates the average car speed\n</code></pre>"},{"location":"Learning_resources/Data%20Science/Statistics/Intro_to_Statistics/#value-counts-example","title":"Value Counts Example","text":"<pre><code>demographics['marriage_status'].value_counts()\n# Output:\n# single      188\n# married     143\n# divorced    124\n</code></pre> <p>Data type affects how statistics and visualizations are applied.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/Intro_to_Statistics/#measures-of-center","title":"Measures of Center","text":""},{"location":"Learning_resources/Data%20Science/Statistics/Intro_to_Statistics/#mean","title":"Mean","text":"<p>The average value of a dataset: <pre><code>import numpy as np\nnp.mean(msleep['sleep_total'])  # Calculates the mean sleep time\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Statistics/Intro_to_Statistics/#median","title":"Median","text":"<p>The middle value in a sorted dataset: <pre><code>np.median(msleep['sleep_total'])  # Calculates the median sleep time\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Statistics/Intro_to_Statistics/#mode","title":"Mode","text":"<p>The most frequent value in a dataset: <pre><code>import statistics\nstatistics.mode(msleep['vore'])  # Finds the most common dietary type\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Statistics/Intro_to_Statistics/#measures-of-spread","title":"Measures of Spread","text":""},{"location":"Learning_resources/Data%20Science/Statistics/Intro_to_Statistics/#variance","title":"Variance","text":"<p>The average squared deviation from the mean: 1. Subtract the mean from each data point. 2. Square the deviations. 3. Sum the squared deviations and divide by <code>n-1</code> (sample variance):    <pre><code>np.var(msleep['sleep_total'], ddof=1)  # Variance with sample correction\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Statistics/Intro_to_Statistics/#standard-deviation","title":"Standard Deviation","text":"<p>The square root of variance: <pre><code>np.std(msleep['sleep_total'], ddof=1)  # Calculates standard deviation\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Statistics/Intro_to_Statistics/#quantiles-and-interquartile-range-iqr","title":"Quantiles and Interquartile Range (IQR)","text":""},{"location":"Learning_resources/Data%20Science/Statistics/Intro_to_Statistics/#quantiles","title":"Quantiles","text":"<p>Divide data into intervals: <pre><code>np.quantile(msleep['sleep_total'], [0, 0.25, 0.5, 0.75, 1])\n# Output: [1.9, 7.85, 10.1, 13.75, 19.9]\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Statistics/Intro_to_Statistics/#iqr","title":"IQR","text":"<p>The range between the 25th and 75th percentiles: <pre><code>from scipy.stats import iqr\niqr(msleep['sleep_total'])  # Calculates interquartile range\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Statistics/Intro_to_Statistics/#outliers","title":"Outliers","text":"<p>Outliers are data points that are substantially different from others:</p> <ul> <li>Calculation:   <pre><code>lower_threshold = Q1 - 1.5 * IQR\nupper_threshold = Q3 + 1.5 * IQR\n</code></pre></li> </ul>"},{"location":"Learning_resources/Data%20Science/Statistics/Intro_to_Statistics/#example-detecting-outliers","title":"Example: Detecting Outliers","text":"<pre><code>msleep[(msleep['bodywt'] &lt; lower_threshold) | (msleep['bodywt'] &gt; upper_threshold)]\n</code></pre> <p>This document provides a comprehensive introduction to statistics, focusing on Python implementations using libraries like NumPy, pandas, and Matplotlib. Each section includes both conceptual explanations and practical examples.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/Non_Parametric_test/","title":"Hypothesis Testing: Non-Parametric","text":""},{"location":"Learning_resources/Data%20Science/Statistics/Non_Parametric_test/#1-assumptions-in-hypothesis-testing","title":"1. Assumptions in Hypothesis Testing","text":""},{"location":"Learning_resources/Data%20Science/Statistics/Non_Parametric_test/#overview","title":"Overview","text":"<p>Assumptions ensure that the results of hypothesis tests are valid and reliable. Violations of these assumptions can lead to incorrect conclusions.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/Non_Parametric_test/#11-randomness","title":"1.1 Randomness","text":"<ul> <li>Definition: Data must be collected randomly to avoid bias.</li> <li>Reason: Randomness ensures that the sample represents the population.</li> <li>Example: A random sample of voters provides an unbiased estimate of election preferences.</li> </ul>"},{"location":"Learning_resources/Data%20Science/Statistics/Non_Parametric_test/#12-independence-of-observations","title":"1.2 Independence of Observations","text":"<ul> <li>Definition: Each observation must be independent, meaning the occurrence of one observation should not influence another.</li> <li>Reason: Dependence introduces bias and invalidates statistical tests.</li> <li>Example: Measuring blood pressure in a single individual multiple times violates independence.</li> </ul>"},{"location":"Learning_resources/Data%20Science/Statistics/Non_Parametric_test/#13-large-sample-size","title":"1.3 Large Sample Size","text":"<ul> <li>The Central Limit Theorem (CLT) ensures that the sampling distribution of the mean becomes approximately normal with a sufficiently large sample size (\\(n &gt; 30\\)).</li> </ul>"},{"location":"Learning_resources/Data%20Science/Statistics/Non_Parametric_test/#t-tests","title":"t-Tests","text":"<ul> <li>Large sample size is needed when population variance is unknown.</li> </ul> <p>Formula:</p> \\[ t = \\frac{\\bar{x} - \\mu}{s / \\sqrt{n}} \\] <p>Python Example: <pre><code>from scipy.stats import ttest_1samp\nimport numpy as np\n\n# Simulated data\ndata = np.random.normal(loc=50, scale=5, size=40)\nstat, p_value = ttest_1samp(data, popmean=50)\nprint(f\"t-statistic: {stat}, p-value: {p_value}\")\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Statistics/Non_Parametric_test/#proportion-tests","title":"Proportion Tests","text":"<ul> <li>\\(np \\geq 5\\) and \\(n(1-p) \\geq 5\\) ensure the normal approximation of the binomial distribution.</li> </ul> <p>Formula:</p> \\[ Z = \\frac{\\hat{p} - p_0}{\\sqrt{\\frac{p_0 (1-p_0)}{n}}} \\] <p>Python Example: <pre><code>from statsmodels.stats.proportion import proportions_ztest\n\nsuccesses = 48  # Number of successes\nn = 100         # Sample size\np0 = 0.5        # Hypothesized proportion\n\nstat, p_value = proportions_ztest(count=successes, nobs=n, value=p0)\nprint(f\"Z-statistic: {stat}, p-value: {p_value}\")\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Statistics/Non_Parametric_test/#chi-square-tests","title":"Chi-Square Tests","text":"<ul> <li>Each expected frequency should be \\(\\geq 5\\).</li> </ul> <p>Formula:</p> \\[ \\chi^2 = \\sum \\frac{(O - E)^2}{E} \\] <p>Python Example: <pre><code>import numpy as np\nfrom scipy.stats import chi2_contingency\n\ndata = np.array([[50, 30], [20, 100]])\nchi2, p_value, dof, expected = chi2_contingency(data)\nprint(f\"Chi2-statistic: {chi2}, p-value: {p_value}\")\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Statistics/Non_Parametric_test/#2-parametric-vs-non-parametric-tests","title":"2. Parametric vs. Non-Parametric Tests","text":""},{"location":"Learning_resources/Data%20Science/Statistics/Non_Parametric_test/#parametric-tests","title":"Parametric Tests","text":"<ul> <li>Definition: Tests that assume the data follows a specific distribution (e.g., normal distribution).</li> <li>Examples: t-tests, ANOVA.</li> <li>Advantages: More powerful when assumptions are met.</li> <li>Disadvantages: Sensitive to violations of assumptions.</li> </ul>"},{"location":"Learning_resources/Data%20Science/Statistics/Non_Parametric_test/#non-parametric-tests","title":"Non-Parametric Tests","text":"<ul> <li>Definition: Tests that do not assume a specific data distribution.</li> <li>Examples: Wilcoxon tests, Kruskal-Wallis test.</li> <li>Advantages: Robust to non-normal data and outliers.</li> <li>Disadvantages: Less powerful than parametric tests for normal data.</li> </ul>"},{"location":"Learning_resources/Data%20Science/Statistics/Non_Parametric_test/#3-non-parametric-tests","title":"3. Non-Parametric Tests","text":""},{"location":"Learning_resources/Data%20Science/Statistics/Non_Parametric_test/#31-wilcoxon-signed-rank-test","title":"3.1 Wilcoxon Signed-Rank Test","text":"<ul> <li>Purpose: Tests whether the median of paired data differs from a hypothesized value.</li> <li>Hypotheses:</li> <li>\\(H_0\\): The medians are equal.</li> <li>\\(H_a\\): The medians are not equal.</li> </ul> <p>Mathematical Formula:</p> <ol> <li>Compute differences (\\(d_i\\)) between paired samples.</li> <li>Rank absolute differences.</li> <li>Calculate the sum of signed ranks (\\(W\\)).</li> </ol> <p>Python Example: <pre><code>from scipy.stats import wilcoxon\n\n# Paired data\nbefore = [88, 85, 90, 92, 91]\nafter = [84, 82, 88, 89, 86]\n\n# Perform Wilcoxon signed-rank test\nstat, p_value = wilcoxon(before, after)\nprint(f\"Statistic: {stat}, p-value: {p_value}\")\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Statistics/Non_Parametric_test/#32-wilcoxon-mann-whitney-test","title":"3.2 Wilcoxon-Mann-Whitney Test","text":"<ul> <li>Purpose: Compares medians of two independent samples.</li> <li> <p>Hypotheses:</p> <ul> <li>\\(H_0\\): The distributions are the same.</li> <li>\\(H_a\\): The distributions are different.</li> </ul> </li> </ul> <p>Python Example: <pre><code>from scipy.stats import mannwhitneyu\n\n# Two independent samples\ngroup1 = [88, 85, 90, 92, 91]\ngroup2 = [84, 82, 88, 89, 86]\n\n# Perform Mann-Whitney U test\nstat, p_value = mannwhitneyu(group1, group2)\nprint(f\"Statistic: {stat}, p-value: {p_value}\")\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Statistics/Non_Parametric_test/#33-kruskal-wallis-test","title":"3.3 Kruskal-Wallis Test","text":"<ul> <li>Purpose: Tests whether medians of three or more groups are equal.</li> <li>Hypotheses:<ul> <li>\\(H_0\\): All group medians are equal.</li> <li>\\(H_a\\): At least one group median is different.</li> </ul> </li> </ul> <p>Mathematical Formula:</p> \\[ H = \\frac{12}{n(n+1)} \\sum \\frac{R_i^2}{n_i} - 3(n+1) \\] <p>Python Example: <pre><code>from scipy.stats import kruskal\n\n# Three groups\ngroup1 = [88, 85, 90, 92, 91]\ngroup2 = [84, 82, 88, 89, 86]\ngroup3 = [80, 81, 85, 87, 83]\n\n# Perform Kruskal-Wallis test\nstat, p_value = kruskal(group1, group2, group3)\nprint(f\"Statistic: {stat}, p-value: {p_value}\")\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Statistics/Non_Parametric_test/#4-chi-square-tests","title":"4. Chi-Square Tests","text":""},{"location":"Learning_resources/Data%20Science/Statistics/Non_Parametric_test/#41-chi-square-test-of-independence","title":"4.1 Chi-Square Test of Independence","text":"<ul> <li>Purpose: Determines if two categorical variables are independent.</li> <li>Hypotheses:<ul> <li>\\(H_0\\): Variables are independent.</li> <li>\\(H_a\\): Variables are not independent.</li> </ul> </li> </ul> <p>Python Example: <pre><code>data = np.array([[50, 30], [20, 100]])\nchi2, p_value, dof, expected = chi2_contingency(data)\nprint(f\"Chi2-statistic: {chi2}, p-value: {p_value}\")\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Statistics/Non_Parametric_test/#42-chi-square-goodness-of-fit-test","title":"4.2 Chi-Square Goodness-of-Fit Test","text":"<ul> <li>Purpose: Tests if an observed distribution matches an expected distribution.</li> <li>Hypotheses:<ul> <li>\\(H_0\\): Observed distribution matches the expected.</li> <li>\\(H_a\\): Observed distribution does not match the expected.</li> </ul> </li> </ul> <p>Python Example: <pre><code>from scipy.stats import chisquare\n\n# Observed and expected frequencies\nobserved = [18, 22, 20, 25, 15]\nexpected = [20, 20, 20, 20, 20]\n\n# Perform goodness-of-fit test\nchi2, p_value = chisquare(f_obs=observed, f_exp=expected)\nprint(f\"Chi2-statistic: {chi2}, p-value: {p_value}\")\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Statistics/Non_Parametric_test/#summary","title":"Summary","text":"<p>This guide provides a detailed theoretical and practical understanding of hypothesis testing, including parametric and non-parametric methods. Each method includes assumptions, formulas, and Python code examples for real-world applications.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/correlation_and_experiment_design/","title":"Chapter 4: Correlation and Experiment Design","text":""},{"location":"Learning_resources/Data%20Science/Statistics/correlation_and_experiment_design/#correlation","title":"Correlation","text":""},{"location":"Learning_resources/Data%20Science/Statistics/correlation_and_experiment_design/#correlation-coefficient","title":"Correlation Coefficient","text":"<ul> <li>Definition: The correlation coefficient quantifies the linear relationship between two variables. It is a number between -1 and 1, where:</li> <li>1: Perfect positive correlation (as one variable increases, the other also increases).</li> <li>-1: Perfect negative correlation (as one variable increases, the other decreases).</li> <li>0: No linear relationship.</li> </ul> <p>Code Example: <pre><code>import pandas as pd\n\n# Sample data\ndata = pd.DataFrame({\n    'sleep_total': [12.1, 17.0, 14.4, 14.9, 4.0],\n    'sleep_rem': [8.2, 12.5, 11.0, 9.5, 2.0]\n})\n\n# Compute the correlation coefficient\ncorrelation = data['sleep_total'].corr(data['sleep_rem'])\nprint(f\"Correlation between total sleep and REM sleep: {correlation}\")\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Statistics/correlation_and_experiment_design/#visualizing-relationships","title":"Visualizing Relationships","text":"<ul> <li>Scatter Plot: A scatter plot helps visualize the relationship between two variables.</li> </ul> <p>Code Example: <pre><code>import seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Scatter plot of total sleep vs. REM sleep\nsns.scatterplot(x=\"sleep_total\", y=\"sleep_rem\", data=data)\nplt.show()\n</code></pre></p> <p>This scatter plot will visually represent the correlation between total sleep and REM sleep.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/correlation_and_experiment_design/#adding-a-trendline","title":"Adding a Trendline","text":"<ul> <li>Trendline: A trendline can help visually quantify the linear relationship between two variables.</li> </ul> <p>Code Example: <pre><code>sns.lmplot(x=\"sleep_total\", y=\"sleep_rem\", data=data, ci=None)\nplt.show()\n</code></pre></p> <p>This will add a linear regression trendline to the scatter plot.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/correlation_and_experiment_design/#caveats-of-correlation","title":"Caveats of Correlation","text":""},{"location":"Learning_resources/Data%20Science/Statistics/correlation_and_experiment_design/#non-linear-relationships","title":"Non-linear Relationships","text":"<ul> <li>Correlation only measures linear relationships. If the relationship between variables is non-linear, correlation may not be meaningful.</li> </ul> <p>Code Example: <pre><code># Example of a non-linear relationship\nimport numpy as np\nimport seaborn as sns\n\nx = np.linspace(-10, 10, 100)\ny = np.sin(x)\n\nsns.scatterplot(x=x, y=y)\nplt.show()\n\n# Correlation coefficient for non-linear data\ncorr_non_linear = np.corrcoef(x, y)[0, 1]\nprint(f\"Correlation for non-linear data: {corr_non_linear}\")\n</code></pre></p> <p>In this case, the correlation coefficient may be low despite the clear non-linear relationship.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/correlation_and_experiment_design/#design-of-experiments","title":"Design of Experiments","text":""},{"location":"Learning_resources/Data%20Science/Statistics/correlation_and_experiment_design/#controlled-experiments","title":"Controlled Experiments","text":"<p>Definition: In controlled experiments, participants are randomly assigned to either a treatment or a control group. This helps to establish a cause-and-effect relationship.</p> <p>Example: An experiment testing the effect of an advertisement on product sales.</p> <ul> <li>Treatment: Exposure to the advertisement.</li> <li>Response: Number of products purchased.</li> </ul>"},{"location":"Learning_resources/Data%20Science/Statistics/correlation_and_experiment_design/#randomized-controlled-trials-rct","title":"Randomized Controlled Trials (RCT)","text":"<ul> <li>Definition: RCTs are considered the gold standard for experiments. In an RCT, participants are randomly assigned to treatment and control groups, ensuring that any observed effects are due to the treatment itself.</li> </ul>"},{"location":"Learning_resources/Data%20Science/Statistics/correlation_and_experiment_design/#observational-studies","title":"Observational Studies","text":"<ul> <li>Definition: In observational studies, participants are not randomly assigned. Instead, researchers observe the subjects and try to infer relationships based on the data.</li> <li>These studies can establish association but not causation.</li> </ul>"},{"location":"Learning_resources/Data%20Science/Statistics/correlation_and_experiment_design/#longitudinal-vs-cross-sectional-studies","title":"Longitudinal vs. Cross-Sectional Studies","text":"<ul> <li>Longitudinal Study: Follows participants over time to observe how an exposure or treatment affects an outcome.</li> <li>Cross-Sectional Study: Collects data at a single point in time, which may be quicker but can lead to confounding variables.</li> </ul> <p>These expanded sections provide a more detailed explanation of the statistical concepts, their formulas, and Python code examples for practical understanding. Let me know if you need any more specific examples or clarifications!</p>"},{"location":"Learning_resources/Data%20Science/Statistics/probability/","title":"Chapter 2: Measuring Chance","text":""},{"location":"Learning_resources/Data%20Science/Statistics/probability/#what-are-the-chances","title":"What Are the Chances?","text":""},{"location":"Learning_resources/Data%20Science/Statistics/probability/#probability-basics","title":"Probability Basics","text":"<ul> <li>Probability Definition: The probability of an event is the measure of the likelihood that the event will occur. The formula for calculating probability is:</li> </ul> \\[ P(\\text{event}) = \\frac{\\text{# of favorable outcomes}}{\\text{total number of possible outcomes}} \\] <p>Example:    Consider the probability of flipping heads in a fair coin:</p> <ul> <li>There are 2 possible outcomes: heads or tails.</li> <li>The number of favorable outcomes (heads) is 1.   Therefore:</li> </ul> \\[ P(\\text{heads}) = \\frac{1}{2} = 50\\% \\] <p>Code Example:   <pre><code># Simulating a coin flip\nimport random\n\noutcomes = ['heads', 'tails']\nresult = random.choice(outcomes)\nprint(f\"Coin flip result: {result}\")\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Statistics/probability/#sampling","title":"Sampling","text":""},{"location":"Learning_resources/Data%20Science/Statistics/probability/#sampling-from-a-dataframe","title":"Sampling from a DataFrame","text":"<ul> <li>Definition: Sampling refers to randomly selecting rows from a DataFrame. In Python, you can use the <code>sample()</code> method from pandas to achieve this.</li> </ul> <p>Code Example: <pre><code>import pandas as pd\n\n# Sample data representing sales counts\nsales_counts = pd.DataFrame({\n    'name': ['Amir', 'Brian', 'Claire', 'Damian'],\n    'n_sales': [178, 128, 75, 69]\n})\n\n# Randomly sample one row\nsampled = sales_counts.sample()\nprint(sampled)\n</code></pre></p> <p>This will randomly select one row from the <code>sales_counts</code> DataFrame.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/probability/#setting-a-random-seed","title":"Setting a Random Seed","text":"<ul> <li>Definition: A random seed is used to initialize the random number generator so that the results are reproducible. By setting a seed, you ensure that the random numbers generated (e.g., when sampling data) are the same every time the code is run.</li> </ul> <p>Code Example: <pre><code>import numpy as np\n\n# Set a random seed for reproducibility\nnp.random.seed(10)\n\n# Sample from the sales_counts DataFrame\nsampled = sales_counts.sample()\nprint(sampled)\n</code></pre></p> <p>Setting the seed ensures that the same row is selected every time this code is executed.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/probability/#replacement-in-sampling","title":"Replacement in Sampling","text":""},{"location":"Learning_resources/Data%20Science/Statistics/probability/#sampling-without-replacement","title":"Sampling Without Replacement","text":"<ul> <li>Definition: Sampling without replacement means that once an item is selected, it is not returned to the population. This results in dependent events, as each selection affects the pool for subsequent selections.</li> </ul> <p>Code Example: <pre><code># Sampling without replacement\nsampled_2 = sales_counts.sample(2, replace=False)\nprint(sampled_2)\n</code></pre></p> <p>This will sample two rows, but the same row cannot be selected twice.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/probability/#sampling-with-replacement","title":"Sampling With Replacement","text":"<ul> <li>Definition: Sampling with replacement means that each item selected is returned to the population, allowing the same item to be selected multiple times. This results in independent events, as each selection is independent of the others.</li> </ul> <p>Code Example: <pre><code># Sampling with replacement\nsampled_3 = sales_counts.sample(5, replace=True)\nprint(sampled_3)\n</code></pre></p> <p>This will sample five rows, and rows can be repeated in the output.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/probability/#discrete-probability-distributions","title":"Discrete Probability Distributions","text":""},{"location":"Learning_resources/Data%20Science/Statistics/probability/#probability-distribution","title":"Probability Distribution","text":"<ul> <li>Definition: A probability distribution describes the probability of each possible outcome in a scenario. For example, when rolling a fair die, each face has an equal probability of landing.</li> </ul> <p>Example: For a fair die, the probability distribution is uniform:</p> \\[ P(\\text{roll} = x) = \\frac{1}{6}, \\text{ where } x \\in \\{1, 2, 3, 4, 5, 6\\} \\] <p>Code Example: <pre><code>import numpy as np\n\n# Simulate 1000 rolls of a fair die\ndie_rolls = np.random.choice([1, 2, 3, 4, 5, 6], size=1000)\nprint(\"Sample of 10 rolls:\", die_rolls[:10])\n</code></pre></p> <p>This will simulate 1000 rolls of a fair die, with each number having an equal chance of being rolled.</p>"},{"location":"Learning_resources/Data%20Science/Statistics/probability/#expected-value","title":"Expected Value","text":"<ul> <li>Definition: The expected value (or mean) of a probability distribution is the average value that would be obtained from a large number of trials. The expected value for a fair die roll is calculated as:</li> </ul> \\[ \\text{Expected value} = \\frac{1}{6} \\times (1 + 2 + 3 + 4 + 5 + 6) = 3.5 \\] <p>Code Example: <pre><code># Calculate the expected value of a fair die roll\nexpected_value = np.mean([1, 2, 3, 4, 5, 6])\nprint(f\"Expected value of a fair die roll: {expected_value}\")\n</code></pre></p>"},{"location":"Learning_resources/Data%20Science/Statistics/probability/#law-of-large-numbers","title":"Law of Large Numbers","text":"<ul> <li>Definition: The Law of Large Numbers states that as the sample size increases, the sample mean will approach the expected value. This is particularly important when sampling from distributions.</li> </ul> <p>Code Example: <pre><code># Simulate a larger sample of die rolls\nrolls_1000 = np.random.choice([1, 2, 3, 4, 5, 6], size=1000)\nmean_1000 = np.mean(rolls_1000)\nprint(f\"Mean of 1000 rolls: {mean_1000}\")\n</code></pre></p> <p>The mean of a large sample of rolls will approach the expected value of 3.5.</p>"},{"location":"Learning_resources/Deep%20Learning/Backpropagation/","title":"Backpropagation","text":""},{"location":"Learning_resources/Deep%20Learning/Backpropagation/#backpropagation-in-neural-networks-detailed-explanation","title":"Backpropagation in Neural Networks: Detailed Explanation","text":"<p>Backpropagation (short for \"backward propagation of errors\") is the algorithm used to train neural networks. It adjusts the weights and biases in the network to minimize the error (loss) between predicted and actual outputs. This process is based on gradient descent, which optimizes the network by finding the minimum of the loss function.</p>"},{"location":"Learning_resources/Deep%20Learning/Backpropagation/#steps-of-backpropagation","title":"Steps of Backpropagation","text":"<ol> <li>Forward Pass: Calculate the predicted output by passing inputs through the network layers.</li> <li>Compute Loss: Calculate the error (loss) between the predicted output and the actual output using a loss function (e.g., Mean Squared Error, Cross-Entropy).</li> <li>Backward Pass:</li> <li>Calculate the gradient of the loss with respect to the output (using the chain rule of calculus).</li> <li>Propagate the gradient backward through the network to calculate the gradients for weights and biases.</li> <li>Update Weights and Biases: Adjust the weights and biases using the gradients and a learning rate.</li> </ol>"},{"location":"Learning_resources/Deep%20Learning/Backpropagation/#mathematics-of-backpropagation","title":"Mathematics of Backpropagation","text":""},{"location":"Learning_resources/Deep%20Learning/Backpropagation/#1-forward-pass","title":"1. Forward Pass","text":"<p>For a neuron \\( j \\) in layer \\( l \\):</p> <ul> <li> <p>Weighted sum of inputs:</p> \\[ z_j^{(l)} = \\sum_i w_{ji}^{(l)} a_i^{(l-1)} + b_j^{(l)} \\] </li> </ul> <p>where:</p> <ul> <li>\\( w_{ji}^{(l)} \\): Weight connecting neuron \\( i \\) in layer \\( l-1 \\) to neuron \\( j \\) in layer \\( l \\).</li> <li>\\( a_i^{(l-1)} \\): Activation from the previous layer.</li> <li> <p>\\( b_j^{(l)} \\): Bias term.</p> </li> <li> <p>Activation:</p> \\[ a_j^{(l)} = \\sigma(z_j^{(l)}) \\] <p>where \\( \\sigma \\) is the activation function.</p> </li> </ul>"},{"location":"Learning_resources/Deep%20Learning/Backpropagation/#2-loss-function","title":"2. Loss Function","text":"<p>The loss function measures the error. For example, Mean Squared Error:</p> \\[ L = \\frac{1}{2} \\sum (y - \\hat{y})^2 \\] <p>where:</p> <ul> <li>\\( y \\): Actual output.</li> <li>\\( \\hat{y} \\): Predicted output.</li> </ul>"},{"location":"Learning_resources/Deep%20Learning/Backpropagation/#3-backward-pass","title":"3. Backward Pass","text":"<p>Using the chain rule, the gradient of the loss \\( L \\) with respect to a weight \\( w \\) is computed:</p> <ul> <li>Error at output layer:</li> </ul> \\[ \\delta_j^{(L)} = \\frac{\\partial L}{\\partial a_j^{(L)}} \\cdot \\sigma'(z_j^{(L)}) \\] <p>where \\( \\sigma'(z_j^{(L)}) \\) is the derivative of the activation function.</p> <ul> <li> <p>Error at hidden layer:</p> \\[ \\delta_j^{(l)} = \\left( \\sum_k w_{kj}^{(l+1)} \\delta_k^{(l+1)} \\right) \\cdot \\sigma'(z_j^{(l)}) \\] </li> <li> <p>Gradients for weights and biases:</p> \\[ \\frac{\\partial L}{\\partial w_{ji}^{(l)}} = \\delta_j^{(l)} a_i^{(l-1)} \\] \\[ \\frac{\\partial L}{\\partial b_j^{(l)}} = \\delta_j^{(l)} \\] </li> </ul>"},{"location":"Learning_resources/Deep%20Learning/Backpropagation/#4-weight-update-rule","title":"4. Weight Update Rule","text":"<p>Weights and biases are updated using gradient descent:</p> \\[ w_{ji}^{(l)} \\gets w_{ji}^{(l)} - \\eta \\frac{\\partial L}{\\partial w_{ji}^{(l)}} \\] \\[ b_j^{(l)} \\gets b_j^{(l)} - \\eta \\frac{\\partial L}{\\partial b_j^{(l)}} \\] <p>where \\( \\eta \\) is the learning rate.</p>"},{"location":"Learning_resources/Deep%20Learning/Backpropagation/#code-example-backpropagation-in-python","title":"Code Example: Backpropagation in Python","text":"<p>Here\u2019s a simple implementation of backpropagation for a neural network with one hidden layer:</p> <pre><code>import numpy as np\n\n# Sigmoid activation function and its derivative\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n\ndef sigmoid_derivative(x):\n    return x * (1 - x)\n\n# Input data (XOR problem)\ninputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\noutputs = np.array([[0], [1], [1], [0]])\n\n# Initialize weights and biases\nnp.random.seed(42)\nweights_input_hidden = np.random.rand(2, 2)  # 2 input -&gt; 2 hidden\nweights_hidden_output = np.random.rand(2, 1)  # 2 hidden -&gt; 1 output\nbias_hidden = np.random.rand(1, 2)\nbias_output = np.random.rand(1, 1)\n\n# Learning rate\nlearning_rate = 0.1\nepochs = 10000\n\n# Training loop\nfor epoch in range(epochs):\n    # Forward pass\n    hidden_layer_input = np.dot(inputs, weights_input_hidden) + bias_hidden\n    hidden_layer_output = sigmoid(hidden_layer_input)\n\n    output_layer_input = np.dot(hidden_layer_output, weights_hidden_output) + bias_output\n    predicted_output = sigmoid(output_layer_input)\n\n    # Backward pass\n    error = outputs - predicted_output\n    d_predicted_output = error * sigmoid_derivative(predicted_output)\n\n    error_hidden_layer = d_predicted_output.dot(weights_hidden_output.T)\n    d_hidden_layer = error_hidden_layer * sigmoid_derivative(hidden_layer_output)\n\n    # Update weights and biases\n    weights_hidden_output += hidden_layer_output.T.dot(d_predicted_output) * learning_rate\n    weights_input_hidden += inputs.T.dot(d_hidden_layer) * learning_rate\n    bias_output += np.sum(d_predicted_output, axis=0, keepdims=True) * learning_rate\n    bias_hidden += np.sum(d_hidden_layer, axis=0, keepdims=True) * learning_rate\n\n# Results\nprint(\"Final Predicted Output:\")\nprint(predicted_output)\n</code></pre>"},{"location":"Learning_resources/Deep%20Learning/Backpropagation/#diagram-backpropagation-workflow","title":"Diagram: Backpropagation Workflow","text":"<pre><code>graph TD\n    A[Inputs] --&gt; B[Forward Pass]\n    B --&gt; C[Compute Loss]\n    C --&gt; D[Backward Pass]\n    D --&gt; E[Compute Gradients]\n    E --&gt; F[Update Weights and Biases]\n    F --&gt; B</code></pre>"},{"location":"Learning_resources/Deep%20Learning/Backpropagation/#key-points","title":"Key Points","text":"<ol> <li>Gradient Descent: Backpropagation relies on gradient descent to minimize the loss function.</li> <li>Chain Rule: Gradients are computed using the chain rule of calculus.</li> <li>Iterative Process: Weights and biases are updated iteratively until the loss converges.</li> </ol> <p>Backpropagation is the backbone of neural network training, enabling models to learn from data and improve performance over time.</p>"},{"location":"Learning_resources/Deep%20Learning/CNN/","title":"Convolutional Neural Networks (CNN) - A Detailed Explanation","text":"<p>Convolutional Neural Networks (CNNs) are a class of deep learning models specifically designed for tasks involving spatial data, such as images. They are widely used in image recognition, object detection, and other computer vision tasks.</p>"},{"location":"Learning_resources/Deep%20Learning/CNN/#what-is-a-cnn","title":"What is a CNN?","text":"<p>A CNN is a type of neural network that leverages the spatial structure of data. It uses convolutional layers to extract features from input images, pooling layers to reduce dimensions, and fully connected layers to perform classification or regression.</p>"},{"location":"Learning_resources/Deep%20Learning/CNN/#_1","title":"Convolutional Neural Networks (CNN) - A Detailed Explanation","text":""},{"location":"Learning_resources/Deep%20Learning/CNN/#components-of-a-cnn","title":"Components of a CNN","text":""},{"location":"Learning_resources/Deep%20Learning/CNN/#1-convolutional-layer","title":"1. Convolutional Layer","text":"<p>This layer applies a set of filters (kernels) to the input image to extract features like edges, textures, or patterns.</p>"},{"location":"Learning_resources/Deep%20Learning/CNN/#formula","title":"Formula:","text":"<p>The convolution operation can be expressed as:</p> \\[ (f * g)(t) = \\int f(a)g(t - a)da \\] <p>In discrete form:</p> \\[ y[i] = \\sum_{j} x[j] \\cdot w[i-j] \\]"},{"location":"Learning_resources/Deep%20Learning/CNN/#code-example","title":"Code Example:","text":"<pre><code>import torch\nimport torch.nn as nn\n\n# Example Convolution Layer\nconv_layer = nn.Conv2d(in_channels=1, out_channels=3, kernel_size=3, stride=1, padding=1)\ninput_image = torch.rand(1, 1, 28, 28)  # Batch size, Channels, Height, Width\noutput = conv_layer(input_image)\nprint(output.shape)  # Output shape: (1, 3, 28, 28)\n</code></pre>"},{"location":"Learning_resources/Deep%20Learning/CNN/#diagram","title":"Diagram:","text":"<pre><code>graph TD\n    X1[\"Input Image\"] --&gt; X2[\"Filter\"] --&gt; X3[\"Feature Map\"]</code></pre>"},{"location":"Learning_resources/Deep%20Learning/CNN/#2-pooling-layer","title":"2. Pooling Layer","text":"<p>This layer reduces the spatial dimensions of the feature maps, retaining important features while discarding redundant information.</p>"},{"location":"Learning_resources/Deep%20Learning/CNN/#types","title":"Types:","text":"<ul> <li>Max Pooling</li> <li>Average Pooling</li> </ul>"},{"location":"Learning_resources/Deep%20Learning/CNN/#code-example_1","title":"Code Example:","text":"<pre><code># Example Pooling Layer\npool_layer = nn.MaxPool2d(kernel_size=2, stride=2)\npooled_output = pool_layer(output)\nprint(pooled_output.shape)  # Output shape: (1, 3, 14, 14)\n</code></pre>"},{"location":"Learning_resources/Deep%20Learning/CNN/#diagram_1","title":"Diagram:","text":"<p><pre><code>Feature Map ---&gt; [Pooling] ---&gt; Reduced Feature Map\n</code></pre> Max Pooling</p> <p></p> <p>Average Pooling</p>"},{"location":"Learning_resources/Deep%20Learning/CNN/#_2","title":"Convolutional Neural Networks (CNN) - A Detailed Explanation","text":""},{"location":"Learning_resources/Deep%20Learning/CNN/#3-fully-connected-layer","title":"3. Fully Connected Layer","text":"<p>This layer connects the extracted features to the final output for classification or regression tasks.</p>"},{"location":"Learning_resources/Deep%20Learning/CNN/#code-example_2","title":"Code Example:","text":"<pre><code># Fully Connected Layer\nfc_layer = nn.Linear(3 * 14 * 14, 10)  # Example: Flatten input and map to 10 classes\nflattened_output = pooled_output.view(1, -1)\nfinal_output = fc_layer(flattened_output)\nprint(final_output.shape)  # Output shape: (1, 10)\n</code></pre>"},{"location":"Learning_resources/Deep%20Learning/CNN/#diagram_2","title":"Diagram:","text":"<pre><code>Flattened Features ---&gt; Fully Connected Layer ---&gt; Output\n</code></pre>"},{"location":"Learning_resources/Deep%20Learning/CNN/#building-a-cnn-with-pytorch","title":"Building a CNN with PyTorch","text":"<p>Below is an example of building a simple CNN for digit classification (MNIST dataset).</p>"},{"location":"Learning_resources/Deep%20Learning/CNN/#full-code-example","title":"Full Code Example:","text":"<pre><code>import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torchvision import datasets, transforms\nfrom torch.utils.data import DataLoader\n\n# Define CNN Model\nclass SimpleCNN(nn.Module):\n    def __init__(self):\n        super(SimpleCNN, self).__init__()\n        self.conv1 = nn.Conv2d(1, 16, kernel_size=3, stride=1, padding=1)\n        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)\n        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)\n        self.fc1 = nn.Linear(32 * 7 * 7, 128)\n        self.fc2 = nn.Linear(128, 10)\n\n    def forward(self, x):\n        x = self.pool(torch.relu(self.conv1(x)))\n        x = self.pool(torch.relu(self.conv2(x)))\n        x = x.view(-1, 32 * 7 * 7)  # Flatten\n        x = torch.relu(self.fc1(x))\n        x = self.fc2(x)\n        return x\n\n# Load Data\ntransform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))])\ntrain_dataset = datasets.MNIST(root='./data', train=True, download=True, transform=transform)\ntrain_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)\n\n# Initialize Model, Loss, and Optimizer\nmodel = SimpleCNN()\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n\n# Training Loop\nfor epoch in range(5):\n    for images, labels in train_loader:\n        optimizer.zero_grad()\n        outputs = model(images)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n    print(f\"Epoch {epoch+1}, Loss: {loss.item():.4f}\")\n\nprint(\"Training Complete!\")\n</code></pre>"},{"location":"Learning_resources/Deep%20Learning/CNN/#visualizing-filters-and-feature-maps","title":"Visualizing Filters and Feature Maps","text":""},{"location":"Learning_resources/Deep%20Learning/CNN/#visualizing-filters","title":"Visualizing Filters","text":"<p>The filters in the first layer of a CNN can be visualized to understand what features the network is learning.</p>"},{"location":"Learning_resources/Deep%20Learning/CNN/#code-example_3","title":"Code Example:","text":"<pre><code>filters = model.conv1.weight.data\nprint(filters.shape)  # Shape: (16, 1, 3, 3)\n</code></pre>"},{"location":"Learning_resources/Deep%20Learning/CNN/#visualizing-feature-maps","title":"Visualizing Feature Maps","text":"<p>Feature maps represent the activation outputs of convolutional layers.</p>"},{"location":"Learning_resources/Deep%20Learning/CNN/#code-example_4","title":"Code Example:","text":"<pre><code>feature_maps = model.conv1(input_image)\nprint(feature_maps.shape)  # Shape: (1, 16, 28, 28)\n</code></pre>"},{"location":"Learning_resources/Deep%20Learning/CNN/#summary","title":"Summary","text":"<p>A CNN combines:</p> <ul> <li>Convolutional Layers to extract spatial features.</li> <li>Pooling Layers to reduce dimensionality.</li> <li>Fully Connected Layers to perform classification or regression.</li> </ul> <p>This step-by-step guide covered:</p> <ol> <li>Theoretical foundations.</li> <li>Code examples using PyTorch.</li> <li>Visualization of filters and feature maps.</li> </ol> <p>Explore CNNs and unlock the potential of deep learning in computer vision!</p>"},{"location":"Learning_resources/Deep%20Learning/Neural_Network/","title":"Neural Network","text":""},{"location":"Learning_resources/Deep%20Learning/Neural_Network/#neural-networks-a-detailed-explanation","title":"Neural Networks: A Detailed Explanation","text":"<p>A neural network is a computational model inspired by the human brain. It consists of interconnected layers of nodes (neurons) designed to process input data and generate predictions or classifications. Neural networks are at the core of deep learning, enabling machines to perform tasks like image recognition, natural language processing, and more.</p>"},{"location":"Learning_resources/Deep%20Learning/Neural_Network/#components-of-a-neural-network","title":"Components of a Neural Network","text":"<ol> <li> <p>Neurons: The basic units of computation in a neural network. Each neuron receives inputs, applies a weight and bias, and produces an output through an activation function.</p> </li> <li> <p>Layers:</p> <ul> <li>Input Layer: Accepts input data (e.g., features like pixels in an image).</li> <li>Hidden Layers: Perform computations and extract patterns from the input data.</li> <li>Output Layer: Produces the final result (e.g., classification or regression).</li> </ul> </li> <li> <p>Weights and Biases: Parameters that are adjusted during training to optimize the network's performance.</p> </li> <li> <p>Activation Function: Adds non-linearity to the network, enabling it to learn complex patterns.     Common activation functions: Sigmoid, ReLU, Tanh.</p> </li> <li> <p>Loss Function: Measures the difference between predicted and actual values, guiding the network's learning process.</p> </li> <li> <p>Optimizer: Updates weights and biases to minimize the loss function (e.g., Stochastic Gradient Descent, Adam).</p> </li> </ol>"},{"location":"Learning_resources/Deep%20Learning/Neural_Network/#how-a-single-neuron-works","title":"How a Single Neuron Works","text":"<p>A single neuron performs the following operations:</p> <ol> <li> <p>Weighted Sum:    Each input is multiplied by its respective weight, and the results are summed. A bias term is added:</p> \\[ z = \\sum_{i=1}^{n} w_i x_i + b \\] </li> <li> <p>Activation:    The weighted sum is passed through an activation function to produce the output:</p> \\[ a = \\sigma(z) \\] </li> </ol>"},{"location":"Learning_resources/Deep%20Learning/Neural_Network/#example-single-neuron-implementation","title":"Example: Single Neuron Implementation","text":"<pre><code>import numpy as np\n\n# Input data (features)\ninputs = np.array([1.0, 2.0, 3.0])\n\n# Weights and bias\nweights = np.array([0.5, -0.6, 0.8])\nbias = 0.1\n\n# Activation function (ReLU in this case)\ndef relu(x):\n    return max(0, x)\n\n# Compute the weighted sum\nz = np.dot(inputs, weights) + bias\n\n# Apply activation function\noutput = relu(z)\n\nprint(f\"Weighted Sum (z): {z}\")\nprint(f\"Neuron Output: {output}\")\n</code></pre>"},{"location":"Learning_resources/Deep%20Learning/Neural_Network/#diagram-of-a-single-neuron","title":"Diagram of a Single Neuron","text":"<pre><code>graph TD\n    X1[\"Input X1\"] --&gt; W1[\"Weight W1\"] --&gt; SUM[\"\u03a3\"]\n    X2[\"Input X2\"] --&gt; W2[\"Weight W2\"] --&gt; SUM[\"\u03a3\"]\n    X3[\"Input X3\"] --&gt; W3[\"Weight W3\"] --&gt; SUM[\"\u03a3\"]\n    SUM --&gt; B[\"Bias b\"] --&gt; ACTIVATION[\"Activation Function\"]\n    ACTIVATION --&gt; OUTPUT[\"Output\"]</code></pre>"},{"location":"Learning_resources/Deep%20Learning/Neural_Network/#building-a-simple-neural-network","title":"Building a Simple Neural Network","text":"<p>Here is an example of a basic feedforward neural network with one hidden layer using Python and NumPy:</p>"},{"location":"Learning_resources/Deep%20Learning/Neural_Network/#example-code","title":"Example Code","text":"<pre><code>import numpy as np\n\n# Sigmoid activation function\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n\n# Derivative of the sigmoid function\ndef sigmoid_derivative(x):\n    return x * (1 - x)\n\n# Input data (2 samples, 2 features)\ninputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\n\n# Expected outputs (XOR problem)\noutputs = np.array([[0], [1], [1], [0]])\n\n# Initialize weights and biases\nnp.random.seed(42)\nweights_input_hidden = np.random.uniform(-1, 1, (2, 2))\nweights_hidden_output = np.random.uniform(-1, 1, (2, 1))\nbias_hidden = np.random.uniform(-1, 1, (1, 2))\nbias_output = np.random.uniform(-1, 1, (1, 1))\n\n# Training parameters\nlearning_rate = 0.1\nepochs = 10000\n\n# Training loop\nfor epoch in range(epochs):\n    # Forward pass\n    hidden_layer_input = np.dot(inputs, weights_input_hidden) + bias_hidden\n    hidden_layer_output = sigmoid(hidden_layer_input)\n\n    final_layer_input = np.dot(hidden_layer_output, weights_hidden_output) + bias_output\n    final_output = sigmoid(final_layer_input)\n\n    # Backpropagation\n    error = outputs - final_output\n    d_output = error * sigmoid_derivative(final_output)\n\n    error_hidden_layer = d_output.dot(weights_hidden_output.T)\n    d_hidden_layer = error_hidden_layer * sigmoid_derivative(hidden_layer_output)\n\n    # Update weights and biases\n    weights_hidden_output += hidden_layer_output.T.dot(d_output) * learning_rate\n    weights_input_hidden += inputs.T.dot(d_hidden_layer) * learning_rate\n    bias_output += np.sum(d_output, axis=0, keepdims=True) * learning_rate\n    bias_hidden += np.sum(d_hidden_layer, axis=0, keepdims=True) * learning_rate\n\n# Testing\nprint(\"Final Output:\")\nprint(final_output)\n</code></pre>"},{"location":"Learning_resources/Deep%20Learning/Neural_Network/#diagram-of-a-simple-neural-network","title":"Diagram of a Simple Neural Network","text":"<pre><code>graph TD\n    Input1[\"Input 1\"] --&gt; Hidden1[\"Hidden Neuron 1\"]\n    Input1 --&gt; Hidden2[\"Hidden Neuron 2\"]\n    Input2[\"Input 2\"] --&gt; Hidden1\n    Input2 --&gt; Hidden2\n    Hidden1 --&gt; Output[\"Output Neuron\"]\n    Hidden2 --&gt; Output</code></pre>"},{"location":"Learning_resources/Deep%20Learning/Neural_Network/#key-points","title":"Key Points","text":"<ul> <li>Forward Pass: Inputs are propagated through the network to produce outputs.</li> <li>Backward Pass: Errors are backpropagated to update weights and biases using the gradient descent algorithm.</li> <li>Training: Involves iteratively optimizing weights and biases to minimize the error.</li> </ul>"},{"location":"Learning_resources/Deep%20Learning/Neural_Network/#applications","title":"Applications","text":"<ul> <li>Image classification</li> <li>Speech recognition</li> <li>Language translation</li> <li>Autonomous vehicles</li> <li>Predictive analytics</li> </ul> <p>Neural networks are fundamental to modern AI, enabling machines to solve complex, non-linear problems effectively.</p>"},{"location":"Learning_resources/Deep%20Learning/Optimizers/","title":"Optimizers","text":""},{"location":"Learning_resources/Deep%20Learning/Optimizers/#optimization-algorithms-in-neural-networks-detailed-overview","title":"Optimization Algorithms in Neural Networks: Detailed Overview","text":"<p>Optimization algorithms play a crucial role in training neural networks by minimizing the loss function, which quantifies the error between the predicted and actual outputs. The goal of these algorithms is to adjust the model\u2019s parameters (weights and biases) to achieve the best possible performance.</p>"},{"location":"Learning_resources/Deep%20Learning/Optimizers/#gradient-based-optimization-algorithms","title":"Gradient-Based Optimization Algorithms","text":"<p>These algorithms rely on gradients to optimize the loss function. Gradients are computed using backpropagation.</p>"},{"location":"Learning_resources/Deep%20Learning/Optimizers/#1-gradient-descent-gd","title":"1. Gradient Descent (GD)","text":"<ul> <li>Description: Updates the weights by calculating the gradient of the loss function for the entire training dataset.</li> <li>Update Rule:</li> </ul> \\[ w \\gets w - \\eta \\frac{\\partial L}{\\partial w} \\] <p>where:</p> <ul> <li>\\( \\eta \\): Learning rate.</li> <li>\\( \\frac{\\partial L}{\\partial w} \\): Gradient of the loss \\( L \\) with respect to \\( w \\).</li> </ul> <p></p> <p>Advantages:</p> <ul> <li>Simple and effective for convex functions.</li> </ul> <p>Disadvantages:</p> <ul> <li>Computationally expensive for large datasets.</li> <li>Requires the entire dataset for each update.</li> </ul>"},{"location":"Learning_resources/Deep%20Learning/Optimizers/#2-stochastic-gradient-descent-sgd","title":"2. Stochastic Gradient Descent (SGD)","text":"<ul> <li>Description: Updates the weights using a single randomly selected training example at each step.</li> <li> <p>Update Rule:</p> \\[ w \\gets w - \\eta \\frac{\\partial L_i}{\\partial w} \\] </li> </ul> <p>where \\( L_i \\) is the loss for a single data point.</p> <p>Advantages:</p> <ul> <li>Faster updates.</li> <li>Can escape local minima due to randomness.</li> </ul> <p>Disadvantages:</p> <ul> <li>High variance in updates, leading to noisy convergence.</li> </ul>"},{"location":"Learning_resources/Deep%20Learning/Optimizers/#3-mini-batch-gradient-descent","title":"3. Mini-Batch Gradient Descent","text":"<ul> <li>Description: Combines the advantages of GD and SGD by using small batches of data for each update.</li> <li>Update Rule:</li> </ul> \\[ w \\gets w - \\eta \\frac{1}{m} \\sum_{i=1}^{m} \\frac{\\partial L_i}{\\partial w} \\] <p>where \\( m \\) is the batch size.</p> <p>Advantages:     - Faster convergence than GD.     - Reduces noise compared to SGD.</p> <p>Disadvantages:     - Requires tuning the batch size.</p>"},{"location":"Learning_resources/Deep%20Learning/Optimizers/#4-momentum","title":"4. Momentum","text":"<ul> <li>Description: Adds a fraction of the previous update to the current update to accelerate convergence.</li> <li>Update Rule:</li> </ul> \\[ v_t = \\gamma v_{t-1} + \\eta \\frac{\\partial L}{\\partial w} \\] \\[ w \\gets w - v_t \\] <p>where \\( \\gamma \\) is the momentum factor (e.g., 0.9).</p> <p>Advantages:</p> <ul> <li>Speeds up convergence in directions with consistent gradients.</li> <li>Reduces oscillations.</li> </ul>"},{"location":"Learning_resources/Deep%20Learning/Optimizers/#5-nesterov-accelerated-gradient-nag","title":"5. Nesterov Accelerated Gradient (NAG)","text":"<ul> <li>Description: A variation of Momentum that computes the gradient at the approximate future position of the parameters.</li> <li>Update Rule:</li> </ul> \\[ v_t = \\gamma v_{t-1} + \\eta \\frac{\\partial L}{\\partial w_t - \\gamma v_{t-1}} \\] \\[ w \\gets w - v_t \\] <p>Advantages:   - Faster convergence than Momentum.</p>"},{"location":"Learning_resources/Deep%20Learning/Optimizers/#6-adagrad","title":"6. Adagrad","text":"<ul> <li>Description: Adapts the learning rate for each parameter based on the sum of squared gradients.</li> <li>Update Rule:</li> </ul> \\[ w \\gets w - \\frac{\\eta}{\\sqrt{G_t + \\epsilon}} \\frac{\\partial L}{\\partial w} \\] <p>where \\( G_t \\) is the sum of squared gradients and \\( \\epsilon \\) is a small constant.</p> <p>Advantages:   - Works well for sparse data.</p> <p>Disadvantages:   - Learning rate may become too small over time.</p>"},{"location":"Learning_resources/Deep%20Learning/Optimizers/#7-rmsprop","title":"7. RMSProp","text":"<ul> <li>Description: Modifies Adagrad by using an exponentially decaying average of squared gradients.</li> <li>Update Rule:</li> </ul> \\[ G_t = \\beta G_{t-1} + (1 - \\beta) \\frac{\\partial L}{\\partial w}^2 \\] \\[ w \\gets w - \\frac{\\eta}{\\sqrt{G_t + \\epsilon}} \\frac{\\partial L}{\\partial w} \\] <p>where \\( \\beta \\) is the decay rate.</p> <p>Advantages:</p> <ul> <li>Suitable for non-stationary objectives.</li> <li>Prevents learning rates from becoming too small.</li> </ul>"},{"location":"Learning_resources/Deep%20Learning/Optimizers/#8-adam-adaptive-moment-estimation","title":"8. Adam (Adaptive Moment Estimation)","text":"<ul> <li>Description: Combines Momentum and RMSProp by maintaining both moving averages of gradients and their squared values.</li> <li>Update Rule:</li> </ul> \\[ m_t = \\beta_1 m_{t-1} + (1 - \\beta_1) \\frac{\\partial L}{\\partial w} \\] \\[ v_t = \\beta_2 v_{t-1} + (1 - \\beta_2) \\left( \\frac{\\partial L}{\\partial w} \\right)^2 \\] \\[ w \\gets w - \\frac{\\eta}{\\sqrt{\\hat{v}_t} + \\epsilon} \\hat{m}_t \\] <p>where:   - \\( \\hat{m}_t \\) and \\( \\hat{v}_t \\) are bias-corrected estimates of \\( m_t \\) and \\( v_t \\).</p> <p>Advantages:</p> <ul> <li>Works well for most problems.</li> <li>Combines benefits of Momentum and RMSProp.</li> </ul>"},{"location":"Learning_resources/Deep%20Learning/Optimizers/#comparison-of-optimization-algorithms","title":"Comparison of Optimization Algorithms","text":"Algorithm Learning Rate Memory Requirement Convergence Speed Suitable for Large Data Gradient Descent Fixed Low Slow No SGD Fixed Low Fast Yes Momentum Fixed Low Faster Yes NAG Fixed Low Faster Yes Adagrad Adaptive Moderate Moderate Yes RMSProp Adaptive Moderate Moderate Yes Adam Adaptive High Fast Yes"},{"location":"Learning_resources/Deep%20Learning/Optimizers/#code-example-using-adam-optimizer-in-pytorch","title":"Code Example: Using Adam Optimizer in PyTorch","text":"<p>Here\u2019s an example of implementing an optimizer in PyTorch:</p> <pre><code>import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\n# Define a simple model\nmodel = nn.Linear(2, 1)\n\n# Define loss function\ncriterion = nn.MSELoss()\n\n# Define optimizer (Adam)\noptimizer = optim.Adam(model.parameters(), lr=0.01)\n\n# Dummy data\ninputs = torch.tensor([[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]])\ntargets = torch.tensor([[3.0], [7.0], [11.0]])\n\n# Training loop\nfor epoch in range(100):\n    optimizer.zero_grad()  # Clear gradients\n    outputs = model(inputs)  # Forward pass\n    loss = criterion(outputs, targets)  # Compute loss\n    loss.backward()  # Backpropagation\n    optimizer.step()  # Update parameters\n\n    if epoch % 10 == 0:\n        print(f'Epoch {epoch}, Loss: {loss.item()}')\n</code></pre>"},{"location":"Learning_resources/Deep%20Learning/Optimizers/#diagram-optimization-workflow","title":"Diagram: Optimization Workflow","text":"<pre><code>graph TD\n    A[Initialize Weights and Biases] --&gt; B[Compute Gradients]\n    B --&gt; C[Update Weights Using Optimization Rule]\n    C --&gt; D[Check Stopping Condition]\n    D --&gt;|Condition Met| E[End]\n    D --&gt;|Condition Not Met| B[Compute Gradients]</code></pre>"},{"location":"Learning_resources/Deep%20Learning/Optimizers/#conclusion","title":"Conclusion","text":"<p>Optimization algorithms are the backbone of neural network training. Choosing the right algorithm depends on the problem, data size, and desired computational efficiency. Among all, Adam is the most widely used due to its adaptive nature and robustness.</p>"},{"location":"Learning_resources/Deep%20Learning/RNN/","title":"Understanding Recurrent Neural Networks (RNN)","text":""},{"location":"Learning_resources/Deep%20Learning/RNN/#detailed-architecture-of-recurrent-neural-networks-rnn","title":"Detailed Architecture of Recurrent Neural Networks (RNN)","text":"<p>Recurrent Neural Networks (RNNs) are a class of artificial neural networks designed to model sequential data. Unlike feedforward neural networks, RNNs have connections that form directed cycles, allowing them to maintain a hidden state and remember previous inputs in the sequence. This characteristic makes RNNs well-suited for tasks involving sequences, such as time series prediction, natural language processing, and speech recognition.</p>"},{"location":"Learning_resources/Deep%20Learning/RNN/#core-components-of-rnn","title":"Core Components of RNN","text":""},{"location":"Learning_resources/Deep%20Learning/RNN/#1-input","title":"1. Input","text":"<p>Each time step of the sequence provides an input vector \\( x_t \\) to the RNN. For instance, in a sentence, each word could be represented as a vector (e.g., word embeddings).</p> <ul> <li>Input at Time \\( t \\): \\( x_t \\)</li> <li>Example: For a sequence of words [\"I\", \"love\", \"RNN\"], \\( x_t \\) could represent the embedding of each word.</li> </ul>"},{"location":"Learning_resources/Deep%20Learning/RNN/#2-hidden-state","title":"2. Hidden State","text":"<p>The hidden state \\( h_t \\) serves as the memory of the network. It captures information about the sequence seen so far. At each time step, the hidden state is updated based on the current input \\( x_t \\) and the previous hidden state \\( h_{t-1} \\).</p> <ul> <li>Equation:</li> </ul> \\[ h_t = f(W_{xh}x_t + W_{hh}h_{t-1} + b_h) \\] <p>Where:</p> <ul> <li>\\( W_{xh} \\): Weight matrix for the input</li> <li>\\( W_{hh} \\): Weight matrix for the hidden state</li> <li>\\( b_h \\): Bias vector</li> <li>\\( f \\): Activation function (e.g., tanh)</li> </ul>"},{"location":"Learning_resources/Deep%20Learning/RNN/#3-output","title":"3. Output","text":"<p>The output \\( y_t \\) at each time step depends on the current hidden state \\( h_t \\).</p> <ul> <li> <p>Equation:</p> \\[ y_t = g(W_{hy}h_t + b_y) \\] </li> </ul> <p>Where:</p> <ul> <li>\\( W_{hy} \\): Weight matrix for the output</li> <li>\\( b_y \\): Bias vector</li> <li>\\( g \\): Activation function (e.g., softmax for classification)</li> </ul>"},{"location":"Learning_resources/Deep%20Learning/RNN/#4-recurrent-loop","title":"4. Recurrent Loop","text":"<p>The key feature of an RNN is its recurrent loop, where the hidden state from the previous time step \\( h_{t-1} \\) is fed back into the network at the current time step \\( t \\). This recurrence allows the RNN to maintain a temporal context.</p>"},{"location":"Learning_resources/Deep%20Learning/RNN/#rnn-architecture-diagram","title":"RNN Architecture Diagram","text":"<p>Below is a step-by-step breakdown of how RNN processes sequences:</p> <ol> <li>At time \\( t = 0 \\):</li> <li>Input \\( x_0 \\) is fed into the network.</li> <li>Initial hidden state \\( h_0 \\) is typically initialized to zeros.</li> <li> <p>The hidden state \\( h_1 \\) is computed and used in the next step.</p> </li> <li> <p>At time \\( t = 1 \\):</p> </li> <li>Input \\( x_1 \\) and \\( h_1 \\) are used to compute \\( h_2 \\).</li> <li> <p>The process repeats for all time steps.</p> </li> <li> <p>At the final time step \\( T \\):</p> </li> <li>Output \\( y_T \\) is produced based on the last hidden state \\( h_T \\).</li> </ol>"},{"location":"Learning_resources/Deep%20Learning/RNN/#unrolled-rnn","title":"Unrolled RNN","text":"<p>To visualize the recurrent nature, an RNN can be \"unrolled\" across time steps. For a sequence of \\( T \\) steps:</p> <pre><code>graph LR\n    x_0 --&gt; h_1 --&gt; x_1 --&gt; h_2 --&gt; x_2 --&gt; h_T --&gt; output</code></pre>"},{"location":"Learning_resources/Deep%20Learning/RNN/#step-by-step-computational-flow","title":"Step-by-Step Computational Flow","text":""},{"location":"Learning_resources/Deep%20Learning/RNN/#1-input-embedding","title":"1. Input Embedding","text":"<p>The input \\( x_t \\) (e.g., a word in a sentence) is converted into a numerical vector using techniques like one-hot encoding or word embeddings.</p>"},{"location":"Learning_resources/Deep%20Learning/RNN/#2-hidden-state-update","title":"2. Hidden State Update","text":"<p>The hidden state \\( h_t \\) is computed using:</p> \\[ h_t = \\tanh(W_{xh}x_t + W_{hh}h_{t-1} + b_h) \\] <ul> <li>Activation Function: Typically <code>tanh</code> or <code>ReLU</code>.</li> </ul>"},{"location":"Learning_resources/Deep%20Learning/RNN/#3-output-generation","title":"3. Output Generation","text":"<p>The output \\( y_t \\) at each time step is calculated using:</p> \\[ y_t = \\text{softmax}(W_{hy}h_t + b_y) \\] <ul> <li>For classification tasks, softmax normalizes the outputs into probabilities.</li> </ul>"},{"location":"Learning_resources/Deep%20Learning/RNN/#challenges-in-rnns","title":"Challenges in RNNs","text":""},{"location":"Learning_resources/Deep%20Learning/RNN/#1-vanishing-and-exploding-gradients","title":"1. Vanishing and Exploding Gradients","text":"<ul> <li>RNNs struggle with long sequences due to vanishing or exploding gradients during backpropagation.</li> <li>Solution: Use architectures like LSTMs or GRUs.</li> </ul>"},{"location":"Learning_resources/Deep%20Learning/RNN/#2-limited-memory","title":"2. Limited Memory","text":"<ul> <li>The hidden state of RNNs retains only a limited amount of information from the past.</li> <li>Solution: LSTMs/GRUs provide a gating mechanism to control memory flow.</li> </ul>"},{"location":"Learning_resources/Deep%20Learning/RNN/#variants-of-rnn","title":"Variants of RNN","text":""},{"location":"Learning_resources/Deep%20Learning/RNN/#1-bidirectional-rnn-birnn","title":"1. Bidirectional RNN (BiRNN)","text":"<ul> <li>Processes input sequences in both forward and backward directions.</li> <li>Useful for tasks like text translation and speech recognition.</li> </ul>"},{"location":"Learning_resources/Deep%20Learning/RNN/#2-long-short-term-memory-lstm","title":"2. Long Short-Term Memory (LSTM)","text":"<ul> <li>Enhances RNNs with memory cells and gating mechanisms.</li> <li>Gates: Input gate, Forget gate, Output gate.</li> </ul>"},{"location":"Learning_resources/Deep%20Learning/RNN/#3-gated-recurrent-unit-gru","title":"3. Gated Recurrent Unit (GRU)","text":"<ul> <li>A simplified version of LSTM with fewer parameters.</li> </ul>"},{"location":"Learning_resources/Deep%20Learning/RNN/#applications-of-rnns","title":"Applications of RNNs","text":"<ol> <li> <p>Time Series Forecasting:    Predicting stock prices, weather patterns, or energy consumption.</p> </li> <li> <p>Natural Language Processing (NLP):</p> </li> <li>Sentiment analysis</li> <li>Machine translation</li> <li> <p>Text generation</p> </li> <li> <p>Speech and Audio Processing:    Converting speech to text or generating audio.</p> </li> <li> <p>Video Analysis:    Action recognition and caption generation.</p> </li> </ol>"},{"location":"Learning_resources/Deep%20Learning/RNN/#code-example-simple-rnn-implementation","title":"Code Example: Simple RNN Implementation","text":"<pre><code>import torch\nimport torch.nn as nn\n\n# Define RNN Model\nclass RNNModel(nn.Module):\n    def __init__(self, input_size, hidden_size, output_size):\n        super(RNNModel, self).__init__()\n        self.rnn = nn.RNN(input_size, hidden_size, batch_first=True)\n        self.fc = nn.Linear(hidden_size, output_size)\n\n    def forward(self, x):\n        h0 = torch.zeros(1, x.size(0), hidden_size)  # Initialize hidden state\n        out, _ = self.rnn(x, h0)  # RNN output\n        out = self.fc(out[:, -1, :])  # Fully connected layer for output\n        return out\n\n# Parameters\ninput_size = 1\nhidden_size = 10\noutput_size = 1\nsequence_length = 5\nbatch_size = 3\n\n# Dummy Data\nx = torch.randn(batch_size, sequence_length, input_size)\ny = torch.randn(batch_size, output_size)\n\n# Initialize Model\nmodel = RNNModel(input_size, hidden_size, output_size)\ncriterion = nn.MSELoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.01)\n\n# Training Loop\nfor epoch in range(100):\n    optimizer.zero_grad()\n    output = model(x)\n    loss = criterion(output, y)\n    loss.backward()\n    optimizer.step()\n\n    if epoch % 10 == 0:\n        print(f\"Epoch {epoch}, Loss: {loss.item():.4f}\")\n</code></pre>"},{"location":"Learning_resources/Deep%20Learning/RNN/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>RNNs: Handle sequential data by maintaining a hidden state across time steps.</li> <li>Challenges: Vanishing gradients and limited memory for long sequences.</li> <li>Solutions: LSTMs and GRUs are advanced RNN architectures that address these challenges.</li> <li>Applications: Time series prediction, text processing, speech recognition.</li> </ul>"},{"location":"Learning_resources/Deep%20Learning/RNN/#mastering-rnns-is-essential-for-working-with-sequential-data-their-variants-like-lstms-and-grus-expand-their-capabilities-and-applications","title":"Mastering RNNs is essential for working with sequential data. Their variants, like LSTMs and GRUs, expand their capabilities and applications.","text":""},{"location":"Learning_resources/Deep%20Learning/RNN/#key-concepts-of-rnns","title":"Key Concepts of RNNs","text":""},{"location":"Learning_resources/Deep%20Learning/RNN/#sequential-data","title":"Sequential Data","text":"<p>RNNs excel in handling sequential data where the order of data points matters. Examples include: - Time Series Data: Stock prices, weather data - Natural Language Processing (NLP): Sentiment analysis, machine translation - Speech Recognition: Audio-to-text conversion</p>"},{"location":"Learning_resources/Deep%20Learning/RNN/#advanced-rnn-architectures-lstm-and-gru","title":"Advanced RNN Architectures: LSTM and GRU","text":"<p>To address the limitations of vanilla RNNs, such as the vanishing gradient problem and the inability to model long-term dependencies effectively, advanced RNN architectures like Long Short-Term Memory (LSTM) and Gated Recurrent Unit (GRU) were developed. These architectures use gating mechanisms to control the flow of information, enabling them to remember or forget information over long sequences.</p>"},{"location":"Learning_resources/Deep%20Learning/RNN/#1-long-short-term-memory-lstm","title":"1. Long Short-Term Memory (LSTM)","text":"<p>LSTMs were introduced by Hochreiter and Schmidhuber in 1997 to address the vanishing gradient problem. They have a more complex architecture than vanilla RNNs, incorporating multiple gates to manage information flow.</p>"},{"location":"Learning_resources/Deep%20Learning/RNN/#key-components-of-lstm","title":"Key Components of LSTM","text":"<ol> <li>Cell State (\\( C_t \\)):</li> <li>Acts as a memory track, carrying information across time steps.</li> <li> <p>Information is added or removed from this memory through carefully regulated gates.</p> </li> <li> <p>Gates:</p> </li> <li>LSTMs have three key gates that control the information flow:<ul> <li>Forget Gate (\\( f_t \\))</li> <li>Input Gate (\\( i_t \\))</li> <li>Output Gate (\\( o_t \\))</li> </ul> </li> </ol>"},{"location":"Learning_resources/Deep%20Learning/RNN/#lstm-workflow","title":"LSTM Workflow","text":"<p>At each time step \\( t \\), the LSTM cell performs the following operations:</p>"},{"location":"Learning_resources/Deep%20Learning/RNN/#1-forget-gate-f_t","title":"1. Forget Gate (\\( f_t \\)):","text":"<p>Decides which information to discard from the previous cell state.</p> \\[ f_t = \\sigma(W_f \\cdot [h_{t-1}, x_t] + b_f) \\] <ul> <li>\\( W_f \\): Weight matrix for the forget gate.</li> <li>\\( \\sigma \\): Sigmoid activation function, ensuring \\( f_t \\in [0, 1] \\).</li> </ul>"},{"location":"Learning_resources/Deep%20Learning/RNN/#2-input-gate-i_t-and-candidate-cell-state-tildec_t","title":"2. Input Gate (\\( i_t \\)) and Candidate Cell State (\\( \\tilde{C}_t \\)):","text":"<p>Determines which information to update in the cell state.</p> \\[ i_t = \\sigma(W_i \\cdot [h_{t-1}, x_t] + b_i) \\] \\[ \\tilde{C}_t = \\tanh(W_C \\cdot [h_{t-1}, x_t] + b_C) \\]"},{"location":"Learning_resources/Deep%20Learning/RNN/#3-update-cell-state-c_t","title":"3. Update Cell State (\\( C_t \\)):","text":"<p>Combines the old cell state (\\( C_{t-1} \\)) and the new candidate (\\( \\tilde{C}_t \\)).</p> \\[ C_t = f_t \\odot C_{t-1} + i_t \\odot \\tilde{C}_t \\] <ul> <li>\\( \\odot \\): Element-wise multiplication.</li> </ul>"},{"location":"Learning_resources/Deep%20Learning/RNN/#4-output-gate-o_t-and-hidden-state-h_t","title":"4. Output Gate (\\( o_t \\)) and Hidden State (\\( h_t \\)):","text":"<p>Controls the output information to the next layer or time step.</p> \\[ o_t = \\sigma(W_o \\cdot [h_{t-1}, x_t] + b_o) \\] \\[ h_t = o_t \\odot \\tanh(C_t) \\]"},{"location":"Learning_resources/Deep%20Learning/RNN/#diagram-lstm-architecture","title":"Diagram: LSTM Architecture","text":"Architecture of RNN"},{"location":"Learning_resources/Deep%20Learning/RNN/#2-gated-recurrent-unit-gru","title":"2. Gated Recurrent Unit (GRU)","text":"<p>The GRU, introduced by Cho et al. in 2014, simplifies the LSTM by combining the forget and input gates into a single update gate. GRUs have fewer parameters than LSTMs, making them faster to train while maintaining similar performance for many tasks.</p>"},{"location":"Learning_resources/Deep%20Learning/RNN/#key-components-of-gru","title":"Key Components of GRU","text":"<ol> <li>Update Gate (\\( z_t \\)):</li> <li>Controls the extent to which the hidden state is updated with new information.</li> </ol> \\[ z_t = \\sigma(W_z \\cdot [h_{t-1}, x_t] + b_z) \\] <ol> <li>Reset Gate (\\( r_t \\)):</li> <li>Decides how much of the previous hidden state to forget.</li> </ol> \\[ r_t = \\sigma(W_r \\cdot [h_{t-1}, x_t] + b_r) \\] <ol> <li>Candidate Hidden State (\\( \\tilde{h}_t \\)):</li> <li>Represents the new hidden state based on the reset gate.</li> </ol> \\[ \\tilde{h}_t = \\tanh(W \\cdot [r_t \\odot h_{t-1}, x_t] + b) \\] <ol> <li>Final Hidden State (\\( h_t \\)):</li> <li>Combines the previous hidden state and the candidate hidden state using the update gate.</li> </ol> \\[ h_t = z_t \\odot h_{t-1} + (1 - z_t) \\odot \\tilde{h}_t \\]"},{"location":"Learning_resources/Deep%20Learning/RNN/#diagram-gru-architecture","title":"Diagram: GRU Architecture","text":"<pre><code>flowchart TD\n    subgraph GRU\n        x_t[Input (x_t)] --&gt;|Concat| update_gate[Update Gate (z_t)]\n        h_t_1[Prev Hidden (h_{t-1})] --&gt;|Concat| update_gate\n        update_gate --&gt; candidate_hidden[Candidate (h_t~)]\n        candidate_hidden --&gt; final_hidden[Final Hidden (h_t)]\n        x_t --&gt;|Concat| reset_gate[Reset Gate (r_t)]\n        reset_gate --&gt; candidate_hidden\n    end\n</code></pre>"},{"location":"Learning_resources/Deep%20Learning/RNN/#key-differences-between-lstm-and-gru","title":"Key Differences Between LSTM and GRU","text":"Feature LSTM GRU Number of Gates 3 (Forget, Input, Output) 2 (Update, Reset) Cell State Maintains a separate cell state No separate cell state Complexity More parameters Fewer parameters Training Speed Slower Faster Memory Capacity Can model longer dependencies Slightly less capacity"},{"location":"Learning_resources/Deep%20Learning/RNN/#code-example-lstm-vs-gru-in-pytorch","title":"Code Example: LSTM vs GRU in PyTorch","text":"<pre><code>import torch\nimport torch.nn as nn\n\n# LSTM Model\nclass LSTMModel(nn.Module):\n    def __init__(self, input_size, hidden_size, output_size):\n        super(LSTMModel, self).__init__()\n        self.lstm = nn.LSTM(input_size, hidden_size, batch_first=True)\n        self.fc = nn.Linear(hidden_size, output_size)\n\n    def forward(self, x):\n        _, (h_n, _) = self.lstm(x)\n        out = self.fc(h_n[-1])\n        return out\n\n# GRU Model\nclass GRUModel(nn.Module):\n    def __init__(self, input_size, hidden_size, output_size):\n        super(GRUModel, self).__init__()\n        self.gru = nn.GRU(input_size, hidden_size, batch_first=True)\n        self.fc = nn.Linear(hidden_size, output_size)\n\n    def forward(self, x):\n        _, h_n = self.gru(x)\n        out = self.fc(h_n[-1])\n        return out\n\n# Sample Data\ninput_size = 10\nhidden_size = 20\noutput_size = 1\nseq_len = 5\nbatch_size = 3\n\nx = torch.randn(batch_size, seq_len, input_size)\n\n# Models\nlstm_model = LSTMModel(input_size, hidden_size, output_size)\ngru_model = GRUModel(input_size, hidden_size, output_size)\n\n# Forward Pass\nlstm_output = lstm_model(x)\ngru_output = gru_model(x)\n\nprint(\"LSTM Output:\", lstm_output)\nprint(\"GRU Output:\", gru_output)\n</code></pre>"},{"location":"Learning_resources/Deep%20Learning/RNN/#applications-of-lstm-and-gru","title":"Applications of LSTM and GRU","text":"<ol> <li>Natural Language Processing (NLP):</li> <li>Machine Translation</li> <li>Sentiment Analysis</li> <li> <p>Text Summarization</p> </li> <li> <p>Time Series Prediction:</p> </li> <li>Stock Market Forecasting</li> <li> <p>Weather Prediction</p> </li> <li> <p>Speech Processing:</p> </li> <li>Speech Recognition</li> <li> <p>Voice Synthesis</p> </li> <li> <p>Video Processing:</p> </li> <li>Action Recognition</li> <li>Video Captioning</li> </ol> <p>These advanced RNNs provide powerful tools for sequence modeling by effectively managing long-term dependencies.</p>"},{"location":"Learning_resources/Deep%20Learning/RNN/#practical-application-sentiment-analysis","title":"Practical Application: Sentiment Analysis","text":"<p>We can use an RNN to classify text (e.g., positive/negative sentiment).</p>"},{"location":"Learning_resources/Deep%20Learning/RNN/#code-example","title":"Code Example","text":"<pre><code>import torchtext\nfrom torchtext.datasets import IMDB\nfrom torchtext.data.utils import get_tokenizer\nfrom torch.nn.utils.rnn import pad_sequence\n\n# Data preprocessing\ntokenizer = get_tokenizer(\"basic_english\")\ndef preprocess(text):\n    return torch.tensor([vocab[token] for token in tokenizer(text)], dtype=torch.long)\n\n# Example data pipeline setup\n# Assume `vocab` is built, and data is tokenized and padded for batch training.\n\n# Define an RNN for classification\nclass SentimentRNN(nn.Module):\n    def __init__(self, vocab_size, embed_size, hidden_size, output_size):\n        super(SentimentRNN, self).__init__()\n        self.embedding = nn.Embedding(vocab_size, embed_size)\n        self.rnn = nn.RNN(embed_size, hidden_size, batch_first=True)\n        self.fc = nn.Linear(hidden_size, output_size)\n\n    def forward(self, x):\n        x = self.embedding(x)\n        _, h_n = self.rnn(x)\n        return self.fc(h_n[-1])\n\n# Define parameters and train as shown in earlier examples.\n</code></pre>"},{"location":"Learning_resources/Deep%20Learning/RNN/#key-takeaways_1","title":"Key Takeaways","text":"<ol> <li>RNNs: Great for sequential data but suffer from vanishing gradients.</li> <li>LSTMs/GRUs: Handle long-term dependencies better than traditional RNNs.</li> <li>Applications: Time series forecasting, text generation, sentiment analysis.</li> </ol>"},{"location":"Learning_resources/Machine%20Learning/Clustering/","title":"Unsupervised Machine Learning Algorithms","text":"<p>Unsupervised Machine Learning is a type of machine learning where the model learns patterns and structures from unlabeled data. It is primarily used for clustering, dimensionality reduction, association rule mining, and anomaly detection.</p>"},{"location":"Learning_resources/Machine%20Learning/Clustering/#key-concepts","title":"Key Concepts","text":""},{"location":"Learning_resources/Machine%20Learning/Clustering/#unsupervised-learning-objective","title":"Unsupervised Learning Objective","text":"<p>Given data \\( X = \\{x_1, x_2, \\dots, x_n\\} \\), the goal is to learn patterns or structures in the data without explicit output labels.</p>"},{"location":"Learning_resources/Machine%20Learning/Clustering/#applications","title":"Applications","text":"<ul> <li>Clustering: Grouping similar data points.</li> <li>Dimensionality Reduction: Simplifying data while retaining key patterns.</li> <li>Association Rule Mining: Discovering relationships between variables.</li> <li>Anomaly Detection: Identifying outliers or abnormal instances.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Clustering/#types-of-unsupervised-algorithms","title":"Types of Unsupervised Algorithms","text":""},{"location":"Learning_resources/Machine%20Learning/Clustering/#1-clustering-algorithms","title":"1. Clustering Algorithms","text":"<p>Clustering divides data into groups (clusters) based on similarity.</p>"},{"location":"Learning_resources/Machine%20Learning/Clustering/#a-k-means-clustering","title":"a. K-Means Clustering","text":"<p>K-Means partitions data into \\( k \\) clusters by minimizing intra-cluster variance.</p> <p>Mathematical Formulation:</p> \\[ \\text{Objective: } \\min \\sum_{i=1}^k \\sum_{x \\in C_i} ||x - \\mu_i||^2 \\] <p>Where:</p> <ul> <li>\\( C_i \\): Cluster \\( i \\).</li> <li>\\( \\mu_i \\): Centroid of cluster \\( C_i \\).</li> </ul> <p>Algorithm:</p> <ol> <li>Initialize \\( k \\) centroids.</li> <li>Assign each point to the nearest centroid.</li> <li>Recompute centroids.</li> <li>Repeat until convergence.</li> </ol> <p>Use Cases:</p> <ul> <li>Customer segmentation.</li> <li>Image compression.</li> <li>Market segmentation.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Clustering/#b-hierarchical-clustering","title":"b. Hierarchical Clustering","text":"<p>Builds a tree-like structure of nested clusters.</p> <p>Two Approaches:</p> <ul> <li>Agglomerative: Bottom-up merging of clusters.</li> <li>Divisive: Top-down splitting of clusters.</li> </ul> <p>Linkage Methods:</p> <ul> <li>Single Linkage: \\( \\min \\{d(a, b) : a \\in A, b \\in B\\} \\)</li> <li>Complete Linkage: \\( \\max \\{d(a, b) : a \\in A, b \\in B\\} \\)</li> <li>Average Linkage: \\( \\text{mean} \\{d(a, b) : a \\in A, b \\in B\\} \\)</li> </ul> <p>Use Cases:</p> <ul> <li>Gene expression analysis.</li> <li>Social network analysis.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Clustering/#c-dbscan-density-based-spatial-clustering-of-applications-with-noise","title":"c. DBSCAN (Density-Based Spatial Clustering of Applications with Noise)","text":"<p>Groups points based on density and identifies outliers as noise.</p> <p>Parameters:</p> <ul> <li>\\( \\epsilon \\): Neighborhood radius.</li> <li>\\( \\text{MinPts} \\): Minimum points to form a dense region.</li> </ul> <p>Use Cases:</p> <ul> <li>Geospatial data analysis.</li> <li>Noise filtering.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Clustering/#2-dimensionality-reduction-algorithms","title":"2. Dimensionality Reduction Algorithms","text":""},{"location":"Learning_resources/Machine%20Learning/Clustering/#a-principal-component-analysis-pca","title":"a. Principal Component Analysis (PCA)","text":"<p>PCA reduces dimensionality by projecting data onto orthogonal axes that maximize variance.</p> <p>Mathematical Formulation:</p> <p>Given data matrix \\( X \\), the principal components are the eigenvectors of the covariance matrix \\( \\Sigma = \\frac{1}{n} X^T X \\).</p> <p>Use Cases:</p> <ul> <li>Data visualization.</li> <li>Noise reduction.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Clustering/#b-t-sne-t-distributed-stochastic-neighbor-embedding","title":"b. t-SNE (t-Distributed Stochastic Neighbor Embedding)","text":"<p>t-SNE maps high-dimensional data to a lower-dimensional space while preserving local structure.</p> <p>Use Cases:</p> <ul> <li>Visualizing high-dimensional datasets.</li> <li>Exploring clusters.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Clustering/#3-association-algorithms","title":"3. Association Algorithms","text":""},{"location":"Learning_resources/Machine%20Learning/Clustering/#a-apriori-algorithm","title":"a. Apriori Algorithm","text":"<p>Discovers frequent itemsets and association rules in transaction data.</p> <p>Steps: 1. Identify frequent itemsets using a minimum support threshold. 2. Generate association rules using a minimum confidence threshold.</p> <p>Mathematical Definitions:</p> <ul> <li>Support: Proportion of transactions containing an itemset:</li> </ul> \\[ \\text{Support}(A) = \\frac{\\text{Transactions with } A}{\\text{Total Transactions}} \\] <ul> <li>Confidence:  Likelihood of \\( B \\) given \\( A \\):</li> </ul> \\[ \\text{Confidence}(A \\rightarrow B) = \\frac{\\text{Support}(A \\cup B)}{\\text{Support}(A)} \\] <ul> <li>Lift:  Measures the strength of the rule:</li> </ul> \\[ \\text{Lift}(A \\rightarrow B) = \\frac{\\text{Support}(A \\cup B)}{\\text{Support}(A) \\cdot \\text{Support}(B)} \\] <p>Use Cases:</p> <ul> <li>Market basket analysis.</li> <li>Recommender systems.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Clustering/#b-fp-growth-algorithm","title":"b. FP-Growth Algorithm","text":"<p>Efficiently mines frequent itemsets without candidate generation by using a prefix-tree structure.</p> <p>Use Cases:</p> <ul> <li>Retail analytics.</li> <li>Fraud detection.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Clustering/#4-anomaly-detection-algorithms","title":"4. Anomaly Detection Algorithms","text":""},{"location":"Learning_resources/Machine%20Learning/Clustering/#a-isolation-forest","title":"a. Isolation Forest","text":"<p>Detects anomalies by isolating instances using a tree structure.</p> <p>Key Idea:</p> <p>Anomalies are isolated quickly due to their rarity and differences.</p> <p>Use Cases:</p> <ul> <li>Fraud detection.</li> <li>Network intrusion detection.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Clustering/#b-one-class-svm","title":"b. One-Class SVM","text":"<p>Classifies data into one class, treating outliers as anomalies.</p> <p>Mathematical Formulation:</p> <p>Solves:</p> \\[ \\min \\frac{1}{2} ||w||^2 + \\frac{1}{\\nu n} \\sum \\max(0, 1 - (w \\cdot x - \\rho)) \\] <p>Where:</p> <ul> <li>\\( \\nu \\): Fraction of anomalies.</li> </ul> <p>Use Cases:</p> <ul> <li>Manufacturing defect detection.</li> <li>Medical diagnosis.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Clustering/#c-elliptic-envelope","title":"c. Elliptic Envelope","text":"<p>Fits data to a Gaussian distribution and identifies anomalies based on Mahalanobis distance.</p> <p>Use Cases:</p> <ul> <li>Financial fraud detection.</li> <li>Sensor anomaly detection.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Clustering/#performance-metrics-for-unsupervised-learning","title":"Performance Metrics for Unsupervised Learning","text":""},{"location":"Learning_resources/Machine%20Learning/Clustering/#clustering-metrics","title":"Clustering Metrics","text":"<p>1. Silhouette Score:</p> \\[ \\text{Silhouette}(i) = \\frac{b(i) - a(i)}{\\max(a(i), b(i))} \\] <p>Where:</p> <ul> <li>\\( a(i) \\): Average distance within the same cluster.</li> <li>\\( b(i) \\): Average distance to the nearest cluster.</li> </ul> <p>2. Davies-Bouldin Index:</p> \\[ DB = \\frac{1}{k} \\sum_{i=1}^k \\max_{j \\neq i} \\frac{s_i + s_j}{d(c_i, c_j)} \\] <p>Where:</p> <ul> <li>\\( s_i \\): Cluster dispersion.</li> <li>\\( d(c_i, c_j) \\): Distance between cluster centroids.</li> </ul> <p>3. Dunn Index:</p> \\[ \\text{Dunn} = \\frac{\\min_{i \\neq j} \\delta(C_i, C_j)}{\\max_{1 \\leq k \\leq k} \\Delta(C_k)} \\] <p>Where:</p> <ul> <li>\\( \\delta \\): Inter-cluster distance.</li> <li>\\( \\Delta \\): Intra-cluster distance.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Clustering/#anomaly-detection-metrics","title":"Anomaly Detection Metrics","text":"<ol> <li>Precision: Proportion of true anomalies among detected anomalies.</li> <li>Recall: Proportion of true anomalies detected.</li> <li>F1-Score: Harmonic mean of precision and recall.</li> <li>Area Under ROC Curve (AUC): Measures the trade-off between true positive rate and false positive rate.</li> </ol>"},{"location":"Learning_resources/Machine%20Learning/Clustering/#conclusion","title":"Conclusion","text":"<p>Unsupervised learning algorithms are powerful tools for exploring data, identifying patterns, and detecting anomalies. Choosing the right algorithm depends on the problem type, data structure, and desired outcome.</p>"},{"location":"Learning_resources/Machine%20Learning/ML_basics/","title":"Machine Learning: A Beginner's Guide","text":"<p>Welcome to the world of Machine Learning (ML)! This guide is designed to help beginners understand the basic concepts, types, applications, lifecycle, tools, and techniques in ML.</p>"},{"location":"Learning_resources/Machine%20Learning/ML_basics/#what-is-machine-learning","title":"What is Machine Learning?","text":"<p>Machine Learning (ML) is a subset of Artificial Intelligence (AI) that focuses on creating systems that can learn and make decisions without explicit programming. These systems analyze data, identify patterns, and improve their performance with experience.</p> <p>For example: - Predicting stock prices. - Detecting spam emails. - Recommending products online.</p>"},{"location":"Learning_resources/Machine%20Learning/ML_basics/#types-of-machine-learning","title":"Types of Machine Learning","text":"<p>Machine Learning can be categorized into three main types based on the learning process:</p>"},{"location":"Learning_resources/Machine%20Learning/ML_basics/#1-supervised-learning","title":"1. Supervised Learning","text":"<ul> <li>Definition: The algorithm learns from labeled data (input-output pairs).</li> <li>Example: Predicting house prices based on features like area and location.</li> <li>Common Algorithms: <ul> <li>Linear Regression</li> <li>Decision Trees</li> <li>Neural Networks</li> </ul> </li> </ul>"},{"location":"Learning_resources/Machine%20Learning/ML_basics/#2-unsupervised-learning","title":"2. Unsupervised Learning","text":"<ul> <li>Definition: The algorithm identifies patterns in unlabeled data.</li> <li>Example: Grouping customers based on purchasing behavior.</li> <li>Common Algorithms:<ul> <li>K-Means Clustering</li> <li>Principal Component Analysis (PCA)</li> </ul> </li> </ul>"},{"location":"Learning_resources/Machine%20Learning/ML_basics/#3-reinforcement-learning","title":"3. Reinforcement Learning","text":"<ul> <li>Definition: The system learns by interacting with an environment and receiving feedback in the form of rewards or penalties.</li> <li>Example: Training a robot to walk or play games like chess.</li> <li>Key Concepts:<ul> <li>Agents</li> <li>Actions</li> <li>Rewards</li> </ul> </li> </ul>"},{"location":"Learning_resources/Machine%20Learning/ML_basics/#why-learn-machine-learning","title":"Why Learn Machine Learning?","text":"<p>Machine Learning powers many technologies we use daily, such as: - Voice assistants like Siri and Alexa. - Personalized recommendations on platforms like Netflix. - Fraud detection systems in banking.</p> <p>Learning ML equips you to solve real-world problems and opens career opportunities in AI and Data Science.</p>"},{"location":"Learning_resources/Machine%20Learning/ML_basics/#applications-of-machine-learning","title":"Applications of Machine Learning","text":""},{"location":"Learning_resources/Machine%20Learning/ML_basics/#1-healthcare","title":"1. Healthcare","text":"<ul> <li>Predicting diseases from medical images.</li> <li>Personalizing treatment plans using patient data.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/ML_basics/#2-finance","title":"2. Finance","text":"<ul> <li>Detecting fraudulent transactions.</li> <li>Predicting stock market trends.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/ML_basics/#3-retail","title":"3. Retail","text":"<ul> <li>Building recommendation engines.</li> <li>Optimizing supply chain logistics.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/ML_basics/#4-transportation","title":"4. Transportation","text":"<ul> <li>Developing autonomous vehicles.</li> <li>Improving traffic management systems.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/ML_basics/#5-social-media","title":"5. Social Media","text":"<ul> <li>Content moderation.</li> <li>Sentiment analysis for public opinion.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/ML_basics/#life-cycle-of-a-machine-learning-project","title":"Life Cycle of a Machine Learning Project","text":"<p>A successful ML project follows these steps:</p> <ol> <li> <p>Problem Definition: </p> <ul> <li>Define the business or research objective.</li> <li>Example: \"Can we predict customer churn?\"</li> </ul> </li> <li> <p>Data Collection:</p> <ul> <li>Gather relevant data from various sources.</li> <li>Example: Sales records, user activity logs.</li> </ul> </li> <li> <p>Data Preprocessing:</p> <ul> <li>Handle missing values, remove duplicates, and normalize data.</li> <li>Example: Converting categorical data into numeric form.</li> </ul> </li> <li> <p>Feature Engineering:</p> <ul> <li>Select, transform, and create features to improve model performance.</li> <li>Example: Adding a new feature like \"age group\" derived from \"date of birth.\"</li> </ul> </li> <li> <p>Model Training:</p> <ul> <li>Train the model using algorithms like Regression, Decision Trees, or Neural Networks.</li> <li>Example: Using a linear regression model to predict house prices.</li> </ul> </li> <li> <p>Model Evaluation:</p> <ul> <li>Use metrics like accuracy, precision, recall, or F1-score to validate performance.</li> </ul> </li> <li> <p>Deployment:</p> <ul> <li>Deploy the trained model into a real-world environment.</li> </ul> </li> <li> <p>Monitoring:</p> <ul> <li>Continuously monitor the model\u2019s performance and update as needed.</li> </ul> </li> </ol>"},{"location":"Learning_resources/Machine%20Learning/ML_basics/#tools-for-machine-learning","title":"Tools for Machine Learning","text":"<p>Here are some essential tools every beginner should know:</p>"},{"location":"Learning_resources/Machine%20Learning/ML_basics/#programming-languages","title":"Programming Languages","text":"<ul> <li>Python: Most popular language for ML, with libraries like NumPy and Pandas.</li> <li>R: Used for statistical analysis and visualizations.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/ML_basics/#ml-frameworks-and-libraries","title":"ML Frameworks and Libraries","text":"<ul> <li>Scikit-learn: A versatile library for beginners.</li> <li>TensorFlow and PyTorch: For deep learning.</li> <li>Keras: A high-level API for building neural networks.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/ML_basics/#data-visualization-tools","title":"Data Visualization Tools","text":"<ul> <li>Matplotlib and Seaborn: Create detailed graphs and plots.</li> <li>Tableau: A drag-and-drop tool for building dashboards.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/ML_basics/#cloud-platforms","title":"Cloud Platforms","text":"<ul> <li>Google Cloud AI</li> <li>AWS Machine Learning</li> <li>Azure Machine Learning Studio</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/ML_basics/#key-techniques-in-machine-learning","title":"Key Techniques in Machine Learning","text":""},{"location":"Learning_resources/Machine%20Learning/ML_basics/#1-regression","title":"1. Regression","text":"<ul> <li>Predict continuous values.</li> <li>Example: Predicting temperature or sales.</li> <li>Common Types:<ul> <li>Linear Regression</li> <li>Polynomial Regression</li> </ul> </li> </ul>"},{"location":"Learning_resources/Machine%20Learning/ML_basics/#2-classification","title":"2. Classification","text":"<ul> <li>Assign data to predefined categories.</li> <li>Example: Email spam detection.</li> <li>Common Algorithms:<ul> <li>Logistic Regression</li> <li>Support Vector Machines (SVM)</li> </ul> </li> </ul>"},{"location":"Learning_resources/Machine%20Learning/ML_basics/#3-clustering","title":"3. Clustering","text":"<ul> <li>Group similar data points together.</li> <li>Example: Customer segmentation.</li> <li>Common Algorithms:<ul> <li>K-Means</li> <li>Hierarchical Clustering</li> </ul> </li> </ul>"},{"location":"Learning_resources/Machine%20Learning/ML_basics/#4-dimensionality-reduction","title":"4. Dimensionality Reduction","text":"<ul> <li>Simplify data by reducing the number of features.</li> <li>Example: Using PCA to visualize high-dimensional data.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/ML_basics/#challenges-in-machine-learning","title":"Challenges in Machine Learning","text":"<ol> <li> <p>Data Quality:</p> <ul> <li>Incomplete or biased data can affect model accuracy.</li> </ul> </li> <li> <p>Overfitting and Underfitting:</p> <ul> <li>Overfitting: The model performs well on training data but poorly on new data.</li> <li>Underfitting: The model fails to learn the patterns in data.</li> </ul> </li> <li> <p>Computational Resources:</p> <ul> <li>Training complex models requires significant processing power.</li> </ul> </li> <li> <p>Ethical Concerns:</p> <ul> <li>Ensuring fairness, transparency, and privacy in ML systems.</li> </ul> </li> </ol>"},{"location":"Learning_resources/Machine%20Learning/ML_basics/#future-trends-in-machine-learning","title":"Future Trends in Machine Learning","text":"<ul> <li>Federated Learning: Training models across decentralized devices without sharing data.</li> <li>Explainable AI (XAI): Developing models that provide clear reasoning for their predictions.</li> <li>AutoML: Automating the process of model selection and hyperparameter tuning.</li> <li>Integration with IoT: Enabling smarter decision-making in connected devices.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/ML_basics/#next-steps-for-beginners","title":"Next Steps for Beginners","text":"<ol> <li>Learn Python and basic data analysis using libraries like Pandas and NumPy.</li> <li>Explore Scikit-learn for simple ML models.</li> <li>Dive into deep learning with TensorFlow or PyTorch.</li> <li>Work on small projects, such as:</li> <li>Predicting house prices.</li> <li>Building a spam email classifier.</li> <li>Analyzing customer segmentation.</li> </ol>"},{"location":"Learning_resources/Machine%20Learning/ML_basics/#references","title":"References","text":"<ul> <li>Scikit-learn Documentation</li> <li>TensorFlow Official Website</li> <li>Keras Documentation</li> <li>AWS Machine Learning Services</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Regression/","title":"Regression Analysis","text":"<p>Regression analysis is a fundamental statistical and machine learning technique for modeling the relationship between a dependent variable and one or more independent variables. The primary goal of regression is to predict or estimate the value of the dependent variable based on the input features.</p>"},{"location":"Learning_resources/Machine%20Learning/Regression/#key-concepts","title":"Key Concepts","text":""},{"location":"Learning_resources/Machine%20Learning/Regression/#mathematical-formulation","title":"Mathematical Formulation","text":"<p>The general form of a regression model is:</p> \\[y = f(X) + \\epsilon\\] <p>Where: - \\( y \\) is the dependent variable. - \\( X \\) represents the independent variables. - \\( f(X) \\) is the function capturing the relationship between \\( X \\) and \\( y \\). - \\( \\epsilon \\) is the error term (unexplained variation).</p> <p>For linear regression, \\( f(X) \\) is linear, while for other methods like polynomial regression, \\( f(X) \\) may have a more complex form.</p>"},{"location":"Learning_resources/Machine%20Learning/Regression/#types-of-regression-algorithms","title":"Types of Regression Algorithms","text":""},{"location":"Learning_resources/Machine%20Learning/Regression/#1-linear-regression","title":"1. Linear Regression","text":"<p>Linear regression establishes a linear relationship between the dependent variable (\\( y \\)) and the independent variables (\\( X \\)).</p>"},{"location":"Learning_resources/Machine%20Learning/Regression/#formula","title":"Formula:","text":"\\[ y = \\beta_0 + \\beta_1 X + \\epsilon \\] <p>Where:</p> <ul> <li>\\( \\beta_0 \\) is the intercept.</li> <li>\\( \\beta_1 \\) is the coefficient.</li> <li>\\( \\epsilon \\) is the error term.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Regression/#key-properties","title":"Key Properties:","text":"<ul> <li>Simple and interpretable.</li> <li>Prone to underfitting when the relationship is non-linear.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Regression/#2-logistic-regression","title":"2. Logistic Regression","text":"<p>Logistic regression predicts the probability of a binary outcome by applying a sigmoid function.</p>"},{"location":"Learning_resources/Machine%20Learning/Regression/#formula_1","title":"Formula:","text":"\\[ P(y=1|X) = \\frac{1}{1 + e^{-(\\beta_0 + \\beta_1 X)}} \\]"},{"location":"Learning_resources/Machine%20Learning/Regression/#key-properties_1","title":"Key Properties:","text":"<ul> <li>Suitable for classification tasks.</li> <li>Outputs probabilities between 0 and 1.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Regression/#3-polynomial-regression","title":"3. Polynomial Regression","text":"<p>Polynomial regression extends linear regression by modeling the relationship as an \\( n \\)-degree polynomial.</p>"},{"location":"Learning_resources/Machine%20Learning/Regression/#formula_2","title":"Formula:","text":"\\[ y = \\beta_0 + \\beta_1 X + \\beta_2 X^2 + \\dots + \\beta_n X^n + \\epsilon \\]"},{"location":"Learning_resources/Machine%20Learning/Regression/#key-properties_2","title":"Key Properties:","text":"<ul> <li>Fits non-linear relationships.</li> <li>May overfit if the degree of the polynomial is too high.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Regression/#4-support-vector-regression-svr","title":"4. Support Vector Regression (SVR)","text":"<p>SVR aims to find a hyperplane that maximizes the margin within a certain tolerance (\\( \\epsilon \\)).</p>"},{"location":"Learning_resources/Machine%20Learning/Regression/#key-concepts_1","title":"Key Concepts:","text":"<ul> <li>Uses kernel functions (linear, polynomial, RBF).</li> <li>Robust to outliers.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Regression/#5-decision-tree-regression","title":"5. Decision Tree Regression","text":"<p>Decision Tree Regression uses a tree-like structure to model decisions based on feature splits.</p>"},{"location":"Learning_resources/Machine%20Learning/Regression/#key-properties_3","title":"Key Properties:","text":"<ul> <li>Non-parametric and interpretable.</li> <li>Prone to overfitting without pruning.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Regression/#6-random-forest-regression","title":"6. Random Forest Regression","text":"<p>Random Forest Regression combines multiple decision trees using ensemble learning to improve accuracy and reduce overfitting.</p>"},{"location":"Learning_resources/Machine%20Learning/Regression/#key-properties_4","title":"Key Properties:","text":"<ul> <li>Robust to overfitting and noise.</li> <li>Handles non-linear relationships.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Regression/#7-ridge-regression","title":"7. Ridge Regression","text":"<p>Ridge regression adds an \\( L2 \\)-regularization term to linear regression to prevent overfitting.</p>"},{"location":"Learning_resources/Machine%20Learning/Regression/#formula_3","title":"Formula:","text":"\\[ \\text{Minimize: } \\sum_{i=1}^n (y_i - \\hat{y}_i)^2 + \\lambda \\sum_{j=1}^p \\beta_j^2 \\] <p>Where \\( \\lambda \\) controls the regularization strength.</p>"},{"location":"Learning_resources/Machine%20Learning/Regression/#8-lasso-regression","title":"8. Lasso Regression","text":"<p>Lasso regression uses \\( L1 \\)-regularization to enforce sparsity in the model, shrinking some coefficients to zero.</p>"},{"location":"Learning_resources/Machine%20Learning/Regression/#formula_4","title":"Formula:","text":"\\[ \\text{Minimize: } \\sum_{i=1}^n (y_i - \\hat{y}_i)^2 + \\lambda \\sum_{j=1}^p |\\beta_j| \\]"},{"location":"Learning_resources/Machine%20Learning/Regression/#key-properties_5","title":"Key Properties:","text":"<ul> <li>Performs feature selection.</li> <li>Robust to high-dimensional datasets.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Regression/#additional-algorithms","title":"Additional Algorithms","text":""},{"location":"Learning_resources/Machine%20Learning/Regression/#elastic-net-regression","title":"Elastic Net Regression","text":"<p>Elastic Net combines \\( L1 \\) and \\( L2 \\)-regularization for better generalization.</p>"},{"location":"Learning_resources/Machine%20Learning/Regression/#formula_5","title":"Formula:","text":"\\[ \\text{Minimize: } \\sum_{i=1}^n (y_i - \\hat{y}_i)^2 + \\lambda_1 \\sum_{j=1}^p |\\beta_j| + \\lambda_2 \\sum_{j=1}^p \\beta_j^2 \\]"},{"location":"Learning_resources/Machine%20Learning/Regression/#bayesian-regression","title":"Bayesian Regression","text":"<p>Bayesian regression incorporates prior distributions over model parameters, providing probabilistic predictions.</p>"},{"location":"Learning_resources/Machine%20Learning/Regression/#formula_6","title":"Formula:","text":"\\[ p(\\beta|X, y) \\propto p(y|X, \\beta) \\cdot p(\\beta) \\]"},{"location":"Learning_resources/Machine%20Learning/Regression/#gradient-boosting-regression","title":"Gradient Boosting Regression","text":"<p>Gradient Boosting builds an additive model using decision trees to minimize a loss function.</p>"},{"location":"Learning_resources/Machine%20Learning/Regression/#key-properties_6","title":"Key Properties:","text":"<ul> <li>Highly accurate.</li> <li>Requires careful tuning to avoid overfitting.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Regression/#choosing-the-right-algorithm","title":"Choosing the Right Algorithm","text":"<p>The choice of regression algorithm depends on:</p> <ul> <li>Data Complexity: Non-linear relationships or noise.</li> <li>Regularization Needs: High-dimensional or sparse data.</li> <li>Interpretability: Simpler models like linear regression are easier to explain.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Regression/#performance-metrics-for-regression","title":"Performance Metrics for Regression","text":""},{"location":"Learning_resources/Machine%20Learning/Regression/#1-mean-absolute-error-mae","title":"1. Mean Absolute Error (MAE)","text":"<p>Measures the average magnitude of errors in predictions:</p> \\[ \\text{MAE} = \\frac{1}{n} \\sum_{i=1}^n |y_i - \\hat{y}_i| \\] <ul> <li>Interpretation: Lower values indicate better model performance.</li> <li>Sensitivity: Does not penalize large errors as heavily as squared metrics.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Regression/#2-mean-squared-error-mse","title":"2. Mean Squared Error (MSE)","text":"<p>Measures the average squared difference between actual and predicted values:</p> \\[ \\text{MSE} = \\frac{1}{n} \\sum_{i=1}^n (y_i - \\hat{y}_i)^2 \\] <ul> <li>Interpretation: Heavily penalizes larger errors.</li> <li>Use Case: When large errors are particularly undesirable.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Regression/#3-root-mean-squared-error-rmse","title":"3. Root Mean Squared Error (RMSE)","text":"<p>The square root of MSE, providing error in the same units as the target variable:</p> \\[ \\text{RMSE} = \\sqrt{\\frac{1}{n} \\sum_{i=1}^n (y_i - \\hat{y}_i)^2} \\] <ul> <li>Interpretation: Easier to interpret than MSE due to units.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Regression/#4-r-squared-r2","title":"4. R-squared (\\( R^2 \\))","text":"<p>Represents the proportion of variance in the target variable explained by the model:</p> \\[ R^2 = 1 - \\frac{\\sum_{i=1}^n (y_i - \\hat{y}_i)^2}{\\sum_{i=1}^n (y_i - \\bar{y})^2} \\] <ul> <li> <p>Interpretation:</p> </li> <li> <p>\\( R^2 = 1 \\): Perfect fit.</p> </li> <li>\\( R^2 = 0 \\): Model explains no variance.</li> <li>\\( R^2 &lt; 0 \\): Model is worse than a horizontal mean line.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Regression/#5-adjusted-r-squared","title":"5. Adjusted R-squared","text":"<p>Accounts for the number of predictors in the model:</p> \\[ \\text{Adjusted } R^2 = 1 - \\left(1 - R^2\\right) \\frac{n - 1}{n - p - 1} \\] <p>Where:</p> <ul> <li>\\( n \\): Number of data points.</li> <li> <p>\\( p \\): Number of predictors.</p> </li> <li> <p>Interpretation: Penalizes adding irrelevant predictors to the model.</p> </li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Regression/#6-mean-absolute-percentage-error-mape","title":"6. Mean Absolute Percentage Error (MAPE)","text":"<p>Expresses error as a percentage of the actual values:</p> \\[ \\text{MAPE} = \\frac{1}{n} \\sum_{i=1}^n \\left| \\frac{y_i - \\hat{y}_i}{y_i} \\right| \\times 100 \\] <ul> <li>Use Case: Useful when target values vary significantly.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Regression/#7-explained-variance-score","title":"7. Explained Variance Score","text":"<p>Measures the proportion of variance explained by the model:</p> \\[ \\text{Explained Variance} = 1 - \\frac{\\text{Var}(y - \\hat{y})}{\\text{Var}(y)} \\] <ul> <li>Interpretation: Similar to \\( R^2 \\), but focuses on explained variance.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Regression/#8-huber-loss","title":"8. Huber Loss","text":"<p>Combines MAE and MSE for robust error measurement:</p> \\[ L_{\\delta}(a) = \\begin{cases}  \\frac{1}{2}(a)^2 &amp; \\text{for } |a| \\leq \\delta, \\\\ \\delta \\cdot (|a| - \\frac{\\delta}{2}) &amp; \\text{for } |a| &gt; \\delta \\end{cases} \\] <p>Where \\( a = y - \\hat{y} \\).</p> <ul> <li>Use Case: Robust to outliers in regression.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Regression/#comparison-of-metrics","title":"Comparison of Metrics","text":"Metric Pros Cons MAE Easy to interpret, less sensitive to outliers. May under-penalize large errors. MSE Penalizes large errors heavily. Less interpretable due to squaring. RMSE Same units as target variable. Still sensitive to outliers. R-squared Shows proportion of variance explained. Can be misleading with irrelevant features. MAPE Provides percentage error. Undefined for \\( y_i = 0 \\). Huber Loss Robust to outliers. Requires hyperparameter \\( \\delta \\)."},{"location":"Learning_resources/Machine%20Learning/Regression/#choosing-the-right-metric","title":"Choosing the Right Metric","text":"<ul> <li>Small datasets with few outliers: Use MAE or MSE.</li> <li>Sensitive to large errors: Use RMSE or Huber Loss.</li> <li>Comparing model fit: Use \\( R^2 \\) or Adjusted \\( R^2 \\).</li> <li>Relative error: Use MAPE for interpretability.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Regression/#visual-evaluation-techniques","title":"Visual Evaluation Techniques","text":"<ul> <li>Residual Plots: Show the difference between actual and predicted values.</li> <li>Parity Plots: Compare predicted vs. actual values directly.</li> <li>Error Histograms: Visualize the distribution of errors.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/Regression/#conclusion","title":"Conclusion","text":"<p>Regression analysis is a versatile tool for predictive modeling. Each algorithm has its strengths and weaknesses, making it crucial to evaluate their performance based on the dataset and task at hand.</p>"},{"location":"Learning_resources/Machine%20Learning/classification/","title":"Classification","text":"<p>Classification is a supervised learning task that involves predicting the category or class label of a given input. This task is foundational to many applications like spam detection, sentiment analysis, fraud detection, and image classification.</p>"},{"location":"Learning_resources/Machine%20Learning/classification/#key-concepts","title":"Key Concepts","text":""},{"location":"Learning_resources/Machine%20Learning/classification/#mathematical-formulation","title":"Mathematical Formulation","text":"<p>Given a dataset:</p> \\[ D = \\{(X_1, y_1), (X_2, y_2), \\dots, (X_n, y_n)\\} \\] <p>Where:</p> <ul> <li>\\( X_i \\) represents feature vectors.</li> <li>\\( y_i \\) is the class label (\\( y_i \\in \\{C_1, C_2, \\dots, C_k\\} \\)).</li> </ul> <p>The objective is to learn a function \\( f \\) such that:</p> \\[ f(X) = \\hat{y} \\] <p>Where \\( \\hat{y} \\) is the predicted class label.</p>"},{"location":"Learning_resources/Machine%20Learning/classification/#types-of-classification-algorithms","title":"Types of Classification Algorithms","text":""},{"location":"Learning_resources/Machine%20Learning/classification/#1-logistic-regression","title":"1. Logistic Regression","text":"<p>Logistic Regression predicts the probability of a binary class using the logistic (sigmoid) function.</p>"},{"location":"Learning_resources/Machine%20Learning/classification/#mathematical-formula","title":"Mathematical Formula","text":"<p>For binary classification (\\( y \\in \\{0, 1\\} \\)):</p> \\[ P(y=1|X) = \\frac{1}{1 + e^{-(\\beta_0 + \\beta_1 X)}} \\] <p>Decision rule:</p> \\[ \\hat{y} = \\begin{cases} 1 &amp; \\text{if } P(y=1|X) \\geq 0.5 \\\\ 0 &amp; \\text{otherwise} \\end{cases} \\]"},{"location":"Learning_resources/Machine%20Learning/classification/#2-decision-tree-classifier","title":"2. Decision Tree Classifier","text":"<p>Decision Trees split data based on feature conditions to predict class labels.</p>"},{"location":"Learning_resources/Machine%20Learning/classification/#splitting-criterion","title":"Splitting Criterion","text":"<p>Common measures:</p> <ul> <li>Gini Index:</li> </ul> \\[ G = 1 - \\sum_{i=1}^k p_i^2 \\] <ul> <li>Entropy:</li> </ul> \\[ H = -\\sum_{i=1}^k p_i \\log_2 p_i \\] <p>Where \\( p_i \\) is the probability of class \\( i \\).</p>"},{"location":"Learning_resources/Machine%20Learning/classification/#3-random-forest-classifier","title":"3. Random Forest Classifier","text":"<p>Random Forest aggregates predictions from multiple decision trees.</p>"},{"location":"Learning_resources/Machine%20Learning/classification/#prediction-formula","title":"Prediction Formula","text":"<p>For classification:</p> \\[ \\hat{y} = \\text{Mode}(\\{T_1(X), T_2(X), \\dots, T_m(X)\\}) \\] <p>Where \\( T_i(X) \\) is the prediction of the \\( i \\)-th tree.</p>"},{"location":"Learning_resources/Machine%20Learning/classification/#4-support-vector-machine-svm","title":"4. Support Vector Machine (SVM)","text":"<p>SVM finds the hyperplane that best separates the classes with the largest margin.</p>"},{"location":"Learning_resources/Machine%20Learning/classification/#mathematical-formulation_1","title":"Mathematical Formulation","text":"<p>Given:</p> <ul> <li>Data points \\( X_i \\)</li> <li>Labels \\( y_i \\in \\{-1, 1\\} \\)</li> </ul> <p>Objective:</p> \\[ \\text{Maximize } \\frac{2}{||w||} \\] <p>Subject to:</p> \\[ y_i (w \\cdot X_i + b) \\geq 1 \\]"},{"location":"Learning_resources/Machine%20Learning/classification/#kernel-trick","title":"Kernel Trick","text":"<p>For non-linear data, SVM uses kernel functions:</p> <ul> <li>Linear: \\( K(X, X') = X \\cdot X' \\)</li> <li>Polynomial: \\( K(X, X') = (X \\cdot X' + c)^d \\)</li> <li>RBF: \\( K(X, X') = e^{-\\gamma ||X - X'||^2} \\)</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/classification/#5-k-nearest-neighbors-knn","title":"5. K-Nearest Neighbors (KNN)","text":"<p>KNN classifies data based on the majority vote of its \\( k \\)-nearest neighbors.</p>"},{"location":"Learning_resources/Machine%20Learning/classification/#decision-rule","title":"Decision Rule","text":"\\[ \\hat{y} = \\text{Mode}(\\{y_{i_1}, y_{i_2}, \\dots, y_{i_k}\\}) \\] <p>Where \\( y_{i_j} \\) are the labels of the nearest neighbors.</p>"},{"location":"Learning_resources/Machine%20Learning/classification/#6-naive-bayes-classifier","title":"6. Naive Bayes Classifier","text":"<p>Naive Bayes applies Bayes' theorem under the assumption of conditional independence.</p>"},{"location":"Learning_resources/Machine%20Learning/classification/#formula","title":"Formula","text":"\\[ P(y|X) \\propto P(X|y)P(y) \\] <p>For features \\( X = \\{x_1, x_2, \\dots, x_n\\} \\): [ P(X|y) = \\prod_{i=1}^n P(x_i|y) ]</p>"},{"location":"Learning_resources/Machine%20Learning/classification/#7-neural-networks","title":"7. Neural Networks","text":"<p>Neural Networks use layers of interconnected neurons to model complex patterns.</p>"},{"location":"Learning_resources/Machine%20Learning/classification/#formula_1","title":"Formula","text":"<p>For a single neuron:</p> \\[ z = w \\cdot X + b, \\quad a = \\sigma(z) \\] <p>Where:</p> <ul> <li>\\( z \\) is the weighted sum.</li> <li>\\( a \\) is the activation output.</li> <li>\\( \\sigma \\) is the activation function (e.g., sigmoid, ReLU).</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/classification/#8-gradient-boosting-classifier","title":"8. Gradient Boosting Classifier","text":"<p>Gradient Boosting builds an additive model by minimizing a loss function.</p>"},{"location":"Learning_resources/Machine%20Learning/classification/#update-rule","title":"Update Rule","text":"\\[ F_m(X) = F_{m-1}(X) + h_m(X) \\] <p>Where \\( h_m(X) \\) is the weak learner (decision tree).</p>"},{"location":"Learning_resources/Machine%20Learning/classification/#performance-metrics","title":"Performance Metrics","text":""},{"location":"Learning_resources/Machine%20Learning/classification/#confusion-matrix","title":"Confusion Matrix","text":"<p>A confusion matrix summarizes prediction results:</p> Predicted Positive Predicted Negative Actual Positive True Positive (TP) False Negative (FN) Actual Negative False Positive (FP) True Negative (TN)"},{"location":"Learning_resources/Machine%20Learning/classification/#metrics","title":"Metrics","text":"<ul> <li>Accuracy:</li> </ul> \\[ \\text{Accuracy} = \\frac{TP + TN}{TP + TN + FP + FN} \\] <ul> <li>Precision:</li> </ul> \\[ \\text{Precision} = \\frac{TP}{TP + FP} \\] <ul> <li>Recall:</li> </ul> \\[ \\text{Recall} = \\frac{TP}{TP + FN} \\] <ul> <li>F1-Score:</li> </ul> \\[ \\text{F1-Score} = 2 \\cdot \\frac{\\text{Precision} \\cdot \\text{Recall}}{\\text{Precision} + \\text{Recall}} \\] <ul> <li>ROC-AUC:</li> </ul> <p>Area under the ROC curve measures the model's ability to distinguish between classes.</p>"},{"location":"Learning_resources/Machine%20Learning/classification/#choosing-the-right-algorithm","title":"Choosing the Right Algorithm","text":"<ul> <li>Linear Relationships: Logistic Regression, SVM (with linear kernel).</li> <li>Non-linear Data: Decision Trees, Random Forest, SVM (with RBF kernel).</li> <li>Text Data: Naive Bayes, Logistic Regression.</li> <li>Large Datasets: Neural Networks, Gradient Boosting.</li> </ul>"},{"location":"Learning_resources/Machine%20Learning/classification/#conclusion","title":"Conclusion","text":"<p>Classification is a cornerstone of machine learning with algorithms ranging from simple models like Logistic Regression to complex ones like Gradient Boosting. Selecting the right model depends on the data and problem domain.</p>"},{"location":"Learning_resources/Mathematics/Calculus/Application%20of%20antiderivatives/","title":"Applications of Antiderivatives","text":""},{"location":"Learning_resources/Mathematics/Calculus/Application%20of%20antiderivatives/#1-area-between-two-curves","title":"1. Area Between Two Curves","text":""},{"location":"Learning_resources/Mathematics/Calculus/Application%20of%20antiderivatives/#intuition","title":"Intuition","text":"<p>The area between two curves \\( f(x) \\) and \\( g(x) \\) over an interval \\([a, b]\\) is given by:</p> \\[ \\text{Area} = \\int_a^b |f(x) - g(x)| \\, dx. \\] <p>If \\( f(x) \\geq g(x) \\) on \\([a, b]\\):</p> \\[ \\text{Area} = \\int_a^b (f(x) - g(x)) \\, dx. \\]"},{"location":"Learning_resources/Mathematics/Calculus/Application%20of%20antiderivatives/#example","title":"Example","text":"<p>Find the area between \\( f(x) = x^2 \\) and \\( g(x) = x \\) over \\([0, 1]\\).</p> \\[ \\text{Area} = \\int_0^1 (x - x^2) \\, dx = \\left[\\frac{x^2}{2} - \\frac{x^3}{3}\\right]_0^1 = \\frac{1}{2} - \\frac{1}{3} = \\frac{1}{6}. \\]"},{"location":"Learning_resources/Mathematics/Calculus/Application%20of%20antiderivatives/#python-visualization","title":"Python Visualization","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.integrate import quad\n\n# Define the functions\ndef f(x):\n    return x\n\ndef g(x):\n    return x**2\n\n# Compute the area\narea, _ = quad(lambda x: f(x) - g(x), 0, 1)\n\n# Plot\nx = np.linspace(0, 1, 500)\nplt.plot(x, f(x), label='f(x) = x')\nplt.plot(x, g(x), label='g(x) = x^2')\nplt.fill_between(x, g(x), f(x), alpha=0.2, label=f'Area = {area:.2f}')\nplt.legend()\nplt.title('Area Between Two Curves')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.grid()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Application%20of%20antiderivatives/#2-volumes-of-cylindrical-shells","title":"2. Volumes of Cylindrical Shells","text":""},{"location":"Learning_resources/Mathematics/Calculus/Application%20of%20antiderivatives/#intuition_1","title":"Intuition","text":"<p>The volume of a solid of revolution using the shell method is given by:</p> \\[ V = 2\\pi \\int_a^b \\text{(radius)} \\cdot \\text{(height)} \\, dx. \\] <p>Here:</p> <ul> <li>Radius is the distance from the axis of rotation.</li> <li>Height is the function value.</li> </ul>"},{"location":"Learning_resources/Mathematics/Calculus/Application%20of%20antiderivatives/#example_1","title":"Example","text":"<p>Find the volume of the solid obtained by rotating \\( y = x^2 \\) about the y-axis over \\([0, 1]\\):</p> \\[ V = 2\\pi \\int_0^1 x \\cdot x^2 \\, dx = 2\\pi \\int_0^1 x^3 \\, dx = 2\\pi \\left[\\frac{x^4}{4}\\right]_0^1 = \\frac{\\pi}{2}. \\]"},{"location":"Learning_resources/Mathematics/Calculus/Application%20of%20antiderivatives/#python-visualization_1","title":"Python Visualization","text":"<pre><code># Define the function\ndef height(x):\n    return x**2\n\n# Compute volume\nvolume, _ = quad(lambda x: 2 * np.pi * x * height(x), 0, 1)\n\n# Plot\nx = np.linspace(0, 1, 500)\ny = height(x)\nplt.plot(x, y, label='y = x^2')\nplt.fill_between(x, 0, y, alpha=0.2, label=f'Volume = {volume:.2f}')\nplt.legend()\nplt.title('Volume by Cylindrical Shells')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.grid()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Application%20of%20antiderivatives/#3-approximate-integration","title":"3. Approximate Integration","text":""},{"location":"Learning_resources/Mathematics/Calculus/Application%20of%20antiderivatives/#intuition_2","title":"Intuition","text":"<p>Approximate integration techniques, like the Trapezoidal Rule and Simpson\u2019s Rule, estimate definite integrals by dividing the interval into smaller subintervals.</p>"},{"location":"Learning_resources/Mathematics/Calculus/Application%20of%20antiderivatives/#example-trapezoidal-rule","title":"Example: Trapezoidal Rule","text":"\\[ \\int_a^b f(x) \\, dx \\approx \\frac{\\Delta x}{2} \\left[f(x_0) + 2f(x_1) + \\cdots + f(x_n)\\right]. \\]"},{"location":"Learning_resources/Mathematics/Calculus/Application%20of%20antiderivatives/#python-visualization_2","title":"Python Visualization","text":"<pre><code># Define function\ndef f(x):\n    return x**2\n\n# Trapezoidal approximation\na, b = 0, 1\nn = 10\nx = np.linspace(a, b, n+1)\ny = f(x)\ndelta_x = (b - a) / n\ntrapezoidal_approx = (delta_x / 2) * (y[0] + 2 * sum(y[1:-1]) + y[-1])\n\n# Plot\nx_dense = np.linspace(a, b, 500)\ny_dense = f(x_dense)\nplt.plot(x_dense, y_dense, label='f(x) = x^2')\nplt.bar(x[:-1], y[:-1], width=delta_x, align='edge', alpha=0.3, label='Trapezoids')\nplt.title(f'Trapezoidal Approximation: {trapezoidal_approx:.2f}')\nplt.xlabel('x')\nplt.ylabel('f(x)')\nplt.legend()\nplt.grid()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Application%20of%20antiderivatives/#4-arc-length","title":"4. Arc Length","text":""},{"location":"Learning_resources/Mathematics/Calculus/Application%20of%20antiderivatives/#intuition_3","title":"Intuition","text":"<p>The length of a curve \\( y = f(x) \\) over \\([a, b]\\) is given by:</p> \\[ L = \\int_a^b \\sqrt{1 + \\left(\\frac{dy}{dx}\\right)^2} \\, dx. \\]"},{"location":"Learning_resources/Mathematics/Calculus/Application%20of%20antiderivatives/#example_2","title":"Example","text":"<p>Find the arc length of \\( y = \\sqrt{x} \\) over \\([0, 1]\\):</p> \\[ L = \\int_0^1 \\sqrt{1 + \\left(\\frac{1}{2\\sqrt{x}}\\right)^2} \\, dx. \\]"},{"location":"Learning_resources/Mathematics/Calculus/Application%20of%20antiderivatives/#python-visualization_3","title":"Python Visualization","text":"<pre><code># Define function and its derivative\ndef f(x):\n    return np.sqrt(x)\n\ndef f_prime(x):\n    return 1 / (2 * np.sqrt(x))\n\n# Compute arc length\narc_length, _ = quad(lambda x: np.sqrt(1 + f_prime(x)**2), 0.01, 1)  # Avoid division by zero\n\n# Plot\nx = np.linspace(0, 1, 500)\ny = f(x)\nplt.plot(x, y, label='y = sqrt(x)')\nplt.title(f'Arc Length = {arc_length:.2f}')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.legend()\nplt.grid()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Application%20of%20antiderivatives/#5-area-of-surface-of-revolution","title":"5. Area of Surface of Revolution","text":""},{"location":"Learning_resources/Mathematics/Calculus/Application%20of%20antiderivatives/#intuition_4","title":"Intuition","text":"<p>The surface area of a solid obtained by rotating \\( y = f(x) \\) about the x-axis is:</p> \\[ S = 2\\pi \\int_a^b f(x) \\sqrt{1 + \\left(\\frac{dy}{dx}\\right)^2} \\, dx. \\]"},{"location":"Learning_resources/Mathematics/Calculus/Application%20of%20antiderivatives/#example_3","title":"Example","text":"<p>Find the surface area of \\( y = x^2 \\) rotated about the x-axis over \\([0, 1]\\).</p> \\[ S = 2\\pi \\int_0^1 x^2 \\sqrt{1 + (2x)^2} \\, dx. \\]"},{"location":"Learning_resources/Mathematics/Calculus/Application%20of%20antiderivatives/#python-visualization_4","title":"Python Visualization","text":"<pre><code># Compute surface area\ndef f(x):\n    return x**2\n\ndef f_prime(x):\n    return 2*x\n\nsurface_area, _ = quad(lambda x: 2 * np.pi * f(x) * np.sqrt(1 + f_prime(x)**2), 0, 1)\n\n# Plot\nx = np.linspace(0, 1, 500)\ny = f(x)\nplt.plot(x, y, label='y = x^2')\nplt.title(f'Surface Area = {surface_area:.2f}')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.legend()\nplt.grid()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Application_Of_Derivative/","title":"Applications of Derivatives","text":""},{"location":"Learning_resources/Mathematics/Calculus/Application_Of_Derivative/#1-curve-sketching","title":"1. Curve Sketching","text":""},{"location":"Learning_resources/Mathematics/Calculus/Application_Of_Derivative/#intuition","title":"Intuition","text":"<p>Curve sketching involves using the derivative to analyze and draw the graph of a function. The first and second derivatives provide crucial information:</p> <ul> <li>First Derivative (f'(x)): Indicates where the function is increasing or decreasing and helps find critical points (local maxima and minima).</li> <li>Second Derivative (f''(x)): Indicates concavity (whether the curve bends upwards or downwards) and helps locate inflection points.</li> </ul>"},{"location":"Learning_resources/Mathematics/Calculus/Application_Of_Derivative/#steps-for-curve-sketching","title":"Steps for Curve Sketching","text":"<ol> <li>Find the domain of the function.</li> <li>Determine the critical points by solving \\( f'(x) = 0 \\) or \\( f'(x) \\) undefined.</li> <li>Analyze intervals of increase/decrease using the sign of \\( f'(x) \\).</li> <li>Find the concavity and inflection points using \\( f''(x) \\).</li> <li>Plot key points and use the information to sketch the graph.</li> </ol>"},{"location":"Learning_resources/Mathematics/Calculus/Application_Of_Derivative/#example","title":"Example","text":"<p>Sketch the curve of \\( f(x) = x^3 - 3x^2 + 4 \\).</p>"},{"location":"Learning_resources/Mathematics/Calculus/Application_Of_Derivative/#python-visualization","title":"Python Visualization","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the function and its derivatives\ndef f(x):\n    return x**3 - 3*x**2 + 4\n\ndef f_prime(x):\n    return 3*x**2 - 6*x\n\ndef f_double_prime(x):\n    return 6*x - 6\n\n# Generate x values\nx = np.linspace(-1, 3, 500)\ny = f(x)\n\n# Critical points\ncritical_points = [0, 2]\ninflection_point = [1]\n\n# Plot the function\nplt.plot(x, y, label='f(x) = x^3 - 3x^2 + 4')\nplt.scatter(critical_points, f(np.array(critical_points)), color='red', label='Critical Points')\nplt.scatter(inflection_point, f(np.array(inflection_point)), color='green', label='Inflection Point')\nplt.axhline(0, color='black', linewidth=0.5, linestyle='--')\nplt.axvline(0, color='black', linewidth=0.5, linestyle='--')\nplt.legend()\nplt.title('Curve Sketching of f(x)')\nplt.xlabel('x')\nplt.ylabel('f(x)')\nplt.grid()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Application_Of_Derivative/#2-optimization-problems","title":"2. Optimization Problems","text":""},{"location":"Learning_resources/Mathematics/Calculus/Application_Of_Derivative/#intuition_1","title":"Intuition","text":"<p>Optimization involves finding the maximum or minimum values of a function. These problems often occur in real-world scenarios like minimizing costs or maximizing profit.</p>"},{"location":"Learning_resources/Mathematics/Calculus/Application_Of_Derivative/#steps-for-solving-optimization-problems","title":"Steps for Solving Optimization Problems","text":"<ol> <li>Define the function to optimize.</li> <li>Identify constraints and express them mathematically.</li> <li>Use derivatives to find critical points.</li> <li>Analyze critical points and endpoints to determine the optimal solution.</li> </ol>"},{"location":"Learning_resources/Mathematics/Calculus/Application_Of_Derivative/#example_1","title":"Example","text":"<p>Find the dimensions of a rectangle with a perimeter of 20 units that maximizes its area.</p>"},{"location":"Learning_resources/Mathematics/Calculus/Application_Of_Derivative/#solution","title":"Solution","text":"<ol> <li>Let the dimensions be \\( x \\) and \\( y \\), with \\( 2x + 2y = 20 \\).</li> <li>Express the area: \\( A = x \\cdot y \\).</li> <li>Substitute \\( y = 10 - x \\): \\( A(x) = x(10 - x) = 10x - x^2 \\).</li> <li>Maximize \\( A(x) \\) by finding \\( A'(x) = 10 - 2x \\).</li> </ol>"},{"location":"Learning_resources/Mathematics/Calculus/Application_Of_Derivative/#python-visualization_1","title":"Python Visualization","text":"<pre><code>x = np.linspace(0, 10, 500)\ndef area(x):\n    return x * (10 - x)\n\ny = area(x)\n\nplt.plot(x, y, label='Area(x) = 10x - x^2')\nplt.axvline(5, color='red', linestyle='--', label='Max Area at x=5')\nplt.title('Optimization: Maximize Area')\nplt.xlabel('Width (x)')\nplt.ylabel('Area')\nplt.legend()\nplt.grid()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Application_Of_Derivative/#3-newtons-method","title":"3. Newton's Method","text":""},{"location":"Learning_resources/Mathematics/Calculus/Application_Of_Derivative/#intuition_2","title":"Intuition","text":"<p>Newton's Method is an iterative numerical technique to approximate roots of a function \\( f(x) \\). Starting from an initial guess \\( x_0 \\), the method improves the guess using:</p> \\[ x_{n+1} = x_n - \\frac{f(x_n)}{f'(x_n)} \\] <p>The process continues until the approximation converges to a root.</p>"},{"location":"Learning_resources/Mathematics/Calculus/Application_Of_Derivative/#example_2","title":"Example","text":"<p>Approximate the root of \\( f(x) = x^2 - 2 \\) using Newton's Method.</p>"},{"location":"Learning_resources/Mathematics/Calculus/Application_Of_Derivative/#python-visualization_2","title":"Python Visualization","text":"<pre><code># Define the function and its derivative\ndef f(x):\n    return x**2 - 2\n\ndef f_prime(x):\n    return 2*x\n\n# Newton's Method\ndef newtons_method(f, f_prime, x0, tolerance=1e-6, max_iter=100):\n    x = x0\n    for _ in range(max_iter):\n        x_new = x - f(x) / f_prime(x)\n        if abs(x_new - x) &lt; tolerance:\n            break\n        x = x_new\n    return x\n\n# Initial guess\nx0 = 1.5\nroot = newtons_method(f, f_prime, x0)\n\n# Plot the function and tangent lines\nx = np.linspace(0, 2, 500)\ny = f(x)\n\nplt.plot(x, y, label='f(x) = x^2 - 2')\nplt.axhline(0, color='black', linestyle='--')\nplt.scatter([root], [f(root)], color='red', label=f'Root ~ {root:.4f}')\nplt.legend()\nplt.title(\"Newton's Method\")\nplt.xlabel('x')\nplt.ylabel('f(x)')\nplt.grid()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Derivative/","title":"Calculus Concepts: Derivatives","text":""},{"location":"Learning_resources/Mathematics/Calculus/Derivative/#1-tangent-and-velocity","title":"1. Tangent and Velocity","text":""},{"location":"Learning_resources/Mathematics/Calculus/Derivative/#intuition","title":"Intuition","text":"<p>The concept of a derivative originates from the need to find the slope of a tangent line to a curve at a point. In physics, this translates to determining the instantaneous velocity of an object.</p> <p>The slope of a secant line connecting two points on a curve gives an average rate of change. As the two points move closer, the secant line approaches the tangent line, and the slope approaches the derivative.</p>"},{"location":"Learning_resources/Mathematics/Calculus/Derivative/#mathematical-definition","title":"Mathematical Definition","text":"<p>The derivative of a function \\( f(x) \\) at a point \\( x = a \\) is given by:</p> \\[ \\lim_{h \\to 0} \\frac{f(a + h) - f(a)}{h} \\]"},{"location":"Learning_resources/Mathematics/Calculus/Derivative/#example","title":"Example","text":"<p>Find the derivative of \\( f(x) = x^2 \\) at \\( x = 2 \\).</p> \\[ f'(2) = \\lim_{h \\to 0} \\frac{(2 + h)^2 - 2^2}{h} = \\lim_{h \\to 0} \\frac{4 + 4h + h^2 - 4}{h} = \\lim_{h \\to 0} (4 + h) = 4 \\]"},{"location":"Learning_resources/Mathematics/Calculus/Derivative/#python-visualization","title":"Python Visualization","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.linspace(0, 4, 100)\nf = x**2\n\ndef tangent_line(x, a):\n    slope = 2 * a\n    return slope * (x - a) + a**2\n\nx_tangent = 2\ny_tangent = tangent_line(x, x_tangent)\n\nplt.plot(x, f, label='f(x) = x^2')\nplt.plot(x, y_tangent, '--', label=f'Tangent at x={x_tangent}')\nplt.scatter([x_tangent], [x_tangent**2], color='red')\nplt.legend()\nplt.title('Tangent and Velocity')\nplt.xlabel('x')\nplt.ylabel('f(x)')\nplt.grid()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Derivative/#2-rate-of-change","title":"2. Rate of Change","text":""},{"location":"Learning_resources/Mathematics/Calculus/Derivative/#intuition_1","title":"Intuition","text":"<p>The rate of change measures how a quantity changes with respect to another. For example, speed is the rate of change of distance with respect to time.</p>"},{"location":"Learning_resources/Mathematics/Calculus/Derivative/#example_1","title":"Example","text":"<p>The rate of change of \\( f(x) = x^3 \\) from \\( x = 1 \\) to \\( x = 2 \\) is:</p> \\[ \\text{Average rate of change} = \\frac{f(2) - f(1)}{2 - 1} = \\frac{8 - 1}{1} = 7 \\]"},{"location":"Learning_resources/Mathematics/Calculus/Derivative/#python-visualization_1","title":"Python Visualization","text":"<pre><code>x = np.linspace(0, 3, 100)\nf = x**3\n\nx1, x2 = 1, 2\ny1, y2 = x1**3, x2**3\n\nplt.plot(x, f, label='f(x) = x^3')\nplt.plot([x1, x2], [y1, y2], 'o-', label='Secant Line')\nplt.legend()\nplt.title('Rate of Change')\nplt.xlabel('x')\nplt.ylabel('f(x)')\nplt.grid()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Derivative/#3-derivative-as-a-function","title":"3. Derivative as a Function","text":""},{"location":"Learning_resources/Mathematics/Calculus/Derivative/#intuition_2","title":"Intuition","text":"<p>The derivative itself can be treated as a function, \\( f'(x) \\), that gives the slope of the tangent line to \\( f(x) \\) at any point \\( x \\).</p>"},{"location":"Learning_resources/Mathematics/Calculus/Derivative/#example_2","title":"Example","text":"<p>For \\( f(x) = x^3 \\),</p> \\[ f'(x) = 3x^2 \\]"},{"location":"Learning_resources/Mathematics/Calculus/Derivative/#python-visualization_2","title":"Python Visualization","text":"<pre><code>x = np.linspace(-2, 2, 100)\nf = x**3\nf_prime = 3 * x**2\n\nplt.plot(x, f, label='f(x) = x^3')\nplt.plot(x, f_prime, label=\"f'(x) = 3x^2\")\nplt.legend()\nplt.title('Derivative as a Function')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.grid()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Derivative/#4-review-of-derivative","title":"4. Review of Derivative","text":""},{"location":"Learning_resources/Mathematics/Calculus/Derivative/#intuition_3","title":"Intuition","text":"<p>Derivatives are foundational to calculus, enabling us to: - Calculate slopes of tangent lines. - Analyze rates of change. - Solve real-world problems in physics, biology, and economics.</p>"},{"location":"Learning_resources/Mathematics/Calculus/Derivative/#key-rules","title":"Key Rules","text":"<ul> <li>Power Rule: \\( \\frac{d}{dx} [x^n] = nx^{n-1} \\)</li> <li>Sum Rule: \\( \\frac{d}{dx} [f(x) + g(x)] = f'(x) + g'(x) \\)</li> <li>Product Rule: \\( \\frac{d}{dx} [f(x)g(x)] = f'(x)g(x) + f(x)g'(x) \\)</li> <li>Quotient Rule: \\( \\frac{d}{dx} \\left[ \\frac{f(x)}{g(x)} \\right] = \\frac{f'(x)g(x) - f(x)g'(x)}{g(x)^2} \\)</li> <li>Chain Rule: \\( \\frac{d}{dx} [f(g(x))] = f'(g(x))g'(x) \\)</li> </ul>"},{"location":"Learning_resources/Mathematics/Calculus/Derivative/#5-mean-value-theorem","title":"5. Mean Value Theorem","text":""},{"location":"Learning_resources/Mathematics/Calculus/Derivative/#intuition_4","title":"Intuition","text":"<p>If \\( f(x) \\) is continuous and differentiable on \\([a, b]\\), there exists a point \\( c \\) in \\((a, b)\\) such that:</p> \\[ f'(c) = \\frac{f(b) - f(a)}{b - a} \\]"},{"location":"Learning_resources/Mathematics/Calculus/Derivative/#example_3","title":"Example","text":"<p>For \\( f(x) = x^2 \\) on \\([1, 3]\\):</p> \\[ \\text{Average slope} = \\frac{f(3) - f(1)}{3 - 1} = \\frac{9 - 1}{2} = 4 \\] <p>The derivative \\( f'(x) = 2x \\) satisfies \\( f'(c) = 4 \\) at \\( c = 2 \\).</p>"},{"location":"Learning_resources/Mathematics/Calculus/Derivative/#python-visualization_3","title":"Python Visualization","text":"<pre><code>x = np.linspace(0, 4, 100)\nf = x**2\n\nx1, x2 = 1, 3\ny1, y2 = x1**2, x2**2\n\ndef mean_value(x):\n    return 4 * (x - 2) + 4\n\nx_mvt = 2\ny_mvt = mean_value(x)\n\nplt.plot(x, f, label='f(x) = x^2')\nplt.plot([x1, x2], [y1, y2], 'o-', label='Secant Line')\nplt.plot(x, y_mvt, '--', label='Tangent at x=2')\nplt.legend()\nplt.title('Mean Value Theorem')\nplt.xlabel('x')\nplt.ylabel('f(x)')\nplt.grid()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Derivative/#6-indeterminate-forms-and-lhopitals-rule","title":"6. Indeterminate Forms and L'Hopital's Rule","text":""},{"location":"Learning_resources/Mathematics/Calculus/Derivative/#intuition_5","title":"Intuition","text":"<p>Indeterminate forms like \\( \\frac{0}{0} \\) or \\( \\frac{\\infty}{\\infty} \\) arise in calculus. L'Hopital's Rule provides a method to evaluate such limits:</p> \\[ \\lim_{x \\to c} \\frac{f(x)}{g(x)} = \\lim_{x \\to c} \\frac{f'(x)}{g'(x)}, \\text{ if the limit exists.} \\]"},{"location":"Learning_resources/Mathematics/Calculus/Derivative/#example_4","title":"Example","text":"<p>Evaluate \\( \\lim_{x \\to 0} \\frac{\\sin x}{x} \\).</p> \\[ \\text{Using L'Hopital's Rule: } \\lim_{x \\to 0} \\frac{\\sin x}{x} = \\lim_{x \\to 0} \\frac{\\cos x}{1} = 1 \\]"},{"location":"Learning_resources/Mathematics/Calculus/Derivative/#python-visualization_4","title":"Python Visualization","text":"<pre><code>x = np.linspace(-1, 1, 100)\ny = np.sin(x) / x\n\ndef safe_division(x):\n    return np.where(x == 0, 1, np.sin(x) / x)\n\ny_safe = safe_division(x)\n\nplt.plot(x, y_safe, label='sin(x)/x')\nplt.axhline(1, color='red', linestyle='--', label='y=1')\nplt.legend()\nplt.title(\"L'Hopital's Rule\")\nplt.xlabel('x')\nplt.ylabel('y')\nplt.grid()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/","title":"Calculus: Functions of One Variable","text":""},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#1-functions-and-its-representations","title":"1. Functions and Its Representations","text":""},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#definition","title":"Definition:","text":"<p>A function is a relation between a set of inputs (domain) and a set of possible outputs (range) such that each input is related to exactly one output.</p>"},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#representations-of-functions","title":"Representations of Functions:","text":"<ol> <li> <p>Algebraic Representation:    A function can be expressed as a formula, e.g., \\( f(x) = x^2 + 3x + 5 \\).</p> </li> <li> <p>Graphical Representation:    A graph of a function shows the relationship between \\( x \\) (input) and \\( f(x) \\) (output).</p> </li> <li> <p>Tabular Representation:    A table can list specific \\( x \\)-values and their corresponding \\( f(x) \\)-values.</p> </li> <li> <p>Verbal Description:    A function can also be described in words, e.g., \"A function that squares a number and adds 2.\"</p> </li> </ol>"},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#example","title":"Example:","text":""},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#algebraic-representation","title":"Algebraic Representation:","text":"\\[ f(x) = x^2 - 4 \\]"},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#graphical-representation","title":"Graphical Representation:","text":"<p>Plot the points for \\( x = -2, -1, 0, 1, 2 \\):</p> \\( x \\) \\( f(x) \\) -2 0 -1 -3 0 -4 1 -3 2 0"},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#verbal-representation","title":"Verbal Representation:","text":"<p>\"A function that takes a number, squares it, and subtracts 4.\"</p>"},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#2-linear-mathematical-model","title":"2. Linear Mathematical Model","text":""},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#definition_1","title":"Definition:","text":"<p>A linear mathematical model represents a relationship between variables that can be expressed in the form \\( y = mx + b \\), where:</p> <ul> <li>\\( m \\): Slope of the line</li> <li>\\( b \\): Y-intercept</li> </ul>"},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#key-features","title":"Key Features:","text":"<ul> <li>The graph is a straight line.</li> <li>Slope \\( m \\): Describes the rate of change.</li> <li>Y-intercept \\( b \\): The value of \\( y \\) when \\( x = 0 \\).</li> </ul>"},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#example_1","title":"Example:","text":""},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#problem","title":"Problem:","text":"<p>Create a linear model for a car traveling at a constant speed of 60 km/h.</p>"},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#solution","title":"Solution:","text":"<p>Let \\( x \\) represent time (in hours) and \\( y \\) represent the distance traveled (in km).</p> <p>The relationship can be modeled as:</p> \\[ y = 60x \\]"},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#graphical-representation_1","title":"Graphical Representation:","text":"<p>If \\( x = 1, 2, 3 \\):</p> \\( x \\) (Time in hours) \\( y \\) (Distance in km) 1 60 2 120 3 180"},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#3-combinations-of-functions","title":"3. Combinations of Functions","text":""},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#definition_2","title":"Definition:","text":"<p>Functions can be combined using arithmetic operations (addition, subtraction, multiplication, and division) or composition.</p>"},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#arithmetic-combinations","title":"Arithmetic Combinations:","text":"<ol> <li>Addition: \\( (f + g)(x) = f(x) + g(x) \\)</li> <li>Subtraction: \\( (f - g)(x) = f(x) - g(x) \\)</li> <li>Multiplication: \\( (f \\cdot g)(x) = f(x) \\cdot g(x) \\)</li> <li>Division: \\( \\left( \\frac{f}{g} \\right)(x) = \\frac{f(x)}{g(x)}, g(x) \\neq 0 \\)</li> </ol>"},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#composition-of-functions","title":"Composition of Functions:","text":"<p>The composition \\( (f \\circ g)(x) \\) is defined as:</p> \\[ (f \\circ g)(x) = f(g(x)) \\]"},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#example_2","title":"Example:","text":""},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#given-functions","title":"Given Functions:","text":"<p>\\( f(x) = 2x + 3 \\) and \\( g(x) = x^2 \\).</p>"},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#combinations","title":"Combinations:","text":"<ol> <li>Addition: \\( (f + g)(x) = (2x + 3) + (x^2) = x^2 + 2x + 3 \\)</li> <li>Subtraction: \\( (f - g)(x) = (2x + 3) - (x^2) = -x^2 + 2x + 3 \\)</li> <li>Multiplication: \\( (f \\cdot g)(x) = (2x + 3)(x^2) = 2x^3 + 3x^2 \\)</li> <li>Composition: \\( (f \\circ g)(x) = f(g(x)) = f(x^2) = 2(x^2) + 3 = 2x^2 + 3 \\)</li> </ol>"},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#4-rational-trigonometric-exponential-and-logarithmic-functions","title":"4. Rational, Trigonometric, Exponential, and Logarithmic Functions","text":""},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#rational-functions","title":"Rational Functions:","text":"<p>A rational function is the ratio of two polynomials:</p> \\[ R(x) = \\frac{P(x)}{Q(x)} \\] <p>where \\( Q(x) \\neq 0 \\).</p>"},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#example_3","title":"Example:","text":"\\[ R(x) = \\frac{x^2 - 1}{x - 2} \\]"},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#key-points","title":"Key Points:","text":"<ul> <li>The domain excludes values that make \\( Q(x) = 0 \\).</li> </ul>"},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#trigonometric-functions","title":"Trigonometric Functions:","text":"<p>These include sine, cosine, tangent, etc., and are periodic in nature.</p>"},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#example_4","title":"Example:","text":"<p>\\( f(x) = \\sin(x) \\) - Domain: \\( (-\\infty, \\infty) \\) - Range: \\( [-1, 1] \\)</p>"},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#key-properties","title":"Key Properties:","text":"<ul> <li>Periodicity: \\( \\sin(x + 2\\pi) = \\sin(x) \\)</li> <li>Symmetry: \\( \\sin(-x) = -\\sin(x) \\)</li> </ul>"},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#exponential-functions","title":"Exponential Functions:","text":"<p>An exponential function has the form:</p> \\[ f(x) = a \\cdot b^x \\] <p>where \\( b &gt; 0 \\) and \\( b \\neq 1 \\).</p>"},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#example_5","title":"Example:","text":"<p>\\( f(x) = 2^x \\)</p>"},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#key-points_1","title":"Key Points:","text":"<ul> <li>Growth: If \\( b &gt; 1 \\).</li> <li>Decay: If \\( 0 &lt; b &lt; 1 \\).</li> </ul>"},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#logarithmic-functions","title":"Logarithmic Functions:","text":"<p>A logarithmic function is the inverse of an exponential function:</p> \\[ f(x) = \\log_b(x) \\] <p>where \\( b &gt; 0 \\) and \\( b \\neq 1 \\).</p>"},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#example_6","title":"Example:","text":"<p>\\( f(x) = \\log_2(x) \\)</p>"},{"location":"Learning_resources/Mathematics/Calculus/Functions_on_One_Variable/#key-points_2","title":"Key Points:","text":"<ul> <li>Domain: \\( (0, \\infty) \\)</li> <li>Range: \\( (-\\infty, \\infty) \\)</li> </ul>"},{"location":"Learning_resources/Mathematics/Calculus/Infinite%20Sequence%20and%20Series/","title":"Infinite Sequences and Series","text":""},{"location":"Learning_resources/Mathematics/Calculus/Infinite%20Sequence%20and%20Series/#1-infinite-sequence-and-series","title":"1. Infinite Sequence and Series","text":""},{"location":"Learning_resources/Mathematics/Calculus/Infinite%20Sequence%20and%20Series/#definition","title":"Definition","text":"<p>An infinite sequence is an ordered list of elements, typically numbers, that extends indefinitely. Each term in the sequence is usually defined by a formula.</p> <p>A series is the sum of the terms of a sequence. An infinite series is the sum of an infinite sequence:</p> \\[ S = a_1 + a_2 + a_3 + \\dots + a_n + \\dots \\]"},{"location":"Learning_resources/Mathematics/Calculus/Infinite%20Sequence%20and%20Series/#explanation-and-intuition","title":"Explanation and Intuition","text":"<ul> <li>Infinite Sequence: Think of a sequence as an endless list of numbers arranged in a specific order. For example, \\( \\{1, 1/2, 1/3, 1/4, \\dots\\} \\) is an infinite sequence where each term is \\( 1/n \\).</li> <li>Infinite Series: When we add the terms of a sequence, we form a series. For instance, the series for \\( \\{1, 1/2, 1/3, \\dots\\} \\) is:</li> </ul> \\[ S = 1 + \\frac{1}{2} + \\frac{1}{3} + \\dots \\]"},{"location":"Learning_resources/Mathematics/Calculus/Infinite%20Sequence%20and%20Series/#2-convergence-test-of-infinite-series","title":"2. Convergence Test of Infinite Series","text":""},{"location":"Learning_resources/Mathematics/Calculus/Infinite%20Sequence%20and%20Series/#convergence-and-divergence","title":"Convergence and Divergence","text":"<p>A series converges if the sum of its terms approaches a finite value as the number of terms goes to infinity. Otherwise, it diverges.</p>"},{"location":"Learning_resources/Mathematics/Calculus/Infinite%20Sequence%20and%20Series/#tests-for-convergence","title":"Tests for Convergence","text":""},{"location":"Learning_resources/Mathematics/Calculus/Infinite%20Sequence%20and%20Series/#a-geometric-series-test","title":"a) Geometric Series Test","text":"<p>A geometric series has the form:</p> \\[ S = a + ar + ar^2 + ar^3 + \\dots \\] <ul> <li>Converges if \\( |r| &lt; 1 \\).</li> <li>Diverges if \\( |r| \\geq 1 \\).</li> </ul>"},{"location":"Learning_resources/Mathematics/Calculus/Infinite%20Sequence%20and%20Series/#example-python-code","title":"Example (Python Code):","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\n# Geometric series example\ndef geometric_series(a, r, n):\n    terms = [a * (r ** i) for i in range(n)]\n    return terms\n\n# Parameters\na, r, n = 1, 0.5, 20\nterms = geometric_series(a, r, n)\ncumsum = np.cumsum(terms)\n\nplt.plot(cumsum, marker='o', label='Cumulative Sum')\nplt.axhline(y=sum(terms), color='r', linestyle='--', label='Convergent Value')\nplt.xlabel('Number of Terms')\nplt.ylabel('Sum')\nplt.title('Convergence of Geometric Series')\nplt.legend()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Infinite%20Sequence%20and%20Series/#b-p-series-test","title":"b) p-Series Test","text":"<p>A p-series has the form:</p> \\[ S = \\sum_{n=1}^{\\infty} \\frac{1}{n^p} \\] <ul> <li>Converges if \\( p &gt; 1 \\).</li> <li>Diverges if \\( p \\leq 1 \\).</li> </ul>"},{"location":"Learning_resources/Mathematics/Calculus/Infinite%20Sequence%20and%20Series/#example-python-code_1","title":"Example (Python Code):","text":"<pre><code># p-series example\ndef p_series(p, n):\n    terms = [1 / (i ** p) for i in range(1, n + 1)]\n    return terms\n\n# Parameters\np, n = 2, 50\nterms = p_series(p, n)\ncumsum = np.cumsum(terms)\n\nplt.plot(cumsum, marker='o', label=f'p = {p}')\nplt.xlabel('Number of Terms')\nplt.ylabel('Sum')\nplt.title('Convergence of p-Series')\nplt.legend()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Infinite%20Sequence%20and%20Series/#c-ratio-test","title":"c) Ratio Test","text":"<p>For a series \\( \\sum a_n \\), if:</p> \\[ L = \\lim_{n \\to \\infty} \\left| \\frac{a_{n+1}}{a_n} \\right| \\] <ul> <li>Converges if \\( L &lt; 1 \\).</li> <li>Diverges if \\( L &gt; 1 \\).</li> <li>Inconclusive if \\( L = 1 \\).</li> </ul>"},{"location":"Learning_resources/Mathematics/Calculus/Infinite%20Sequence%20and%20Series/#example","title":"Example:","text":"<p>The factorial series \\( \\sum \\frac{1}{n!} \\) converges because the ratio test gives \\( L = 0 \\).</p>"},{"location":"Learning_resources/Mathematics/Calculus/Infinite%20Sequence%20and%20Series/#3-power-series-taylor-and-maclaurin-series","title":"3. Power Series, Taylor, and Maclaurin Series","text":""},{"location":"Learning_resources/Mathematics/Calculus/Infinite%20Sequence%20and%20Series/#power-series","title":"Power Series","text":"<p>A power series is a series of the form:</p> \\[ S(x) = \\sum_{n=0}^{\\infty} c_n (x - a)^n \\] <ul> <li>\\( a \\): Center of the series.</li> <li>\\( c_n \\): Coefficients.</li> </ul>"},{"location":"Learning_resources/Mathematics/Calculus/Infinite%20Sequence%20and%20Series/#example-python-code_2","title":"Example (Python Code):","text":"<pre><code># Power series example\nx = np.linspace(-2, 2, 100)\na, c = 0, [1, -1/2, 1/3, -1/4]\n\n# Compute power series\ndef power_series(x, c, a):\n    return sum(c[i] * (x - a) ** i for i in range(len(c)))\n\ny = power_series(x, c, a)\n\nplt.plot(x, y, label='Power Series')\nplt.axhline(0, color='k', linewidth=0.5)\nplt.axvline(0, color='k', linewidth=0.5)\nplt.xlabel('x')\nplt.ylabel('S(x)')\nplt.title('Visualization of Power Series')\nplt.legend()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Infinite%20Sequence%20and%20Series/#taylor-and-maclaurin-series","title":"Taylor and Maclaurin Series","text":"<ul> <li>Taylor Series: Expands a function \\( f(x) \\) around a point \\( a \\):</li> </ul> \\[ f(x) = \\sum_{n=0}^{\\infty} \\frac{f^{(n)}(a)}{n!} (x - a)^n \\] <ul> <li>Maclaurin Series: Special case of the Taylor series where \\( a = 0 \\).</li> </ul>"},{"location":"Learning_resources/Mathematics/Calculus/Infinite%20Sequence%20and%20Series/#example-maclaurin-series-for-ex","title":"Example (Maclaurin Series for \\( e^x \\)):","text":"<pre><code># Maclaurin series for e^x\nfrom math import factorial\n\ndef maclaurin_exponential(x, terms):\n    return sum((x ** n) / factorial(n) for n in range(terms))\n\nx_vals = np.linspace(-2, 2, 100)\ny_vals = [maclaurin_exponential(x, 10) for x in x_vals]\n\nplt.plot(x_vals, np.exp(x_vals), label='e^x (Exact)')\nplt.plot(x_vals, y_vals, '--', label='Maclaurin Series (Approximation)')\nplt.xlabel('x')\nplt.ylabel('f(x)')\nplt.title('Maclaurin Series Approximation for e^x')\nplt.legend()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Integration%20Techniques/","title":"Integration Techniques","text":"<p>Integration is a fundamental concept in calculus used to compute areas under curves, solve differential equations, and analyze continuous data. Various techniques of integration are employed based on the nature of the integrand. This document provides a detailed overview of these techniques.</p>"},{"location":"Learning_resources/Mathematics/Calculus/Integration%20Techniques/#1-basic-integration-rules","title":"1. Basic Integration Rules","text":"<p>Before diving into advanced techniques, understanding the basic rules is essential:</p> <ul> <li>Power Rule:</li> </ul> \\[ \\int x^n dx = \\frac{x^{n+1}}{n+1} + C, \\quad \\text{for } n \\neq -1 \\] <ul> <li>Constant Rule:</li> </ul> \\[ \\int a \\cdot f(x) dx = a \\int f(x) dx \\] <ul> <li>Sum/Difference Rule:</li> </ul> \\[ \\int \\big(f(x) \\pm g(x)\\big) dx = \\int f(x) dx \\pm \\int g(x) dx \\] <ul> <li>Exponential and Logarithmic Rules:</li> </ul> \\[ \\int e^x dx = e^x + C \\quad \\text{and} \\quad \\int \\frac{1}{x} dx = \\ln|x| + C \\]"},{"location":"Learning_resources/Mathematics/Calculus/Integration%20Techniques/#2-substitution-method","title":"2. Substitution Method","text":"<p>The substitution method simplifies integrals by transforming the variable:</p> <ul> <li>Steps:</li> <li>Identify a substitution \\( u = g(x) \\).</li> <li>Compute \\( du = g'(x) dx \\).</li> <li>Rewrite the integral in terms of \\( u \\).</li> <li> <p>Integrate with respect to \\( u \\) and substitute back.</p> </li> <li> <p>Example:</p> </li> </ul> \\[ \\int x e^{x^2} dx \\quad \\text{Let } u = x^2, \\; du = 2x dx. \\] \\[ \\int x e^{x^2} dx = \\frac{1}{2} \\int e^u du = \\frac{1}{2} e^u + C = \\frac{1}{2} e^{x^2} + C. \\]"},{"location":"Learning_resources/Mathematics/Calculus/Integration%20Techniques/#3-integration-by-parts","title":"3. Integration by Parts","text":"<p>Integration by parts is based on the product rule of differentiation:</p> \\[ \\int u \\cdot v' dx = uv - \\int u' \\cdot v dx. \\] <ul> <li>Steps:</li> <li>Choose \\( u \\) and \\( dv \\) (using the LIATE rule: Logarithmic, Inverse trig, Algebraic, Trigonometric, Exponential).</li> <li>Differentiate \\( u \\) to find \\( du \\) and integrate \\( dv \\) to find \\( v \\).</li> <li> <p>Apply the formula.</p> </li> <li> <p>Example:</p> \\[ \\int x e^x dx \\quad \\text{Choose } u = x, \\; dv = e^x dx. \\] \\[ u = x, \\; du = dx, \\; v = e^x. \\] \\[ \\int x e^x dx = x e^x - \\int e^x dx = x e^x - e^x + C = e^x(x - 1) + C. \\] </li> </ul>"},{"location":"Learning_resources/Mathematics/Calculus/Integration%20Techniques/#4-trigonometric-integrals","title":"4. Trigonometric Integrals","text":"<p>Trigonometric integrals involve powers of sine, cosine, and other trigonometric functions.</p> <ul> <li>Key Strategies:</li> <li>For \\( \\sin^m(x) \\cos^n(x) \\), reduce powers using \\( \\sin^2(x) + \\cos^2(x) = 1 \\).</li> <li> <p>Use half-angle identities when appropriate.</p> </li> <li> <p>Example:</p> </li> </ul> \\[ \\int \\sin^2(x) dx = \\int \\frac{1 - \\cos(2x)}{2} dx = \\frac{1}{2} \\int dx - \\frac{1}{2} \\int \\cos(2x) dx. \\] \\[ = \\frac{x}{2} - \\frac{1}{4} \\sin(2x) + C. \\]"},{"location":"Learning_resources/Mathematics/Calculus/Integration%20Techniques/#5-partial-fraction-decomposition","title":"5. Partial Fraction Decomposition","text":"<p>This method is used for rational functions where the degree of the numerator is less than the degree of the denominator.</p> <ul> <li>Steps:</li> <li>Factor the denominator.</li> <li>Decompose into partial fractions.</li> <li> <p>Integrate each term.</p> </li> <li> <p>Example:</p> </li> </ul> \\[ \\int \\frac{1}{x^2 - 1} dx = \\int \\frac{1}{(x - 1)(x + 1)} dx. \\] \\[ \\frac{1}{x^2 - 1} = \\frac{A}{x - 1} + \\frac{B}{x + 1} \\quad \\text{Solve for } A, B. \\] \\[ \\int \\frac{1}{x^2 - 1} dx = \\int \\frac{1}{2(x - 1)} dx - \\int \\frac{1}{2(x + 1)} dx. \\] \\[ = \\frac{1}{2} \\ln|x - 1| - \\frac{1}{2} \\ln|x + 1| + C. \\]"},{"location":"Learning_resources/Mathematics/Calculus/Integration%20Techniques/#6-trigonometric-substitution","title":"6. Trigonometric Substitution","text":"<p>This technique is used for integrals involving \\( \\sqrt{a^2 - x^2} \\), \\( \\sqrt{a^2 + x^2} \\), or \\( \\sqrt{x^2 - a^2} \\).</p> <ul> <li>Substitutions:</li> <li>For \\( \\sqrt{a^2 - x^2} \\), use \\( x = a \\sin\\theta \\).</li> <li>For \\( \\sqrt{a^2 + x^2} \\), use \\( x = a \\tan\\theta \\).</li> <li> <p>For \\( \\sqrt{x^2 - a^2} \\), use \\( x = a \\sec\\theta \\).</p> </li> <li> <p>Example:</p> </li> </ul> \\[ \\int \\frac{dx}{\\sqrt{a^2 - x^2}} \\quad \\text{Let } x = a \\sin\\theta, \\; dx = a \\cos\\theta d\\theta. \\] \\[ = \\int \\frac{a \\cos\\theta d\\theta}{a \\cos\\theta} = \\int d\\theta = \\theta + C = \\arcsin\\frac{x}{a} + C. \\]"},{"location":"Learning_resources/Mathematics/Calculus/Integration%20Techniques/#7-improper-integrals","title":"7. Improper Integrals","text":"<p>Improper integrals arise when the limits of integration are infinite or the integrand has a singularity.</p> <ul> <li>Steps:</li> <li>Replace the problematic limit or singularity with a variable.</li> <li> <p>Take the limit as the variable approaches the problematic value.</p> </li> <li> <p>Example:</p> </li> </ul> \\[ \\int_{1}^{\\infty} \\frac{1}{x^2} dx = \\lim_{b \\to \\infty} \\int_{1}^{b} \\frac{1}{x^2} dx. \\] \\[ = \\lim_{b \\to \\infty} \\big[-\\frac{1}{x}\\big]_1^b = \\lim_{b \\to \\infty} \\big(-\\frac{1}{b} + 1\\big) = 1. \\]"},{"location":"Learning_resources/Mathematics/Calculus/Integration%20Techniques/#conclusion","title":"Conclusion","text":"<p>Integration techniques provide the tools to solve a wide range of problems in mathematics, physics, and engineering. Mastery of these methods comes with practice and understanding of when to apply each technique effectively.</p>"},{"location":"Learning_resources/Mathematics/Calculus/Integration/","title":"Calculus Concepts: Integration","text":""},{"location":"Learning_resources/Mathematics/Calculus/Integration/#1-rectilinear-motion-area-and-distances","title":"1. Rectilinear Motion, Area, and Distances","text":""},{"location":"Learning_resources/Mathematics/Calculus/Integration/#intuition","title":"Intuition","text":"<p>Integration helps calculate quantities like area under curves, total distance traveled, or the displacement of an object in rectilinear motion. For motion:</p> <ul> <li>The position \\( s(t) \\) is the integral of velocity \\( v(t) \\).</li> <li>The total distance is the integral of the absolute value of velocity.</li> </ul>"},{"location":"Learning_resources/Mathematics/Calculus/Integration/#example","title":"Example","text":"<p>A particle's velocity is \\( v(t) = t^2 \\) m/s. Find the total distance traveled from \\( t=0 \\) to \\( t=2 \\).</p> \\[ \\text{Distance} = \\int_0^2 |v(t)| \\, dt = \\int_0^2 t^2 \\, dt \\]"},{"location":"Learning_resources/Mathematics/Calculus/Integration/#python-visualization","title":"Python Visualization","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define velocity function\ndef v(t):\n    return t**2\n\n# Time range\nt = np.linspace(0, 2, 500)\ndistance = np.cumsum(v(t) * (t[1] - t[0]))\n\n# Plot\nplt.plot(t, v(t), label='v(t) = t^2')\nplt.fill_between(t, v(t), alpha=0.2, label='Distance Traveled')\nplt.title('Rectilinear Motion: Velocity and Distance')\nplt.xlabel('Time (s)')\nplt.ylabel('Velocity (m/s)')\nplt.legend()\nplt.grid()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Integration/#2-the-definite-integral","title":"2. The Definite Integral","text":""},{"location":"Learning_resources/Mathematics/Calculus/Integration/#intuition_1","title":"Intuition","text":"<p>The definite integral calculates the net area between the curve \\( f(x) \\) and the x-axis over an interval \\([a, b]\\). If \\( f(x) \\) is above the axis, the area is positive; if below, it is negative.</p>"},{"location":"Learning_resources/Mathematics/Calculus/Integration/#mathematical-definition","title":"Mathematical Definition","text":"\\[ \\int_a^b f(x) \\, dx = F(b) - F(a), \\] <p>where \\( F(x) \\) is the antiderivative of \\( f(x) \\).</p>"},{"location":"Learning_resources/Mathematics/Calculus/Integration/#example_1","title":"Example","text":"<p>Find \\( \\int_0^3 (x^2 + 1) \\, dx \\).</p> \\[ \\int_0^3 (x^2 + 1) \\, dx = \\left[ \\frac{x^3}{3} + x \\right]_0^3 = \\left(\\frac{27}{3} + 3\\right) - (0 + 0) = 12 \\]"},{"location":"Learning_resources/Mathematics/Calculus/Integration/#python-visualization_1","title":"Python Visualization","text":"<pre><code>from scipy.integrate import quad\n\n# Define function\ndef f(x):\n    return x**2 + 1\n\n# Compute definite integral\narea, _ = quad(f, 0, 3)\n\n# Plot\nx = np.linspace(0, 3, 500)\ny = f(x)\nplt.plot(x, y, label='f(x) = x^2 + 1')\nplt.fill_between(x, y, alpha=0.2, label=f'Area = {area:.2f}')\nplt.title('Definite Integral')\nplt.xlabel('x')\nplt.ylabel('f(x)')\nplt.legend()\nplt.grid()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Integration/#3-the-fundamental-theorem-of-calculus","title":"3. The Fundamental Theorem of Calculus","text":""},{"location":"Learning_resources/Mathematics/Calculus/Integration/#intuition_2","title":"Intuition","text":"<p>This theorem bridges differentiation and integration:</p> <ol> <li> <p>If \\( F(x) \\) is the antiderivative of \\( f(x) \\), then:</p> \\[ \\int_a^b f(x) \\, dx = F(b) - F(a). \\] </li> <li> <p>The derivative of the integral is the original function:</p> \\[ \\frac{d}{dx} \\int_a^x f(t) \\, dt = f(x). \\] </li> </ol>"},{"location":"Learning_resources/Mathematics/Calculus/Integration/#example_2","title":"Example","text":"<p>Verify the fundamental theorem for \\( f(x) = x^2 \\) over \\([0, 2]\\):</p> \\[ F(x) = \\frac{x^3}{3}, \\quad \\int_0^2 x^2 \\, dx = \\frac{2^3}{3} - \\frac{0^3}{3} = \\frac{8}{3}. \\]"},{"location":"Learning_resources/Mathematics/Calculus/Integration/#python-visualization_2","title":"Python Visualization","text":"<pre><code># Define function and its antiderivative\ndef f(x):\n    return x**2\n\ndef F(x):\n    return x**3 / 3\n\n# Plot\nx = np.linspace(0, 2, 500)\nplt.plot(x, f(x), label='f(x) = x^2')\nplt.plot(x, F(x), '--', label='F(x) = x^3 / 3')\nplt.title('Fundamental Theorem of Calculus')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.legend()\nplt.grid()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Integration/#4-indefinite-integral-and-the-net-change-theorem","title":"4. Indefinite Integral and the Net Change Theorem","text":""},{"location":"Learning_resources/Mathematics/Calculus/Integration/#intuition_3","title":"Intuition","text":"<p>The indefinite integral represents a family of functions, \\( \\int f(x) \\, dx = F(x) + C \\), where \\( C \\) is the constant of integration. The net change theorem states:</p> \\[ \\int_a^b f'(x) \\, dx = f(b) - f(a), \\] <p>indicating that integration gives the total change.</p>"},{"location":"Learning_resources/Mathematics/Calculus/Integration/#example_3","title":"Example","text":"<p>Find the indefinite integral of \\( f(x) = 3x^2 \\):</p> \\[ \\int 3x^2 \\, dx = x^3 + C. \\]"},{"location":"Learning_resources/Mathematics/Calculus/Integration/#python-visualization_3","title":"Python Visualization","text":"<pre><code>from sympy import symbols, integrate\n\n# Symbolic computation\nx = symbols('x')\nexpr = 3*x**2\nindef_integral = integrate(expr, x)\nprint(f\"Indefinite Integral: {indef_integral} + C\")\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Integration/#5-techniques-of-integration","title":"5. Techniques of Integration","text":""},{"location":"Learning_resources/Mathematics/Calculus/Integration/#intuition_4","title":"Intuition","text":"<p>Techniques like substitution, integration by parts, and partial fractions simplify complex integrals.</p>"},{"location":"Learning_resources/Mathematics/Calculus/Integration/#example-substitution","title":"Example: Substitution","text":"<p>Evaluate \\( \\int 2x \\sqrt{x^2 + 1} \\, dx \\):</p> <ol> <li>Substitute \\( u = x^2 + 1 \\), \\( du = 2x \\, dx \\).</li> <li>Integral becomes \\( \\int \\sqrt{u} \\, du \\).</li> <li>Solve \\( \\frac{2}{3} u^{3/2} + C \\).</li> </ol>"},{"location":"Learning_resources/Mathematics/Calculus/Integration/#python-visualization_4","title":"Python Visualization","text":"<pre><code>from sympy import sqrt\n\n# Symbolic computation with substitution\nu = symbols('u')\nexpr_sub = sqrt(u)\nsub_integral = integrate(expr_sub, u)\nprint(f\"After Substitution: {sub_integral} + C\")\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Integration/#6-improper-integral","title":"6. Improper Integral","text":""},{"location":"Learning_resources/Mathematics/Calculus/Integration/#intuition_5","title":"Intuition","text":"<p>Improper integrals extend the concept of integration to unbounded intervals or functions with infinite discontinuities. They are evaluated as limits.</p>"},{"location":"Learning_resources/Mathematics/Calculus/Integration/#example_4","title":"Example","text":"<p>Evaluate \\( \\int_1^\\infty \\frac{1}{x^2} \\, dx \\):</p> \\[ \\int_1^\\infty \\frac{1}{x^2} \\, dx = \\lim_{b \\to \\infty} \\left[-\\frac{1}{x}\\right]_1^b = \\lim_{b \\to \\infty} \\left(-\\frac{1}{b} + 1\\right) = 1. \\]"},{"location":"Learning_resources/Mathematics/Calculus/Integration/#python-visualization_5","title":"Python Visualization","text":"<pre><code># Define the function\ndef improper_integral(x):\n    return 1 / x**2\n\n# Compute numerical approximation\nimproper_area, _ = quad(improper_integral, 1, np.inf)\nprint(f\"Improper Integral Result: {improper_area}\")\n</code></pre> <p>This file covers key integration concepts with detailed explanations, examples, and Python visualizations. Let me know if you need further adjustments or additions!</p>"},{"location":"Learning_resources/Mathematics/Calculus/Limit_And_Continuity/","title":"Limits and Continuity","text":""},{"location":"Learning_resources/Mathematics/Calculus/Limit_And_Continuity/#1-precise-definition-of-limit","title":"1. Precise Definition of Limit","text":""},{"location":"Learning_resources/Mathematics/Calculus/Limit_And_Continuity/#definition","title":"Definition:","text":"<p>The limit of a function \\( f(x) \\) as \\( x \\) approaches \\( c \\) is \\( L \\), written as:</p> \\[ \\lim_{{x \\to c}} f(x) = L \\] <p>This means that as \\( x \\) gets arbitrarily close to \\( c \\), the values of \\( f(x) \\) approach \\( L \\).</p>"},{"location":"Learning_resources/Mathematics/Calculus/Limit_And_Continuity/#varepsilon-delta-definition","title":"\\( \\varepsilon-\\delta \\) Definition:","text":"<p>For every \\( \\varepsilon &gt; 0 \\), there exists a \\( \\delta &gt; 0 \\) such that if \\( 0 &lt; |x - c| &lt; \\delta \\), then: [ |f(x) - L| &lt; \\varepsilon ]</p>"},{"location":"Learning_resources/Mathematics/Calculus/Limit_And_Continuity/#intuition","title":"Intuition:","text":"<ol> <li>\\( \\varepsilon \\): Controls how close \\( f(x) \\) needs to be to \\( L \\).</li> <li>\\( \\delta \\): Controls how close \\( x \\) needs to be to \\( c \\).</li> </ol>"},{"location":"Learning_resources/Mathematics/Calculus/Limit_And_Continuity/#example","title":"Example:","text":""},{"location":"Learning_resources/Mathematics/Calculus/Limit_And_Continuity/#problem","title":"Problem:","text":"<p>Prove \\( \\lim_{{x \\to 2}} (3x + 1) = 7 \\) using the \\( \\varepsilon-\\delta \\) definition.</p>"},{"location":"Learning_resources/Mathematics/Calculus/Limit_And_Continuity/#solution","title":"Solution:","text":"<ol> <li>Given \\( f(x) = 3x + 1 \\), \\( L = 7 \\), \\( c = 2 \\).</li> <li> <p>We want \\( |f(x) - L| &lt; \\varepsilon \\):</p> \\[ |(3x + 1) - 7| = |3x - 6| = 3|x - 2| \\] </li> <li> <p>To satisfy \\( 3|x - 2| &lt; \\varepsilon \\):</p> \\[ |x - 2| &lt; \\frac{\\varepsilon}{3} \\] </li> <li> <p>Choose \\( \\delta = \\frac{\\varepsilon}{3} \\).</p> </li> </ol> <p>Whenever \\( |x - 2| &lt; \\delta \\), it follows that \\( |f(x) - 7| &lt; \\varepsilon \\).</p>"},{"location":"Learning_resources/Mathematics/Calculus/Limit_And_Continuity/#python-visualization","title":"Python Visualization:","text":"<p>Below is a Python function to visualize the \\( \\delta-\\varepsilon \\) relationship for a given function and limit:</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\ndef visualize_limit(f, c, L, epsilon):\n    x = np.linspace(c - 2, c + 2, 1000)\n    y = f(x)\n\n    plt.figure(figsize=(8, 6))\n    plt.plot(x, y, label=f\"f(x)\")\n    plt.axhline(L, color='red', linestyle='--', label=f\"L = {L}\")\n    plt.fill_between(x, L - epsilon, L + epsilon, color='red', alpha=0.2, label=f\"\u03b5 = {epsilon}\")\n\n    delta_region = (x &gt; c - epsilon / 2) &amp; (x &lt; c + epsilon / 2)\n    plt.fill_between(x[delta_region], min(y), max(y), color='blue', alpha=0.2, label=f\"\u03b4 region\")\n\n    plt.scatter([c], [L], color='black', label=\"c\")\n    plt.title(f\"Visualization of Limit at x \u2192 {c}\")\n    plt.legend()\n    plt.grid()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"f(x)\")\n    plt.savefig(\"limit.png\")\n    plt.show()\n\n# Example: Visualize f(x) = 3x + 1, c = 2, L = 7, \u03b5 = 1\nvisualize_limit(lambda x: 3 * x + 1, c=2, L=7, epsilon=1)\n</code></pre>  Limit"},{"location":"Learning_resources/Mathematics/Calculus/Limit_And_Continuity/#2-continuity","title":"2. Continuity","text":""},{"location":"Learning_resources/Mathematics/Calculus/Limit_And_Continuity/#definition_1","title":"Definition:","text":"<p>A function \\( f(x) \\) is continuous at a point \\( c \\) if: 1. \\( f(c) \\) is defined. 2. \\( \\lim_{{x \\to c}} f(x) \\) exists. 3. \\( \\lim_{{x \\to c}} f(x) = f(c) \\).</p>"},{"location":"Learning_resources/Mathematics/Calculus/Limit_And_Continuity/#types-of-discontinuity","title":"Types of Discontinuity:","text":"<ol> <li>Removable Discontinuity:    The limit exists but \\( f(c) \\) is either undefined or does not match the limit.</li> <li>Jump Discontinuity:    The left-hand limit \\( \\lim_{{x \\to c^-}} f(x) \\) and the right-hand limit \\( \\lim_{{x \\to c^+}} f(x) \\) exist but are not equal.</li> <li> <p>Infinite Discontinuity:</p> <p>\\( f(x) \\) approaches infinity as \\( x \\to c \\).</p> </li> </ol>"},{"location":"Learning_resources/Mathematics/Calculus/Limit_And_Continuity/#example_1","title":"Example:","text":""},{"location":"Learning_resources/Mathematics/Calculus/Limit_And_Continuity/#problem_1","title":"Problem:","text":"<p>Determine whether \\( f(x) = \\frac{x^2 - 1}{x - 1} \\) is continuous at \\( x = 1 \\).</p>"},{"location":"Learning_resources/Mathematics/Calculus/Limit_And_Continuity/#solution_1","title":"Solution:","text":"<ol> <li> <p>Simplify \\( f(x) \\):</p> \\[ f(x) = \\frac{x^2 - 1}{x - 1} = \\frac{(x - 1)(x + 1)}{x - 1} = x + 1, \\quad x \\neq 1 \\] </li> <li> <p>\\( f(1) \\) is undefined (discontinuity).</p> </li> <li> <p>The limit exists:</p> \\[ \\lim_{{x \\to 1}} f(x) = 1 + 1 = 2 \\] </li> <li> <p>Discontinuity is removable; redefine \\( f(1) = 2 \\) to make it continuous.</p> </li> </ol>"},{"location":"Learning_resources/Mathematics/Calculus/Limit_And_Continuity/#3-limit-at-infinity-horizontal-asymptotes","title":"3. Limit at Infinity: Horizontal Asymptotes","text":""},{"location":"Learning_resources/Mathematics/Calculus/Limit_And_Continuity/#definition_2","title":"Definition:","text":"<p>The limit of \\( f(x) \\) as \\( x \\to \\infty \\) or \\( x \\to -\\infty \\) describes the horizontal asymptotes of the function. If:</p> \\[ \\lim_{{x \\to \\infty}} f(x) = L \\quad \\text{or} \\quad \\lim_{{x \\to -\\infty}} f(x) = L \\] <p>then \\( y = L \\) is a horizontal asymptote.</p>"},{"location":"Learning_resources/Mathematics/Calculus/Limit_And_Continuity/#key-intuition","title":"Key Intuition:","text":"<p>At extreme values of \\( x \\), the function stabilizes around a constant value \\( L \\).</p>"},{"location":"Learning_resources/Mathematics/Calculus/Limit_And_Continuity/#examples","title":"Examples:","text":""},{"location":"Learning_resources/Mathematics/Calculus/Limit_And_Continuity/#example-1-rational-function","title":"Example 1: Rational Function","text":"<p>\\( f(x) = \\frac{2x^2 + 3}{x^2 + 1} \\)</p>"},{"location":"Learning_resources/Mathematics/Calculus/Limit_And_Continuity/#solution_2","title":"Solution:","text":"<ol> <li> <p>Divide numerator and denominator by \\( x^2 \\):</p> \\[ f(x) = \\frac{2 + \\frac{3}{x^2}}{1 + \\frac{1}{x^2}} \\] </li> <li> <p>As \\( x \\to \\infty \\), \\( \\frac{3}{x^2} \\to 0 \\) and \\( \\frac{1}{x^2} \\to 0 \\):</p> \\[ \\lim_{{x \\to \\infty}} f(x) = \\frac{2 + 0}{1 + 0} = 2 \\] </li> <li> <p>Horizontal asymptote: \\( y = 2 \\).</p> </li> </ol>"},{"location":"Learning_resources/Mathematics/Calculus/Limit_And_Continuity/#example-2-exponential-function","title":"Example 2: Exponential Function","text":"<p>\\( f(x) = e^{-x} \\)</p>"},{"location":"Learning_resources/Mathematics/Calculus/Limit_And_Continuity/#solution_3","title":"Solution:","text":"<ol> <li> <p>As \\( x \\to \\infty \\):</p> \\[ e^{-x} \\to 0 \\] </li> <li> <p>Horizontal asymptote: \\( y = 0 \\).</p> </li> </ol>"},{"location":"Learning_resources/Mathematics/Calculus/Limit_And_Continuity/#python-visualization_1","title":"Python Visualization:","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.linspace(-10, 10, 1000)\ny = (2 * x**2 + 3) / (x**2 + 5)\n\nplt.figure(figsize=(8, 6))\nplt.plot(x, y, label=\"f(x) = (2x^2 + 3) / (x^2 + 5)\")\nplt.axhline(2, color='red', linestyle='--', label=\"y = 2 (Horizontal Asymptote)\")\nplt.title(\"Horizontal Asymptote\")\nplt.legend()\nplt.grid()\nplt.xlabel(\"x\")\nplt.ylabel(\"f(x)\")\n# plt.savefig(\"image.png\")\nplt.show()\n</code></pre>  Asymptote  <p>This visualization demonstrates the behavior of \\( f(x) \\) as \\( x \\to \\pm\\infty \\).</p>"},{"location":"Learning_resources/Mathematics/Calculus/Ordinary%20differential%20Equations/","title":"Ordinary Differential Equations","text":""},{"location":"Learning_resources/Mathematics/Calculus/Ordinary%20differential%20Equations/#1-review-of-ordinary-differential-equations-ode","title":"1. Review of Ordinary Differential Equations (ODE)","text":""},{"location":"Learning_resources/Mathematics/Calculus/Ordinary%20differential%20Equations/#intuition","title":"Intuition","text":"<p>An Ordinary Differential Equation (ODE) relates a function \\( y(x) \\) to its derivatives. The general form of an ODE is:</p> \\[ F(x, y, y', y'', \\dots, y^{(n)}) = 0. \\] <p>ODEs are classified based on:</p> <ul> <li>Order: The highest derivative present.</li> <li>Linearity: Whether the equation can be written as a linear combination of the dependent variable and its derivatives.</li> </ul>"},{"location":"Learning_resources/Mathematics/Calculus/Ordinary%20differential%20Equations/#example","title":"Example","text":"\\[ y' + y = 0 \\quad \\text{(First-order linear ODE)}. \\] <p>The solution is \\( y = Ce^{-x} \\), where \\( C \\) is a constant.</p>"},{"location":"Learning_resources/Mathematics/Calculus/Ordinary%20differential%20Equations/#python-visualization","title":"Python Visualization","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the solution\ndef y(x, C):\n    return C * np.exp(-x)\n\n# Plot\nx = np.linspace(0, 5, 500)\nC = 1\nplt.plot(x, y(x, C), label='y = Ce^{-x}')\nplt.title('Solution of y' + y = 0')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.legend()\nplt.grid()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Ordinary%20differential%20Equations/#2-linear-equations","title":"2. Linear Equations","text":""},{"location":"Learning_resources/Mathematics/Calculus/Ordinary%20differential%20Equations/#intuition_1","title":"Intuition","text":"<p>A first-order linear ODE has the form:</p> \\[ y' + P(x)y = Q(x). \\] <p>The solution is obtained using an integrating factor:</p> \\[ \\mu(x) = e^{\\int P(x) \\, dx}, \\quad y = \\frac{1}{\\mu(x)} \\int \\mu(x)Q(x) \\, dx. \\]"},{"location":"Learning_resources/Mathematics/Calculus/Ordinary%20differential%20Equations/#example_1","title":"Example","text":"<p>Solve \\( y' + y = x \\):</p> \\[ P(x) = 1, \\quad Q(x) = x, \\quad \\mu(x) = e^x. \\] \\[ y = e^{-x} \\int e^x x \\, dx = e^{-x}(x e^x - e^x) + C = x - 1 + Ce^{-x}. \\]"},{"location":"Learning_resources/Mathematics/Calculus/Ordinary%20differential%20Equations/#python-visualization_1","title":"Python Visualization","text":"<pre><code>from sympy import symbols, Function, Eq, exp, dsolve\n\n# Define symbols\nx = symbols('x')\ny = Function('y')\n\n# Define ODE\notde = Eq(y(x).diff(x) + y(x), x)\n\n# Solve ODE\nsolution = dsolve(otde)\nprint(f\"Solution: {solution}\")\n\n# Plot\nC = 1\nx_vals = np.linspace(0, 5, 500)\ny_vals = x_vals - 1 + C * np.exp(-x_vals)\nplt.plot(x_vals, y_vals, label='y = x - 1 + Ce^{-x}')\nplt.title('Solution of y' + y = x')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.legend()\nplt.grid()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Ordinary%20differential%20Equations/#3-second-order-linear-equations","title":"3. Second-Order Linear Equations","text":""},{"location":"Learning_resources/Mathematics/Calculus/Ordinary%20differential%20Equations/#intuition_2","title":"Intuition","text":"<p>A second-order linear ODE has the form:</p> \\[ ay'' + by' + cy = 0. \\] <p>The solution depends on the roots of the characteristic equation \\( ar^2 + br + c = 0 \\):</p> <ol> <li>Distinct real roots: \\( y = C_1 e^{r_1x} + C_2 e^{r_2x} \\).</li> <li>Repeated root: \\( y = (C_1 + C_2x)e^{r_1x} \\).</li> <li>Complex roots: \\( y = e^{\\alpha x}(C_1 \\cos \\beta x + C_2 \\sin \\beta x) \\).</li> </ol>"},{"location":"Learning_resources/Mathematics/Calculus/Ordinary%20differential%20Equations/#example_2","title":"Example","text":"<p>Solve \\( y'' - 3y' + 2y = 0 \\):</p> \\[ \\text{Characteristic equation: } r^2 - 3r + 2 = 0, \\quad r = 1, 2. \\] \\[ y = C_1 e^x + C_2 e^{2x}. \\]"},{"location":"Learning_resources/Mathematics/Calculus/Ordinary%20differential%20Equations/#python-visualization_2","title":"Python Visualization","text":"<pre><code># Define ODE\notde2 = Eq(y(x).diff(x, 2) - 3*y(x).diff(x) + 2*y(x), 0)\n\n# Solve ODE\nsolution2 = dsolve(otde2)\nprint(f\"Solution: {solution2}\")\n\n# Plot\nC1, C2 = 1, 1\nx_vals = np.linspace(0, 5, 500)\ny_vals = C1 * np.exp(x_vals) + C2 * np.exp(2 * x_vals)\nplt.plot(x_vals, y_vals, label='y = C1 e^x + C2 e^{2x}')\nplt.title('Solution of y'' - 3y' + 2y = 0')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.legend()\nplt.grid()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Ordinary%20differential%20Equations/#4-non-homogeneous-linear-equations","title":"4. Non-Homogeneous Linear Equations","text":""},{"location":"Learning_resources/Mathematics/Calculus/Ordinary%20differential%20Equations/#intuition_3","title":"Intuition","text":"<p>A second-order non-homogeneous ODE has the form:</p> \\[ ay'' + by' + cy = G(x). \\] <p>The solution is:</p> \\[ y = y_h + y_p \\] <p>where:</p> <ul> <li>\\( y_h \\): Solution of the homogeneous equation.</li> <li>\\( y_p \\): Particular solution.</li> </ul>"},{"location":"Learning_resources/Mathematics/Calculus/Ordinary%20differential%20Equations/#example_3","title":"Example","text":"<p>Solve \\( y'' - y = e^x \\):</p> \\[ y_h = C_1 e^x + C_2 e^{-x}, \\quad y_p = \\frac{1}{2}x e^x. \\] \\[ y = C_1 e^x + C_2 e^{-x} + \\frac{1}{2}x e^x. \\]"},{"location":"Learning_resources/Mathematics/Calculus/Ordinary%20differential%20Equations/#python-visualization_3","title":"Python Visualization","text":"<pre><code># Define ODE\notde3 = Eq(y(x).diff(x, 2) - y(x), exp(x))\n\n# Solve ODE\nsolution3 = dsolve(otde3)\nprint(f\"Solution: {solution3}\")\n\n# Plot\nC1, C2 = 1, 1\nx_vals = np.linspace(0, 5, 500)\ny_vals = C1 * np.exp(x_vals) + C2 * np.exp(-x_vals) + 0.5 * x_vals * np.exp(x_vals)\nplt.plot(x_vals, y_vals, label='y = C1 e^x + C2 e^{-x} + 0.5x e^x')\nplt.title('Solution of y'' - y = e^x')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.legend()\nplt.grid()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/","title":"Partial Derivatives and Multiple Integrations","text":""},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#1-limit-and-continuity","title":"1. Limit and Continuity","text":""},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#definition","title":"Definition","text":"<p>For a multivariable function \\( f(x, y) \\), the limit as \\( (x, y) \\to (a, b) \\) is:</p> \\[ \\lim_{(x, y) \\to (a, b)} f(x, y) = L \\] <p>if \\( f(x, y) \\) approaches \\( L \\) from all directions.</p> <p>A function is continuous at \\( (a, b) \\) if:</p> <ol> <li>\\( f(a, b) \\) is defined.</li> <li>\\( \\lim_{(x, y) \\to (a, b)} f(x, y) \\) exists.</li> <li>\\( \\lim_{(x, y) \\to (a, b)} f(x, y) = f(a, b) \\).</li> </ol>"},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#real-world-example","title":"Real-World Example","text":"<p>Temperature at a location \\( f(x, y) \\) is continuous if small changes in \\( x \\) and \\( y \\) result in small changes in \\( f(x, y) \\).</p>"},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#example-python-code","title":"Example (Python Code):","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\n# Example of a continuous function f(x, y) = sin(x) * cos(y)\ndef f(x, y):\n    return np.sin(x) * np.cos(y)\n\nx = np.linspace(-np.pi, np.pi, 100)\ny = np.linspace(-np.pi, np.pi, 100)\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\n\nplt.figure(figsize=(8, 6))\nplt.contourf(X, Y, Z, cmap='viridis')\nplt.colorbar(label='f(x, y)')\nplt.title('Continuous Function: f(x, y) = sin(x) * cos(y)')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#2-partial-derivatives","title":"2. Partial Derivatives","text":""},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#definition_1","title":"Definition","text":"<p>The partial derivative of \\( f(x, y) \\) with respect to \\( x \\) is:</p> \\[ \\frac{\\partial f}{\\partial x} = \\lim_{h \\to 0} \\frac{f(x + h, y) - f(x, y)}{h} \\] <p>Similarly, with respect to \\( y \\):</p> \\[ \\frac{\\partial f}{\\partial y} = \\lim_{h \\to 0} \\frac{f(x, y + h) - f(x, y)}{h} \\]"},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#real-world-example_1","title":"Real-World Example","text":"<p>In a heatmap of temperature \\( f(x, y) \\):</p> <ul> <li>\\( \\frac{\\partial f}{\\partial x} \\): Change in temperature in the east-west direction.</li> <li>\\( \\frac{\\partial f}{\\partial y} \\): Change in temperature in the north-south direction.</li> </ul>"},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#example-python-code_1","title":"Example (Python Code):","text":"<pre><code># Compute partial derivatives numerically\ndef f(x, y):\n    return x**2 + y**2\n\ndef partial_x(x, y):\n    return 2 * x\n\ndef partial_y(x, y):\n    return 2 * y\n\nx, y = np.meshgrid(np.linspace(-2, 2, 20), np.linspace(-2, 2, 20))\nz = f(x, y)\ndx = partial_x(x, y)\ndy = partial_y(x, y)\n\nplt.quiver(x, y, dx, dy, color='red')\nplt.contour(x, y, z, cmap='viridis')\nplt.title('Gradient Field of f(x, y) = x^2 + y^2')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#3-tangent-planes","title":"3. Tangent Planes","text":""},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#definition_2","title":"Definition","text":"<p>The tangent plane to \\( z = f(x, y) \\) at \\( (a, b) \\) is:</p> \\[ z - f(a, b) = \\frac{\\partial f}{\\partial x}(a, b)(x - a) + \\frac{\\partial f}{\\partial y}(a, b)(y - b) \\]"},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#real-world-example_2","title":"Real-World Example","text":"<p>In terrain modeling, the tangent plane gives the slope and direction of a hill at a specific point.</p>"},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#example-python-code_2","title":"Example (Python Code):","text":"<pre><code># Tangent plane to f(x, y) = x^2 + y^2 at (1, 1)\ndef tangent_plane(x, y):\n    return 2 * (x - 1) + 2 * (y - 1) + 2\n\nx, y = np.meshgrid(np.linspace(0, 2, 20), np.linspace(0, 2, 20))\nz = f(x, y)\ntz = tangent_plane(x, y)\n\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(x, y, z, alpha=0.6, cmap='viridis', label='Surface')\nax.plot_surface(x, y, tz, alpha=0.4, color='red', label='Tangent Plane')\nax.set_title('Tangent Plane to f(x, y) at (1, 1)')\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#4-maximum-and-minimum-values","title":"4. Maximum and Minimum Values","text":""},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#definition_3","title":"Definition","text":"<p>Critical points occur where \\( \\frac{\\partial f}{\\partial x} = 0 \\) and \\( \\frac{\\partial f}{\\partial y} = 0 \\). </p> <ul> <li>Maximum: \\( f(x, y) \\) reaches a peak.</li> <li>Minimum: \\( f(x, y) \\) reaches a trough.</li> <li>Saddle Point: \\( f(x, y) \\) changes direction.</li> </ul>"},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#example-python-code_3","title":"Example (Python Code):","text":"<pre><code>from scipy.optimize import minimize\n\n# Find critical points of f(x, y) = x^2 + y^2\ndef f_to_minimize(x):\n    return x[0]**2 + x[1]**2\n\nresult = minimize(f_to_minimize, [1, 1])\nprint(\"Critical Point:\", result.x)\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#5-multiple-integrals","title":"5. Multiple Integrals","text":""},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#overview","title":"Overview","text":"<p>Multiple integration extends the concept of single-variable integration to functions of two or more variables. It is used to compute the volume under a surface, areas, or to solve higher-dimensional problems in physics, engineering, and mathematics.</p>"},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#types-of-multiple-integrals","title":"Types of Multiple Integrals:","text":"<ol> <li>Double Integral: Integration over a two-dimensional region.</li> <li>Triple Integral: Integration over a three-dimensional region.</li> </ol>"},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#double-integrals","title":"Double Integrals","text":""},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#definition_4","title":"Definition","text":"<p>A double integral is used to compute the volume under a surface \\( z = f(x, y) \\) over a two-dimensional region \\( R \\).</p> <p>The general form is:</p> \\[ \\iint_R f(x, y) \\ dA \\] <p>where \\( dA \\) is the area element (typically \\( dx \\, dy \\) or \\( dy \\, dx \\)).</p>"},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#example","title":"Example","text":"<p>Evaluate the double integral:</p> \\[ \\iint_R (x + y) \\ dA \\] <p>where \\( R \\) is the rectangle defined by \\( 0 \\leq x \\leq 2 \\) and \\( 0 \\leq y \\leq 3 \\).</p>"},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#solution","title":"Solution:","text":"\\[ \\iint_R (x + y) \\ dA = \\int_0^2 \\int_0^3 (x + y) \\ dy \\ dx \\] <ol> <li> <p>Integrate with respect to \\( y \\):     \\(     \\int_0^3 (x + y) \\ dy = \\left[ xy + \\frac{y^2}{2} \\right]_0^3 = 3x + \\frac{9}{2}     \\)</p> </li> <li> <p>Integrate with respect to \\( x \\): \\( \\int_0^2 \\left( 3x + \\frac{9}{2} \\right) \\ dx = \\left[ \\frac{3x^2}{2} + \\frac{9x}{2} \\right]_0^2 = \\frac{12}{2} + \\frac{18}{2} = 15 \\)</p> </li> </ol> <p>Thus, the value of the integral is \\( 15 \\).</p>"},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#triple-integrals","title":"Triple Integrals","text":""},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#definition_5","title":"Definition","text":"<p>A triple integral is used to compute the volume of a region in three-dimensional space or to integrate functions over a three-dimensional region.</p> <p>The general form is:</p> \\[ \\iiint_V f(x, y, z) \\ dV \\] <p>where \\( dV \\) is the volume element (typically \\( dx \\, dy \\, dz \\), or any permutation).</p>"},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#example_1","title":"Example","text":"<p>Evaluate the triple integral:</p> \\[ \\iiint_V xyz \\ dV \\] <p>where \\( V \\) is the cuboid defined by \\( 0 \\leq x \\leq 1 \\), \\( 0 \\leq y \\leq 2 \\), and \\( 0 \\leq z \\leq 3 \\).</p>"},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#solution_1","title":"Solution:","text":"\\[ \\iiint_V xyz \\ dV = \\int_0^1 \\int_0^2 \\int_0^3 xyz \\ dz \\ dy \\ dx \\] <ol> <li> <p>Integrate with respect to \\( z \\): \\( \\int_0^3 xyz \\ dz = xyz \\left[ z \\right]_0^3 = 3xyz \\)</p> </li> <li> <p>Integrate with respect to \\( y \\): \\( \\int_0^2 3xyz \\ dy = 3x \\int_0^2 y \\ dy = 3x \\left[ \\frac{y^2}{2} \\right]_0^2 = 3x \\cdot 2 = 6x \\)</p> </li> <li> <p>Integrate with respect to \\( x \\): \\( \\int_0^1 6x \\ dx = \\left[ 3x^2 \\right]_0^1 = 3 \\)</p> </li> </ol> <p>Thus, the value of the integral is \\( 3 \\).</p>"},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#applications-of-multiple-integration","title":"Applications of Multiple Integration","text":"<ol> <li>Volume Calculation: Computing the volume under a surface or within a region.</li> <li>Mass and Density: Finding mass when density varies over a region.</li> <li>Centroids and Moments of Inertia: Used in mechanics and structural engineering.</li> </ol>"},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#practice-problems","title":"Practice Problems","text":"<ol> <li> <p>Evaluate:</p> \\[ \\iint_R x^2y \\ dA, \\quad R = [0, 1] \\times [0, 2]. \\] </li> <li> <p>Compute:</p> \\[ \\iiint_V x + y + z \\ dV, \\quad V: 0 \\leq x \\leq 1, 0 \\leq y \\leq 1, 0 \\leq z \\leq 2. \\] </li> <li> <p>Solve for the volume of the region bounded by \\( x^2 + y^2 \\leq 1 \\) and \\( 0 \\leq z \\leq 3 \\).</p> </li> </ol>"},{"location":"Learning_resources/Mathematics/Calculus/Partial%20Derivatives%20and%20Multiple%20Integrals/#example-python-code_4","title":"Example (Python Code):","text":"<pre><code>from scipy.integrate import dblquad\n\n# Double integral of f(x, y) = x^2 + y^2 over x: [0, 1], y: [0, 1]\ndef integrand(x, y):\n    return x**2 + y**2\n\nresult, _ = dblquad(integrand, 0, 1, lambda x: 0, lambda x: 1)\nprint(\"Double Integral Result:\", result)\n</code></pre> <p>For further reading, check the documentation or consult advanced calculus textbooks.</p>"},{"location":"Learning_resources/Mathematics/Calculus/Plane%20and%20Space%20Vectors/","title":"Plane and Space Vectors","text":""},{"location":"Learning_resources/Mathematics/Calculus/Plane%20and%20Space%20Vectors/#1-vectors-in-terms-of-coordinates","title":"1. Vectors in Terms of Coordinates","text":""},{"location":"Learning_resources/Mathematics/Calculus/Plane%20and%20Space%20Vectors/#definition","title":"Definition","text":"<p>A vector in 2D or 3D space is represented as an ordered pair or triplet of coordinates:</p> <ul> <li>2D vector: \\( \\mathbf{v} = (v_x, v_y) \\)</li> <li>3D vector: \\( \\mathbf{v} = (v_x, v_y, v_z) \\)</li> </ul>"},{"location":"Learning_resources/Mathematics/Calculus/Plane%20and%20Space%20Vectors/#operations","title":"Operations","text":"<ol> <li>Addition: \\( \\mathbf{u} + \\mathbf{v} = (u_x + v_x, u_y + v_y) \\)</li> <li>Scalar Multiplication: \\( c \\cdot \\mathbf{v} = (c v_x, c v_y) \\)</li> <li>Dot Product:</li> </ol> \\[ \\mathbf{u} \\cdot \\mathbf{v} = u_x v_x + u_y v_y + u_z v_z \\] <ol> <li>Cross Product (3D):</li> </ol> \\[ \\mathbf{u} \\times \\mathbf{v} = (u_y v_z - u_z v_y, u_z v_x - u_x v_z, u_x v_y - u_y v_x) \\]"},{"location":"Learning_resources/Mathematics/Calculus/Plane%20and%20Space%20Vectors/#example-python-code","title":"Example (Python Code):","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\n# Vectors\nu = np.array([3, 2, 1])\nv = np.array([1, -1, 4])\n\n# Vector operations\nvector_add = u + v\nscalar_mul = 2 * u\ndot_product = np.dot(u, v)\ncross_product = np.cross(u, v)\n\nprint(\"Vector Addition:\", vector_add)\nprint(\"Scalar Multiplication:\", scalar_mul)\nprint(\"Dot Product:\", dot_product)\nprint(\"Cross Product:\", cross_product)\n\n# Visualization\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(0, 0, 0, u[0], u[1], u[2], color='r', label='u')\nax.quiver(0, 0, 0, v[0], v[1], v[2], color='b', label='v')\nax.quiver(0, 0, 0, vector_add[0], vector_add[1], vector_add[2], color='g', label='u+v')\nax.set_xlim([-1, 5])\nax.set_ylim([-2, 3])\nax.set_zlim([0, 5])\nax.legend()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Plane%20and%20Space%20Vectors/#2-lines-and-planes-in-space","title":"2. Lines and Planes in Space","text":""},{"location":"Learning_resources/Mathematics/Calculus/Plane%20and%20Space%20Vectors/#lines-in-space","title":"Lines in Space","text":"<p>A line in 3D space is defined by a point \\( \\mathbf{r_0} \\) and a direction vector \\( \\mathbf{v} \\):</p> \\[ \\mathbf{r}(t) = \\mathbf{r_0} + t \\mathbf{v}, \\quad t \\in \\mathbb{R} \\]"},{"location":"Learning_resources/Mathematics/Calculus/Plane%20and%20Space%20Vectors/#planes-in-space","title":"Planes in Space","text":"<p>A plane is defined by a point \\( \\mathbf{r_0} \\) and a normal vector \\( \\mathbf{n} \\):</p> \\[ \\mathbf{n} \\cdot (\\mathbf{r} - \\mathbf{r_0}) = 0 \\] <p>Expanded:</p> \\[ A x + B y + C z + D = 0 \\]"},{"location":"Learning_resources/Mathematics/Calculus/Plane%20and%20Space%20Vectors/#example-python-code_1","title":"Example (Python Code):","text":"<pre><code>from mpl_toolkits.mplot3d import Axes3D\n\n# Line parameters\nr0 = np.array([1, 2, 3])\nv = np.array([2, -1, 1])\nt = np.linspace(-5, 5, 100)\nline = r0[:, None] + t * v[:, None]\n\n# Plane parameters\nx, y = np.meshgrid(np.linspace(-5, 5, 10), np.linspace(-5, 5, 10))\nA, B, C, D = 2, -1, 3, -4\nz = (-A * x - B * y - D) / C\n\n# Visualization\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot(line[0], line[1], line[2], label='Line')\nax.plot_surface(x, y, z, alpha=0.5, label='Plane')\nax.legend()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Plane%20and%20Space%20Vectors/#3-derivatives-and-integrals-of-vector-functions-arc-length-and-motion-in-space","title":"3. Derivatives and Integrals of Vector Functions, Arc Length, and Motion in Space","text":""},{"location":"Learning_resources/Mathematics/Calculus/Plane%20and%20Space%20Vectors/#derivatives-of-vector-functions","title":"Derivatives of Vector Functions","text":"<p>For \\( \\mathbf{r}(t) = \\langle x(t), y(t), z(t) \\rangle \\):</p> \\[ \\mathbf{r}'(t) = \\langle x'(t), y'(t), z'(t) \\rangle \\]"},{"location":"Learning_resources/Mathematics/Calculus/Plane%20and%20Space%20Vectors/#arc-length","title":"Arc Length","text":"\\[ L = \\int_a^b \\| \\mathbf{r}'(t) \\| dt \\]"},{"location":"Learning_resources/Mathematics/Calculus/Plane%20and%20Space%20Vectors/#example-python-code_2","title":"Example (Python Code):","text":"<pre><code>from scipy.integrate import quad\n\n# Vector function\nr = lambda t: np.array([np.sin(t), np.cos(t), t])\ndr_dt = lambda t: np.array([np.cos(t), -np.sin(t), 1])\n\n# Arc length\narc_length = quad(lambda t: np.linalg.norm(dr_dt(t)), 0, 2 * np.pi)[0]\nprint(\"Arc Length:\", arc_length)\n\n# Visualization\nt_vals = np.linspace(0, 2 * np.pi, 100)\ncurve = np.array([r(t) for t in t_vals]).T\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot(curve[0], curve[1], curve[2], label='Curve')\nax.legend()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Calculus/Plane%20and%20Space%20Vectors/#4-unit-tangent-vector-curvature-and-tnb-system","title":"4. Unit Tangent Vector, Curvature, and TNB System","text":""},{"location":"Learning_resources/Mathematics/Calculus/Plane%20and%20Space%20Vectors/#unit-tangent-vector","title":"Unit Tangent Vector","text":"\\[ \\mathbf{T}(t) = \\frac{\\mathbf{r}'(t)}{\\| \\mathbf{r}'(t) \\|} \\]"},{"location":"Learning_resources/Mathematics/Calculus/Plane%20and%20Space%20Vectors/#curvature","title":"Curvature","text":"\\[ \\kappa(t) = \\frac{\\| \\mathbf{r}'(t) \\times \\mathbf{r}''(t) \\|}{\\| \\mathbf{r}'(t) \\|^3} \\]"},{"location":"Learning_resources/Mathematics/Calculus/Plane%20and%20Space%20Vectors/#tnb-system","title":"TNB System","text":"<ul> <li>Tangent (T): Direction of motion.</li> <li>Normal (N): Perpendicular to \\( T \\), pointing toward the center of curvature.</li> <li>Binormal (B): \\( \\mathbf{T} \\times \\mathbf{N} \\).</li> </ul>"},{"location":"Learning_resources/Mathematics/Calculus/Plane%20and%20Space%20Vectors/#example-python-code_3","title":"Example (Python Code):","text":"<pre><code># TNB System\nr_ddt = lambda t: np.array([-np.sin(t), -np.cos(t), 0])\nT = lambda t: dr_dt(t) / np.linalg.norm(dr_dt(t))\nN = lambda t: r_ddt(t) / np.linalg.norm(r_ddt(t))\nB = lambda t: np.cross(T(t), N(t))\n\n# Compute T, N, B at a specific point\nt = np.pi / 4\nT_vec = T(t)\nN_vec = N(t)\nB_vec = B(t)\nprint(\"Tangent Vector:\", T_vec)\nprint(\"Normal Vector:\", N_vec)\nprint(\"Binormal Vector:\", B_vec)\n\n# Visualization\norigin = r(t)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(*origin, *T_vec, color='r', label='Tangent')\nax.quiver(*origin, *N_vec, color='g', label='Normal')\nax.quiver(*origin, *B_vec, color='b', label='Binormal')\nax.legend()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Determinants/","title":"Determinants","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Determinants/#1-introduction-to-determinants","title":"1. Introduction to Determinants","text":"<p>A determinant is a scalar value associated with a square matrix. It provides important information about the matrix, such as invertibility, and plays a crucial role in linear algebra.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Determinants/#notation","title":"Notation","text":"<p>For a square matrix \\(A\\):</p> \\[ \\det(A) \\quad \\text{or} \\quad |A| \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Determinants/#determinants-of-small-matrices","title":"Determinants of Small Matrices","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Determinants/#2x2-matrix","title":"2x2 Matrix","text":"<p>For \\(A = \\begin{bmatrix} a &amp; b \\\\ c &amp; d \\end{bmatrix}\\):</p> \\[ \\det(A) = ad - bc \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Determinants/#3x3-matrix","title":"3x3 Matrix","text":"<p>For \\(A = \\begin{bmatrix} a &amp; b &amp; c \\\\ d &amp; e &amp; f \\\\ g &amp; h &amp; i \\end{bmatrix}\\):</p> \\[ \\det(A) = a(ei - fh) - b(di - fg) + c(dh - eg) \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Determinants/#applications-of-determinants","title":"Applications of Determinants","text":"<ol> <li>Determining invertibility (\\(\\det(A) \\neq 0\\) implies \\(A\\) is invertible).</li> <li>Calculating volumes of parallelepipeds.</li> <li>Solving systems of linear equations using Cramer\u2019s Rule.</li> <li>Analyzing the effects of linear transformations.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Determinants/#2-properties-of-determinants","title":"2. Properties of Determinants","text":"<p>Determinants have several useful properties that simplify calculations and provide insight into matrix behavior.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Determinants/#key-properties","title":"Key Properties","text":"<ol> <li> <p>Determinant of Identity Matrix:</p> \\[ \\det(I) = 1 \\] </li> <li> <p>Row or Column Swapping:    Swapping two rows (or columns) changes the sign of the determinant.</p> </li> <li> <p>Scalar Multiplication:    If a row (or column) is multiplied by a scalar \\(k\\):</p> \\[ \\det(A') = k \\det(A) \\] </li> <li> <p>Additive Property:    Adding a multiple of one row to another does not change the determinant.</p> </li> <li> <p>Zero Row or Column:    If a matrix has a row or column of all zeros:</p> \\[ \\det(A) = 0 \\] </li> <li> <p>Upper or Lower Triangular Matrix:    For triangular matrices, the determinant is the product of the diagonal elements:</p> \\[ \\det(A) = a_{11}a_{22}\\cdots a_{nn} \\] </li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Determinants/#code-example","title":"Code Example","text":"<pre><code>import numpy as np\n\n# Define a matrix\nA = np.array([[2, 1], [5, 3]])\n\n# Compute the determinant\ndet_A = np.linalg.det(A)\nprint(\"Determinant:\", round(det_A))\n</code></pre>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Determinants/#3-cramers-rule-volume-and-linear-transformations","title":"3. Cramer\u2019s Rule, Volume, and Linear Transformations","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Determinants/#cramers-rule","title":"Cramer\u2019s Rule","text":"<p>Cramer\u2019s Rule solves systems of linear equations \\(A\\mathbf{x} = \\mathbf{b}\\) using determinants.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Determinants/#formula","title":"Formula","text":"<p>For \\(n \\times n\\) matrix \\(A\\):\\</p> \\[ x_i = \\frac{\\det(A_i)}{\\det(A)} \\] <p>Where \\(A_i\\) is the matrix formed by replacing the \\(i\\)-th column of \\(A\\) with \\(\\mathbf{b}\\).</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Determinants/#example","title":"Example","text":"<p>Solve:</p> \\[ \\begin{cases} 2x + 3y = 8 \\\\ 4x + y = 10 \\end{cases} \\] <p>Solution:</p> \\[ A = \\begin{bmatrix} 2 &amp; 3 \\\\ 4 &amp; 1 \\end{bmatrix}, \\quad \\mathbf{b} = \\begin{bmatrix} 8 \\\\ 10 \\end{bmatrix} \\] \\[ \\det(A) = (2)(1) - (3)(4) = -10 \\] \\[ A_x = \\begin{bmatrix} 8 &amp; 3 \\\\ 10 &amp; 1 \\end{bmatrix}, \\quad A_y = \\begin{bmatrix} 2 &amp; 8 \\\\ 4 &amp; 10 \\end{bmatrix} \\] \\[ x = \\frac{\\det(A_x)}{\\det(A)} = \\frac{-14}{-10} = 1.4, \\quad y = \\frac{\\det(A_y)}{\\det(A)} = \\frac{-20}{-10} = 2 \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Determinants/#code-example_1","title":"Code Example","text":"<pre><code># Define matrices\nA = np.array([[2, 3], [4, 1]])\nb = np.array([8, 10])\n\n# Solve using Cramer's Rule\ndet_A = np.linalg.det(A)\nx1 = np.linalg.det(np.column_stack((b, A[:, 1]))) / det_A\nx2 = np.linalg.det(np.column_stack((A[:, 0], b))) / det_A\n\nprint(\"Solution:\", (x1, x2))\n</code></pre>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Determinants/#volume-and-determinants","title":"Volume and Determinants","text":"<p>The determinant of a matrix formed by vectors \\(\\mathbf{v}_1, \\mathbf{v}_2, \\dots, \\mathbf{v}_n\\) represents the volume of the parallelepiped they span.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Determinants/#formula_1","title":"Formula","text":"<p>For vectors \\(\\mathbf{v}_1, \\mathbf{v}_2, \\dots, \\mathbf{v}_n\\):</p> \\[ \\text{Volume} = |\\det([\\mathbf{v}_1 \\ \\mathbf{v}_2 \\ \\cdots \\ \\mathbf{v}_n])| \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Determinants/#example_1","title":"Example","text":"<p>Calculate the volume of a parallelepiped spanned by:</p> \\[ \\mathbf{v}_1 = \\begin{bmatrix} 1 \\\\ 0 \\\\ 0 \\end{bmatrix}, \\quad \\mathbf{v}_2 = \\begin{bmatrix} 0 \\\\ 1 \\\\ 0 \\end{bmatrix}, \\quad \\mathbf{v}_3 = \\begin{bmatrix} 0 \\\\ 0 \\\\ 2 \\end{bmatrix} \\] <p>Solution:</p> \\[ \\text{Matrix} = \\begin{bmatrix} 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; 2 \\end{bmatrix} \\] \\[ \\text{Volume} = |\\det(A)| = |1 \\cdot 1 \\cdot 2| = 2 \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Determinants/#code-example_2","title":"Code Example","text":"<pre><code># Define vectors\nv1 = np.array([1, 0, 0])\nv2 = np.array([0, 1, 0])\nv3 = np.array([0, 0, 2])\n\n# Form matrix and compute volume\nA = np.column_stack((v1, v2, v3))\nvolume = abs(np.linalg.det(A))\nprint(\"Volume:\", volume)\n</code></pre>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Determinants/#determinants-in-linear-transformations","title":"Determinants in Linear Transformations","text":"<p>The determinant of a transformation matrix \\(T\\) indicates how the transformation scales areas or volumes:</p> <ul> <li>\\(\\det(T) &gt; 0\\): Preserves orientation.</li> <li>\\(\\det(T) &lt; 0\\): Reverses orientation.</li> <li>\\(\\det(T) = 0\\): Flattens the space (non-invertible).</li> </ul> <p>This guide covers determinants in-depth with examples, properties, and practical applications. Let me know if you need additional sections or clarifications!</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Eigenvalues%20and%20Eigenvectors/","title":"Introduction to Eigenvalues and Eigenvectors","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Eigenvalues%20and%20Eigenvectors/#what-are-eigenvalues-and-eigenvectors","title":"What Are Eigenvalues and Eigenvectors?","text":"<p>Eigenvalues and eigenvectors are fundamental concepts in linear algebra, appearing in many areas such as physics, computer science, and engineering.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Eigenvalues%20and%20Eigenvectors/#definition","title":"Definition","text":"<ul> <li> <p>Eigenvector: A non-zero vector \\( \\mathbf{v} \\) such that when a linear transformation (matrix \\( A \\)) is applied to it, the vector is scaled by a scalar \\( \\lambda \\):</p> \\[ A \\mathbf{v} = \\lambda \\mathbf{v} \\] </li> <li> <p>Eigenvalue: The scalar \\( \\lambda \\) that corresponds to an eigenvector \\( \\mathbf{v} \\).</p> </li> </ul>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Eigenvalues%20and%20Eigenvectors/#key-properties","title":"Key Properties","text":"<ol> <li>Eigenvectors corresponding to distinct eigenvalues are linearly independent.</li> <li>If \\( A \\) is an \\( n \\times n \\) matrix, there are at most \\( n \\) eigenvalues (some may be repeated).</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Eigenvalues%20and%20Eigenvectors/#example","title":"Example","text":"<p>Given:</p> \\[ A = \\begin{bmatrix} 2 &amp; 1 \\\\ 1 &amp; 2 \\end{bmatrix} \\] <p>Find eigenvalues and eigenvectors.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Eigenvalues%20and%20Eigenvectors/#solution","title":"Solution","text":"<ol> <li> <p>Compute \\( \\det(A - \\lambda I) \\):</p> \\[ \\det\\left(\\begin{bmatrix} 2 - \\lambda &amp; 1 \\\\ 1 &amp; 2 - \\lambda \\end{bmatrix}\\right) = (2-\\lambda)^2 - 1 = \\lambda^2 - 4\\lambda + 3 \\] <p>Solve \\( \\lambda^2 - 4\\lambda + 3 = 0 \\) to get \\( \\lambda_1 = 3 \\), \\( \\lambda_2 = 1 \\)</p> </li> <li> <p>Find eigenvectors for each eigenvalue:</p> <ul> <li>For \\( \\lambda = 3 \\): Solve \\( (A - 3I) \\mathbf{v} = 0 \\).</li> <li>For \\( \\lambda = 1 \\): Solve \\( (A - I) \\mathbf{v} = 0 \\).</li> </ul> </li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Eigenvalues%20and%20Eigenvectors/#the-characteristic-equation","title":"The Characteristic Equation","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Eigenvalues%20and%20Eigenvectors/#definition_1","title":"Definition","text":"<p>The characteristic equation of a square matrix \\( A \\) is derived from \\( \\det(A - \\lambda I) = 0 \\). This polynomial equation determines the eigenvalues of \\( A \\).</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Eigenvalues%20and%20Eigenvectors/#steps-to-formulate","title":"Steps to Formulate","text":"<ol> <li> <p>Subtract \\( \\lambda I \\) from \\( A \\):</p> \\[ A - \\lambda I \\] </li> <li> <p>Compute the determinant:</p> \\[ \\det(A - \\lambda I) \\] </li> <li> <p>Set \\( \\det(A - \\lambda I) = 0 \\).</p> </li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Eigenvalues%20and%20Eigenvectors/#example_1","title":"Example","text":"<p>For \\( A = \\begin{bmatrix} 4 &amp; 2 \\\\ 1 &amp; 3 \\end{bmatrix} \\):</p> <ol> <li>\\( A - \\lambda I = \\begin{bmatrix} 4-\\lambda &amp; 2 \\\\ 1 &amp; 3-\\lambda \\end{bmatrix} \\).</li> <li>\\( \\det(A - \\lambda I) = (4-\\lambda)(3-\\lambda) - 2 \\cdot 1 = \\lambda^2 - 7\\lambda + 10 \\).</li> <li>Solve \\( \\lambda^2 - 7\\lambda + 10 = 0 \\) to get \\( \\lambda = 5, 2 \\).</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Eigenvalues%20and%20Eigenvectors/#diagonalization","title":"Diagonalization","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Eigenvalues%20and%20Eigenvectors/#what-is-diagonalization","title":"What Is Diagonalization?","text":"<p>A matrix \\( A \\) is diagonalizable if it can be expressed as:</p> \\[ A = PDP^{-1} \\] <p>where:</p> <ul> <li>\\( P \\) is a matrix whose columns are the eigenvectors of \\( A \\).</li> <li>\\( D \\) is a diagonal matrix with eigenvalues of \\( A \\) on its diagonal.</li> </ul>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Eigenvalues%20and%20Eigenvectors/#conditions-for-diagonalization","title":"Conditions for Diagonalization","text":"<ol> <li>\\( A \\) must have \\( n \\) linearly independent eigenvectors.</li> <li>\\( A \\) must be a square matrix.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Eigenvalues%20and%20Eigenvectors/#steps-to-diagonalize","title":"Steps to Diagonalize","text":"<ol> <li>Find eigenvalues \\( \\lambda_1, \\lambda_2, \\dots \\).</li> <li>Find eigenvectors for each eigenvalue.</li> <li>Form \\( P \\) using eigenvectors as columns.</li> <li>Form \\( D \\) with eigenvalues along the diagonal.</li> <li>Compute \\( P^{-1} \\).</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Eigenvalues%20and%20Eigenvectors/#example_2","title":"Example","text":"<p>For \\( A = \\begin{bmatrix} 4 &amp; 1 \\\\ 2 &amp; 3 \\end{bmatrix} \\):</p> <ol> <li>Eigenvalues: \\( \\lambda_1 = 5, \\lambda_2 = 2 \\).</li> <li>Eigenvectors: \\( \\mathbf{v}_1 = \\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix}, \\mathbf{v}_2 = \\begin{bmatrix} -1 \\\\ 1 \\end{bmatrix} \\).</li> <li>\\( P = \\begin{bmatrix} 1 &amp; -1 \\\\ 2 &amp; 1 \\end{bmatrix} \\), \\( D = \\begin{bmatrix} 5 &amp; 0 \\\\ 0 &amp; 2 \\end{bmatrix} \\).</li> <li>\\( P^{-1} = \\begin{bmatrix} 1/3 &amp; 1/3 \\\\ -2/3 &amp; 1/3 \\end{bmatrix} \\).</li> <li>Verify: \\( A = PDP^{-1} \\).</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Eigenvalues%20and%20Eigenvectors/#eigenvectors-and-linear-transformations","title":"Eigenvectors and Linear Transformations","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Eigenvalues%20and%20Eigenvectors/#geometric-interpretation","title":"Geometric Interpretation","text":"<p>An eigenvector represents a direction that remains unchanged under the linear transformation defined by \\( A \\), except for scaling by the eigenvalue \\( \\lambda \\).</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Eigenvalues%20and%20Eigenvectors/#applications","title":"Applications","text":"<ul> <li>Principal Component Analysis (PCA): Eigenvectors represent principal directions of data variance.</li> <li>Quantum Mechanics: Eigenvalues correspond to measurable quantities.</li> <li>Graph Theory: Eigenvectors indicate centrality in networks.</li> </ul>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Eigenvalues%20and%20Eigenvectors/#example_3","title":"Example","text":"<p>For a transformation \\( A \\):</p> \\[ A \\begin{bmatrix} x \\\\ y \\end{bmatrix} = \\begin{bmatrix} 2x + y \\\\ x + 2y \\end{bmatrix} \\] <p>Find eigenvalues and interpret geometrically.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Eigenvalues%20and%20Eigenvectors/#complex-eigenvalues","title":"Complex Eigenvalues","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Eigenvalues%20and%20Eigenvectors/#definition_2","title":"Definition","text":"<p>If \\( A \\) has complex eigenvalues, they appear in conjugate pairs \\( \\lambda = a \\pm bi \\).</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Eigenvalues%20and%20Eigenvectors/#example_4","title":"Example","text":"<p>For \\( A = \\begin{bmatrix} 0 &amp; -1 \\\\ 1 &amp; 0 \\end{bmatrix} \\): 1. \\( \\det(A - \\lambda I) = \\lambda^2 + 1 = 0 \\). 2. Eigenvalues: \\( \\lambda = i, -i \\). 3. Eigenvectors involve complex numbers, e.g., \\( \\mathbf{v} = \\begin{bmatrix} i \\\\ 1 \\end{bmatrix} \\).</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Eigenvalues%20and%20Eigenvectors/#discrete-dynamical-systems","title":"Discrete Dynamical Systems","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Eigenvalues%20and%20Eigenvectors/#definition_3","title":"Definition","text":"<p>A discrete dynamical system evolves in discrete time steps according to:</p> \\[ \\mathbf{x}_{n+1} = A \\mathbf{x}_n \\] <p>where \\( A \\) is the transition matrix.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Eigenvalues%20and%20Eigenvectors/#stability-analysis","title":"Stability Analysis","text":"<ol> <li>Compute eigenvalues of \\( A \\).</li> <li>If all \\( |\\lambda| &lt; 1 \\), the system is stable.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Eigenvalues%20and%20Eigenvectors/#example_5","title":"Example","text":"<p>For \\( A = \\begin{bmatrix} 0.5 &amp; 0.5 \\\\ 0.2 &amp; 0.8 \\end{bmatrix} \\): 1. Eigenvalues: \\( \\lambda = 1, 0.3 \\). 2. System is stable as \\( |\\lambda| &lt; 1 \\).</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Eigenvalues%20and%20Eigenvectors/#applications_1","title":"Applications","text":"<ul> <li>Population models</li> <li>Economic systems</li> <li>Markov chains</li> </ul>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Group%20and%20Subgroups/","title":"Introduction to Group and Subgroups","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Group%20and%20Subgroups/#what-is-a-group","title":"What is a Group?","text":"<p>A group is a set \\( G \\) equipped with an operation \\( * \\) that combines any two elements \\( a \\) and \\( b \\) to form another element, denoted \\( a * b \\). To qualify as a group, the set and operation must satisfy four properties:</p> <ol> <li>Closure: For all \\( a, b \\in G \\), \\( a * b \\in G \\).</li> <li>Associativity: For all \\( a, b, c \\in G \\), \\( (a * b) * c = a * (b * c) \\).</li> <li>Identity Element: There exists an element \\( e \\in G \\) such that \\( e * a = a * e = a \\) for all \\( a \\in G \\).</li> <li>Inverse Element: For each \\( a \\in G \\), there exists \\( b \\in G \\) such that \\( a * b = b * a = e \\).</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Group%20and%20Subgroups/#examples","title":"Examples","text":"<ol> <li>Integers under Addition:</li> <li>Set: \\( \\mathbb{Z} \\)</li> <li>Operation: Addition (+)</li> <li> <p>Properties: Satisfies closure, associativity, identity (0), and inverses (-a).</p> </li> <li> <p>Non-Zero Real Numbers under Multiplication:</p> </li> <li>Set: \\( \\mathbb{R}^* \\)</li> <li>Operation: Multiplication (\u00d7)</li> <li>Properties: Satisfies closure, associativity, identity (1), and inverses (\\( 1/a \\)).</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Group%20and%20Subgroups/#sets-and-set-operations","title":"Sets and Set Operations","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Group%20and%20Subgroups/#definition-of-a-set","title":"Definition of a Set","text":"<p>A set is a well-defined collection of distinct objects, called elements. Examples:</p> \\[ A = \\{1, 2, 3, 4\\}, \\quad B = \\{x \\in \\mathbb{R} : x^2 \\leq 4\\} \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Group%20and%20Subgroups/#common-set-operations","title":"Common Set Operations","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Group%20and%20Subgroups/#union","title":"Union","text":"\\[ A \\cup B = \\{x : x \\in A \\text{ or } x \\in B\\} \\] <p>Example: \\( A = \\{1, 2\\}, B = \\{2, 3\\} \\Rightarrow A \\cup B = \\{1, 2, 3\\} \\).</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Group%20and%20Subgroups/#intersection","title":"Intersection","text":"\\[ A \\cap B = \\{x : x \\in A \\text{ and } x \\in B\\} \\] <p>Example: \\( A = \\{1, 2\\}, B = \\{2, 3\\} \\Rightarrow A \\cap B = \\{2\\} \\).</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Group%20and%20Subgroups/#difference","title":"Difference","text":"\\[ A \\setminus B = \\{x : x \\in A \\text{ and } x \\notin B\\} \\] <p>Example: \\( A = \\{1, 2\\}, B = \\{2, 3\\} \\Rightarrow A \\setminus B = \\{1\\} \\).</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Group%20and%20Subgroups/#cartesian-product","title":"Cartesian Product","text":"\\[ A \\times B = \\{(a, b) : a \\in A, b \\in B\\} \\] <p>Example: \\( A = \\{1, 2\\}, B = \\{3, 4\\} \\Rightarrow A \\times B = \\{(1, 3), (1, 4), (2, 3), (2, 4)\\} \\).</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Group%20and%20Subgroups/#mappings","title":"Mappings","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Group%20and%20Subgroups/#definition","title":"Definition","text":"<p>A mapping (or function) is a rule that assigns each element of one set (domain) to exactly one element of another set (codomain).</p> \\[  f : A \\to B \\quad \\text{where } f(a) \\in B \\text{ for all } a \\in A. \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Group%20and%20Subgroups/#types-of-mappings","title":"Types of Mappings","text":"<ol> <li>Injective (One-to-One): Different elements in the domain map to different elements in the codomain.</li> <li>Surjective (Onto): Every element in the codomain is the image of some element in the domain.</li> <li>Bijective: Both injective and surjective.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Group%20and%20Subgroups/#example","title":"Example","text":"<p>\\( f(x) = x^2 \\):</p> <ul> <li>Domain: \\( \\mathbb{R} \\), Codomain: \\( \\mathbb{R} \\)</li> <li>Not injective (\\( f(-2) = f(2) \\)).</li> <li>Not surjective (no \\( x \\) maps to \\( -1 \\) in \\( \\mathbb{R} \\)).</li> </ul>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Group%20and%20Subgroups/#group","title":"Group","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Group%20and%20Subgroups/#examples-of-groups","title":"Examples of Groups","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Group%20and%20Subgroups/#symmetry-group","title":"Symmetry Group","text":"<p>The set of all rotations and reflections of a geometric figure forms a group under composition.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Group%20and%20Subgroups/#modular-arithmetic","title":"Modular Arithmetic","text":"<p>For \\( n \\in \\mathbb{Z} \\), the set \\( \\{0, 1, \\dots, n-1\\} \\) under addition modulo \\( n \\) is a group.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Group%20and%20Subgroups/#subgroups","title":"Subgroups","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Group%20and%20Subgroups/#definition_1","title":"Definition","text":"<p>A subset \\( H \\subseteq G \\) is a subgroup of \\( G \\) if \\( H \\) itself forms a group under the operation of \\( G \\).</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Group%20and%20Subgroups/#subgroup-criteria","title":"Subgroup Criteria","text":"<ol> <li>\\( e \\in H \\).</li> <li>For all \\( a, b \\in H \\), \\( a * b \\in H \\).</li> <li>For all \\( a \\in H \\), \\( a^{-1} \\in H \\).</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Group%20and%20Subgroups/#example_1","title":"Example","text":"<p>\\( G = \\mathbb{Z}, H = 2\\mathbb{Z} \\):</p> <ol> <li>\\( 0 \\in H \\).</li> <li>Closure: Sum of even numbers is even.</li> <li>Inverses: Negatives of even numbers are even.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Group%20and%20Subgroups/#tips-and-tricks","title":"Tips and Tricks","text":"<ol> <li>Verify Group Properties: Always check all four properties to confirm a group.</li> <li>Subgroup Test: For finite groups, closure and inverses imply the subgroup.</li> <li>Symmetry Insight: Symmetry groups simplify problems in geometry and physics.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Linear%20Equations%20in%20Linear%20Algebra/","title":"Linear Equations in Linear Algebra","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Linear%20Equations%20in%20Linear%20Algebra/#1-system-of-linear-equations","title":"1. System of Linear Equations","text":"<p>A system of linear equations consists of two or more linear equations involving the same set of variables. A solution to the system is a set of values for the variables that satisfy all equations simultaneously.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Linear%20Equations%20in%20Linear%20Algebra/#general-form","title":"General Form","text":"<p>A system of \\(m\\) linear equations in \\(n\\) variables can be written as:</p> \\[ \\begin{aligned} a_{11}x_1 + a_{12}x_2 + \\cdots + a_{1n}x_n &amp;= b_1 \\\\ a_{21}x_1 + a_{22}x_2 + \\cdots + a_{2n}x_n &amp;= b_2 \\\\ &amp;\\vdots \\\\ a_{m1}x_1 + a_{m2}x_2 + \\cdots + a_{mn}x_n &amp;= b_m \\end{aligned} \\] <p>where:</p> <ul> <li>\\(a_{ij}\\) are the coefficients of the variables \\(x_1, x_2, \\ldots, x_n\\).</li> <li>\\(b_i\\) are the constants.</li> </ul>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Linear%20Equations%20in%20Linear%20Algebra/#example","title":"Example","text":"<p>Solve the system of equations:</p> \\[ \\begin{aligned} 2x + 3y &amp;= 8 \\\\ 4x - y &amp;= 2 \\end{aligned} \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Linear%20Equations%20in%20Linear%20Algebra/#solution","title":"Solution","text":"<ol> <li>Multiply the second equation by 3 to eliminate \\(y\\):</li> </ol> \\[ 12x - 3y = 6 \\] <ol> <li>Add to the first equation:</li> </ol> \\[ (2x + 3y) + (12x - 3y) = 8 + 6 \\\\ 14x = 14 \\\\ x = 1 \\] <ol> <li>Substitute \\(x = 1\\) into the first equation:</li> </ol> \\[ 2(1) + 3y = 8 \\\\ 3y = 6 \\\\ y = 2 \\] <p>Thus, the solution is \\(x = 1, y = 2\\).</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Linear%20Equations%20in%20Linear%20Algebra/#2-row-reduction-and-echelon-forms","title":"2. Row Reduction and Echelon Forms","text":"<p>Row reduction transforms a matrix into a simpler form to solve linear systems. The two key forms are:</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Linear%20Equations%20in%20Linear%20Algebra/#row-echelon-form-ref","title":"Row Echelon Form (REF)","text":"<ol> <li>Each leading entry in a row is to the right of the leading entry in the row above.</li> <li>All entries below a leading entry are zero.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Linear%20Equations%20in%20Linear%20Algebra/#reduced-row-echelon-form-rref","title":"Reduced Row Echelon Form (RREF)","text":"<ol> <li>The matrix is in REF.</li> <li>Each leading entry is 1.</li> <li>Each leading 1 is the only nonzero entry in its column.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Linear%20Equations%20in%20Linear%20Algebra/#steps-for-gaussian-elimination","title":"Steps for Gaussian Elimination","text":"<ol> <li>Write the augmented matrix of the system.</li> <li>Use row operations to achieve REF.</li> <li>(Optional) Continue to RREF for simplicity.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Linear%20Equations%20in%20Linear%20Algebra/#example_1","title":"Example","text":"<p>Solve the system:</p> \\[ \\begin{aligned} x + y + z &amp;= 6 \\\\ 2y + 5z &amp;= -4 \\\\ 2x + 5y - z &amp;= 27 \\end{aligned} \\] <p>Augmented Matrix:</p> \\[ \\begin{bmatrix} 1 &amp; 1 &amp; 1 &amp; | &amp; 6 \\\\ 0 &amp; 2 &amp; 5 &amp; | &amp; -4 \\\\ 2 &amp; 5 &amp; -1 &amp; | &amp; 27 \\end{bmatrix} \\] <p>Perform row reduction to solve:</p> \\[ \\begin{bmatrix} 1 &amp; 1 &amp; 1 &amp; | &amp; 6 \\\\ 0 &amp; 2 &amp; 5 &amp; | &amp; -4 \\\\ 0 &amp; 3 &amp; -3 &amp; | &amp; 15 \\end{bmatrix} \\rightarrow  \\begin{bmatrix} 1 &amp; 1 &amp; 1 &amp; | &amp; 6 \\\\ 0 &amp; 1 &amp; 5/2 &amp; | &amp; -2 \\\\ 0 &amp; 0 &amp; -15/2 &amp; | &amp; 21 \\end{bmatrix} \\rightarrow \\begin{bmatrix} 1 &amp; 0 &amp; 0 &amp; | &amp; 1 \\\\ 0 &amp; 1 &amp; 0 &amp; | &amp; 2 \\\\ 0 &amp; 0 &amp; 1 &amp; | &amp; -1 \\end{bmatrix} \\] <p>Solution: \\(x = 1, y = 2, z = -1\\).</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Linear%20Equations%20in%20Linear%20Algebra/#3-vector-equations","title":"3. Vector Equations","text":"<p>A vector equation is an equation involving vectors and their linear combinations.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Linear%20Equations%20in%20Linear%20Algebra/#general-form_1","title":"General Form","text":"\\[ c_1\\mathbf{v}_1 + c_2\\mathbf{v}_2 + \\cdots + c_n\\mathbf{v}_n = \\mathbf{b} \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Linear%20Equations%20in%20Linear%20Algebra/#example_2","title":"Example","text":"<p>Given:</p> \\[ \\mathbf{v}_1 = \\begin{bmatrix} 1 \\\\ 2 \\\\ 3 \\end{bmatrix}, \\mathbf{v}_2 = \\begin{bmatrix} 4 \\\\ 5 \\\\ 6 \\end{bmatrix}, \\mathbf{b} = \\begin{bmatrix} 7 \\\\ 8 \\\\ 9 \\end{bmatrix} \\] <p>Find scalars \\(c_1\\) and \\(c_2\\) such that:</p> \\[ c_1\\mathbf{v}_1 + c_2\\mathbf{v}_2 = \\mathbf{b} \\] <p>Write as a system:</p> \\[ \\begin{aligned} 1c_1 + 4c_2 &amp;= 7 \\\\ 2c_1 + 5c_2 &amp;= 8 \\\\ 3c_1 + 6c_2 &amp;= 9 \\end{aligned} \\] <p>Solve using row reduction or substitution to find \\(c_1\\) and \\(c_2\\).</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Linear%20Equations%20in%20Linear%20Algebra/#4-the-matrix-equation-amathbfx-mathbfb","title":"4. The Matrix Equation \\(A\\mathbf{x} = \\mathbf{b}\\)","text":"<p>The matrix equation represents a system of linear equations compactly:</p> \\[ A\\mathbf{x} = \\mathbf{b} \\] <p>where:</p> <ul> <li>\\(A\\) is the coefficient matrix.</li> <li>\\(\\mathbf{x}\\) is the vector of variables.</li> <li>\\(\\mathbf{b}\\) is the vector of constants.</li> </ul>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Linear%20Equations%20in%20Linear%20Algebra/#example_3","title":"Example","text":"\\[ A = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix}, \\mathbf{x} = \\begin{bmatrix} x_1 \\\\ x_2 \\end{bmatrix}, \\mathbf{b} = \\begin{bmatrix} 5 \\\\ 6 \\end{bmatrix} \\] \\[ \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix}\\begin{bmatrix} x_1 \\\\ x_2 \\end{bmatrix} = \\begin{bmatrix} 5 \\\\ 6 \\end{bmatrix} \\] <p>Solve using matrix operations:</p> \\[ \\mathbf{x} = A^{-1}\\mathbf{b} \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Linear%20Equations%20in%20Linear%20Algebra/#5-applications-of-linear-systems","title":"5. Applications of Linear Systems","text":"<ol> <li>Physics: Modeling forces and motion.</li> <li>Economics: Solving input-output models.</li> <li>Computer Graphics: Transformations and projections.</li> <li>Engineering: Circuit analysis.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Linear%20Equations%20in%20Linear%20Algebra/#6-linear-independence","title":"6. Linear Independence","text":"<p>Vectors \\(\\mathbf{v}_1, \\mathbf{v}_2, \\ldots, \\mathbf{v}_n\\) are linearly independent if the only solution to:</p> \\[ c_1\\mathbf{v}_1 + c_2\\mathbf{v}_2 + \\cdots + c_n\\mathbf{v}_n = \\mathbf{0} \\] <p>is \\(c_1 = c_2 = \\cdots = c_n = 0\\).</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Linear%20Equations%20in%20Linear%20Algebra/#example_4","title":"Example","text":"<p>Are the vectors:</p> \\[ \\mathbf{v}_1 = \\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix}, \\mathbf{v}_2 = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix} \\] <p>linearly independent?</p> <p>Solution:</p> \\[ c_1\\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix} + c_2\\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} 0 \\\\ 0 \\end{bmatrix} \\] <p>Results in \\(c_1 = 0, c_2 = 0\\). Hence, the vectors are independent.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Linear%20Equations%20in%20Linear%20Algebra/#code-example","title":"Code Example","text":"<p><pre><code>import numpy as np\n\n# Solve Ax = b\nA = np.array([[1, 2], [3, 4]])\nb = np.array([5, 6])\n\nx = np.linalg.solve(A, b)\nprint(\"Solution:\", x)\n</code></pre> <p>Solution: [-4.   4.5]</p></p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Matrix%20Algebra/","title":"Matrix Algebra","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Matrix%20Algebra/#1-introduction","title":"1. Introduction","text":"<p>Matrix Algebra is the branch of mathematics dealing with operations on matrices. Matrices are rectangular arrays of numbers, symbols, or expressions arranged in rows and columns. They are widely used in various fields, including engineering, physics, economics, and computer graphics.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Matrix%20Algebra/#2-matrix-operations","title":"2. Matrix Operations","text":"<p>Matrix operations include addition, subtraction, scalar multiplication, and matrix multiplication.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Matrix%20Algebra/#addition-and-subtraction","title":"Addition and Subtraction","text":"<p>For matrices \\(A = [a_{ij}]\\) and \\(B = [b_{ij}]\\) of the same size:</p> \\[ C = A + B \\quad \\text{where} \\quad c_{ij} = a_{ij} + b_{ij} \\] \\[ D = A - B \\quad \\text{where} \\quad d_{ij} = a_{ij} - b_{ij} \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Matrix%20Algebra/#scalar-multiplication","title":"Scalar Multiplication","text":"<p>For a scalar \\(k\\):</p> \\[ kA = [ka_{ij}] \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Matrix%20Algebra/#matrix-multiplication","title":"Matrix Multiplication","text":"<p>For matrices \\(A (m \\times n)\\) and \\(B (n \\times p)\\):</p> \\[ C = AB \\quad \\text{where} \\quad c_{ij} = \\sum_{k=1}^n a_{ik}b_{kj} \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Matrix%20Algebra/#code-example","title":"Code Example","text":"<pre><code>import numpy as np\n\n# Define matrices\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[5, 6], [7, 8]])\n\n# Matrix addition\nC = A + B\n\n# Matrix multiplication\nD = A @ B\n\nprint(\"Addition:\\n\", C)\nprint(\"Multiplication:\\n\", D)\n</code></pre>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Matrix%20Algebra/#3-the-inverse-of-the-matrix","title":"3. The Inverse of the Matrix","text":"<p>The inverse of a square matrix \\(A\\) is denoted \\(A^{-1}\\), where:</p> \\[ A A^{-1} = A^{-1} A = I \\] <p>\\(I\\) is the identity matrix.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Matrix%20Algebra/#formula-for-2x2-matrix","title":"Formula for 2x2 Matrix","text":"<p>For \\(A = \\begin{bmatrix} a &amp; b \\\\ c &amp; d \\end{bmatrix}\\):</p> \\[ A^{-1} = \\frac{1}{ad - bc}\\begin{bmatrix} d &amp; -b \\\\ -c &amp; a \\end{bmatrix}, \\quad \\text{if } ad - bc \\neq 0 \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Matrix%20Algebra/#code-example_1","title":"Code Example","text":"<pre><code># Define a matrix\nA = np.array([[4, 7], [2, 6]])\n\n# Compute the inverse\nA_inv = np.linalg.inv(A)\nprint(\"Inverse:\\n\", A_inv)\n</code></pre>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Matrix%20Algebra/#4-characterizations-of-invertible-matrices","title":"4. Characterizations of Invertible Matrices","text":"<p>A square matrix \\(A\\) is invertible if:</p> <ol> <li>\\(\\det(A) \\neq 0\\).</li> <li>\\(A\\) has full rank.</li> <li>The rows or columns of \\(A\\) are linearly independent.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Matrix%20Algebra/#5-partitioned-matrices","title":"5. Partitioned Matrices","text":"<p>Partitioned matrices divide a matrix into smaller submatrices for easier computations.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Matrix%20Algebra/#example","title":"Example","text":"<p>For \\(A\\):</p> \\[ A = \\begin{bmatrix} A_{11} &amp; A_{12} \\\\ A_{21} &amp; A_{22} \\end{bmatrix} \\] <p>This structure is useful for block multiplication and solving systems of equations.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Matrix%20Algebra/#6-matrix-factorizations","title":"6. Matrix Factorizations","text":"<p>Matrix factorizations decompose matrices into simpler forms:</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Matrix%20Algebra/#lu-factorization","title":"LU Factorization","text":"<p>\\(A = LU\\), where:</p> <ul> <li>\\(L\\): Lower triangular matrix.</li> <li>\\(U\\): Upper triangular matrix.</li> </ul>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Matrix%20Algebra/#qr-factorization","title":"QR Factorization","text":"<p>\\(A = QR\\), where:</p> <ul> <li>\\(Q\\): Orthogonal matrix.</li> <li>\\(R\\): Upper triangular matrix.</li> </ul>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Matrix%20Algebra/#code-example_2","title":"Code Example","text":"<pre><code>from scipy.linalg import lu\n\n# Define a matrix\nA = np.array([[4, 3], [6, 3]])\n\n# LU decomposition\nP, L, U = lu(A)\nprint(\"L:\\n\", L)\nprint(\"U:\\n\", U)\n</code></pre>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Matrix%20Algebra/#7-the-leontief-inputoutput-model","title":"7. The Leontief Input/Output Model","text":"<p>This economic model represents interdependencies between sectors:</p> \\[ x = (I - A)^{-1} d \\] <p>Where:</p> <ul> <li>\\(A\\): Input-output matrix.</li> <li>\\(d\\): Final demand vector.</li> </ul>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Matrix%20Algebra/#8-applications-of-matrix-algebra-to-computer-graphics","title":"8. Applications of Matrix Algebra to Computer Graphics","text":"<p>Matrices are essential in transforming coordinates in computer graphics:</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Matrix%20Algebra/#translation","title":"Translation","text":"\\[ T = \\begin{bmatrix} 1 &amp; 0 &amp; t_x \\\\ 0 &amp; 1 &amp; t_y \\\\ 0 &amp; 0 &amp; 1 \\end{bmatrix} \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Matrix%20Algebra/#rotation","title":"Rotation","text":"\\[ R = \\begin{bmatrix} \\cos\\theta &amp; -\\sin\\theta &amp; 0 \\\\ \\sin\\theta &amp; \\cos\\theta &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\end{bmatrix} \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Matrix%20Algebra/#code-example_3","title":"Code Example","text":"<pre><code># Define a 2D rotation matrix\nimport math\n\nangle = math.pi / 4  # 45 degrees\nR = np.array([[math.cos(angle), -math.sin(angle)],\n              [math.sin(angle), math.cos(angle)]])\n\n# Rotate a point\npoint = np.array([1, 0])\nrotated_point = R @ point\nprint(\"Rotated Point:\", rotated_point)\n</code></pre>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Matrix%20Algebra/#9-subspaces-of-mathbbrn","title":"9. Subspaces of \\(\\mathbb{R}^n\\)","text":"<p>Subspaces are subsets of \\(\\mathbb{R}^n\\) closed under addition and scalar multiplication.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Matrix%20Algebra/#examples","title":"Examples","text":"<ul> <li>Column space: Set of all linear combinations of columns.</li> <li>Null space: Set of all solutions to \\(A\\mathbf{x} = 0\\).</li> </ul>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Matrix%20Algebra/#10-dimension-and-rank","title":"10. Dimension and Rank","text":"<p>The dimension of a subspace is the number of vectors in its basis. The rank of a matrix is the dimension of its column space.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Matrix%20Algebra/#rank-nullity-theorem","title":"Rank-Nullity Theorem","text":"\\[ \\text{rank}(A) + \\text{nullity}(A) = \\text{number of columns of } A \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Matrix%20Algebra/#code-example_4","title":"Code Example","text":"<pre><code># Define a matrix\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\n# Compute rank\nrank = np.linalg.matrix_rank(A)\nprint(\"Rank:\", rank)\n</code></pre> <p>This guide covers fundamental concepts, practical examples, and Python implementations to help you master matrix algebra.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/","title":"Orthogonality and Least Squares","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/#introduction","title":"Introduction","text":"<p>Orthogonality plays a crucial role in understanding the geometry of vectors and solving optimization problems like least squares. Orthogonal vectors are perpendicular, and their dot product is zero. The least squares method minimizes the error in approximating a system of equations.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/#inner-product-length-and-orthogonality","title":"Inner Product, Length, and Orthogonality","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/#inner-product","title":"Inner Product","text":"<p>The inner product (or dot product) of two vectors \\( \\mathbf{u}, \\mathbf{v} \\in \\mathbb{R}^n \\) is defined as:</p> \\[ \\mathbf{u} \\cdot \\mathbf{v} = \\sum_{i=1}^n u_i v_i \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/#properties","title":"Properties","text":"<ol> <li>Commutative: \\( \\mathbf{u} \\cdot \\mathbf{v} = \\mathbf{v} \\cdot \\mathbf{u} \\)</li> <li>Distributive: \\( \\mathbf{u} \\cdot (\\mathbf{v} + \\mathbf{w}) = \\mathbf{u} \\cdot \\mathbf{v} + \\mathbf{u} \\cdot \\mathbf{w} \\)</li> <li>Scalar multiplication: \\( (c\\mathbf{u}) \\cdot \\mathbf{v} = c(\\mathbf{u} \\cdot \\mathbf{v}) \\)</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/#length","title":"Length","text":"<p>The length (or norm) of a vector \\( \\mathbf{v} \\) is:</p> \\[ \\|\\mathbf{v}\\| = \\sqrt{\\mathbf{v} \\cdot \\mathbf{v}} \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/#orthogonality","title":"Orthogonality","text":"<p>Two vectors \\( \\mathbf{u} \\) and \\( \\mathbf{v} \\) are orthogonal if:</p> \\[ \\mathbf{u} \\cdot \\mathbf{v} = 0 \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/#example","title":"Example","text":"<p>\\( \\mathbf{u} = \\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix}, \\mathbf{v} = \\begin{bmatrix} -2 \\\\ 1 \\end{bmatrix} \\):</p> \\[ \\mathbf{u} \\cdot \\mathbf{v} = 1(-2) + 2(1) = 0 \\quad \\text{(orthogonal)} \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/#orthogonal-sets","title":"Orthogonal Sets","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/#definition","title":"Definition","text":"<p>A set of vectors \\( \\{\\mathbf{u}_1, \\mathbf{u}_2, \\dots, \\mathbf{u}_n\\} \\) is orthogonal if:</p> \\[ \\mathbf{u}_i \\cdot \\mathbf{u}_j = 0 \\quad \\text{for all } i \\neq j \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/#orthonormal-sets","title":"Orthonormal Sets","text":"<p>An orthogonal set is orthonormal if each vector has unit length:</p> \\[ \\|\\mathbf{u}_i\\| = 1 \\quad \\text{for all } i \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/#example_1","title":"Example","text":"<p>\\( \\mathbf{u}_1 = \\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix}, \\mathbf{u}_2 = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix} \\):</p> <ol> <li>\\( \\mathbf{u}_1 \\cdot \\mathbf{u}_2 = 0 \\quad \\text{(orthogonal)} \\)</li> <li>\\( \\|\\mathbf{u}_1\\| = \\|\\mathbf{u}_2\\| = 1 \\quad \\text{(orthonormal)} \\).</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/#orthogonal-projections","title":"Orthogonal Projections","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/#definition_1","title":"Definition","text":"<p>The projection of \\( \\mathbf{y} \\) onto \\( \\mathbf{u} \\) is:</p> \\[ \\text{proj}_{\\mathbf{u}} \\mathbf{y} = \\frac{\\mathbf{y} \\cdot \\mathbf{u}}{\\mathbf{u} \\cdot \\mathbf{u}} \\mathbf{u} \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/#example_2","title":"Example","text":"<p>\\( \\mathbf{y} = \\begin{bmatrix} 3 \\\\ 4 \\end{bmatrix}, \\mathbf{u} = \\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix} \\):</p> \\[ \\text{proj}_{\\mathbf{u}} \\mathbf{y} = \\frac{3(1) + 4(2)}{1^2 + 2^2} \\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix} = \\frac{11}{5} \\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix} = \\begin{bmatrix} 2.2 \\\\ 4.4 \\end{bmatrix} \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/#the-gram-schmidt-process","title":"The Gram-Schmidt Process","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/#definition_2","title":"Definition","text":"<p>The Gram-Schmidt process generates an orthogonal (or orthonormal) set of vectors from a linearly independent set \\( \\{\\mathbf{v}_1, \\mathbf{v}_2, \\dots\\} \\).</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/#steps","title":"Steps","text":"<ol> <li>Set \\( \\mathbf{u}_1 = \\mathbf{v}_1 \\).</li> <li> <p>For \\( k = 2, 3, \\dots \\):</p> \\[ \\mathbf{u}_k = \\mathbf{v}_k - \\sum_{j=1}^{k-1} \\text{proj}_{\\mathbf{u}_j}(\\mathbf{v}_k) \\] </li> <li> <p>Normalize \\( \\mathbf{u}_k \\) to get an orthonormal set.</p> </li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/#example_3","title":"Example","text":"<p>Given \\( \\mathbf{v}_1 = \\begin{bmatrix} 1 \\\\ 1 \\end{bmatrix}, \\mathbf{v}_2 = \\begin{bmatrix} 1 \\\\ -1 \\end{bmatrix} \\):</p> <ol> <li>\\( \\mathbf{u}_1 = \\mathbf{v}_1 \\).</li> <li>\\( \\mathbf{u}_2 = \\mathbf{v}_2 - \\text{proj}_{\\mathbf{u}_1} \\mathbf{v}_2 \\).</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/#least-squares-problem","title":"Least Squares Problem","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/#definition_3","title":"Definition","text":"<p>The least squares solution minimizes the error \\( \\|A\\mathbf{x} - \\mathbf{b}\\| \\).</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/#normal-equations","title":"Normal Equations","text":"\\[ A^T A \\mathbf{x} = A^T \\mathbf{b} \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/#example_4","title":"Example","text":"<p>For \\( A = \\begin{bmatrix} 1 &amp; 1 \\\\ 1 &amp; -1 \\\\ 1 &amp; 2 \\end{bmatrix}, \\mathbf{b} = \\begin{bmatrix} 2 \\\\ 0 \\\\ 5 \\end{bmatrix} \\):</p> <ol> <li>Compute \\( A^T A \\) and \\( A^T \\mathbf{b} \\).</li> <li>Solve \\( A^T A \\mathbf{x} = A^T \\mathbf{b} \\).</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/#applications-of-linear-models","title":"Applications of Linear Models","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/#examples","title":"Examples","text":"<ol> <li>Data Fitting: Using least squares to fit curves to data.</li> <li>Image Compression: Leveraging orthogonal projections in PCA.</li> <li>Machine Learning: Linear regression as a least squares problem.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/#inner-product-space","title":"Inner Product Space","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/#definition_4","title":"Definition","text":"<p>An inner product space is a vector space with an inner product defined, satisfying:</p> <ol> <li>Linearity in the first argument.</li> <li>Symmetry: \\( \\langle \\mathbf{u}, \\mathbf{v} \\rangle = \\langle \\mathbf{v}, \\mathbf{u} \\rangle \\).</li> <li>Positive-definiteness: \\( \\langle \\mathbf{u}, \\mathbf{u} \\rangle &gt; 0 \\) for \\( \\mathbf{u} \\neq 0 \\).</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Orthogonality%20and%20Least%20Squares/#example_5","title":"Example","text":"<p>\\( \\mathbb{R}^n \\) with \\( \\langle \\mathbf{u}, \\mathbf{v} \\rangle = \\mathbf{u} \\cdot \\mathbf{v} \\).</p> <p>Feel free to expand sections with more examples or detailed applications!</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Ring%20and%20Field/","title":"Ring and Basic Properties","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Ring%20and%20Field/#definition-of-a-ring","title":"Definition of a Ring","text":"<p>A ring is a set \\( R \\) equipped with two binary operations: addition (+) and multiplication (\\( \\cdot \\)) such that:</p> <ol> <li>\\( (R, +) \\) is an abelian group (i.e., it satisfies closure, associativity, identity, inverses, and commutativity under addition).</li> <li>\\( (R, \\cdot) \\) is a semigroup (i.e., it satisfies closure and associativity under multiplication).</li> <li>Distributive properties hold:<ul> <li>\\( a \\cdot (b + c) = (a \\cdot b) + (a \\cdot c) \\)</li> <li>\\( (a + b) \\cdot c = (a \\cdot c) + (b \\cdot c) \\)</li> </ul> </li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Ring%20and%20Field/#examples","title":"Examples","text":"<ol> <li>\\( \\mathbb{Z} \\): Integers under addition and multiplication form a ring.</li> <li>\\( \\mathbb{R}[x] \\): Polynomials with real coefficients form a ring under standard addition and multiplication.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Ring%20and%20Field/#non-examples","title":"Non-Examples","text":"<ol> <li>Natural numbers \\( \\mathbb{N} \\) under addition and multiplication are not a ring because they lack additive inverses.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Ring%20and%20Field/#properties-of-rings","title":"Properties of Rings","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Ring%20and%20Field/#types-of-rings","title":"Types of Rings","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Ring%20and%20Field/#commutative-ring","title":"Commutative Ring","text":"<p>A ring \\( R \\) is commutative if multiplication is commutative:</p> \\[ \\forall a, b \\in R, \\quad a \\cdot b = b \\cdot a \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Ring%20and%20Field/#ring-with-unity","title":"Ring with Unity","text":"<p>A ring \\( R \\) has a multiplicative identity (unity) if there exists \\( 1 \\in R \\) such that:</p> \\[ 1 \\cdot a = a \\cdot 1 = a \\quad \\forall a \\in R \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Ring%20and%20Field/#division-ring","title":"Division Ring","text":"<p>A ring \\( R \\) is a division ring if every nonzero element has a multiplicative inverse.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Ring%20and%20Field/#zero-divisors","title":"Zero Divisors","text":"<p>An element \\( a \\in R \\) is a zero divisor if:</p> \\[ \\exists b \\neq 0 \\in R, \\quad a \\cdot b = 0 \\quad \\text{or} \\quad b \\cdot a = 0 \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Ring%20and%20Field/#integral-domain","title":"Integral Domain","text":"<p>A commutative ring \\( R \\) with no zero divisors is an integral domain.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Ring%20and%20Field/#example-verify-properties","title":"Example: Verify Properties","text":"<ul> <li>Set: \\( \\mathbb{Z}_6 \\) under addition and multiplication modulo 6.</li> <li>Check if it satisfies the ring properties.</li> </ul>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Ring%20and%20Field/#solution","title":"Solution","text":"<ol> <li>Closure: \\( a + b \\mod 6 \\) and \\( a \\cdot b \\mod 6 \\) remain in \\( \\mathbb{Z}_6 \\).</li> <li>Associativity: Both addition and multiplication are associative.</li> <li>Distributivity: Holds by modular arithmetic rules.</li> <li>Zero divisors: \\( 2 \\cdot 3 \\mod 6 = 0 \\).</li> <li>Hence, \\( \\mathbb{Z}_6 \\) is not an integral domain.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Ring%20and%20Field/#field","title":"Field","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Ring%20and%20Field/#definition-of-a-field","title":"Definition of a Field","text":"<p>A field is a commutative ring \\( F \\) with unity where every nonzero element has a multiplicative inverse:</p> \\[ \\forall a \\in F, a \\neq 0, \\quad \\exists b \\in F \\text{ such that } a \\cdot b = 1 \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Ring%20and%20Field/#examples_1","title":"Examples","text":"<ol> <li>\\( \\mathbb{Q} \\): Rational numbers under standard addition and multiplication.</li> <li>\\( \\mathbb{R} \\): Real numbers under standard addition and multiplication.</li> <li>\\( \\mathbb{Z}_p \\): Integers modulo a prime \\( p \\), where addition and multiplication modulo \\( p \\) form a field.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Ring%20and%20Field/#non-examples_1","title":"Non-Examples","text":"<ol> <li>\\( \\mathbb{Z} \\): Integers are not a field because most elements lack multiplicative inverses.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Ring%20and%20Field/#field-properties","title":"Field Properties","text":"<ol> <li>Addition and multiplication are commutative.</li> <li>Distributive property holds.</li> <li>Every nonzero element has a multiplicative inverse.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Ring%20and%20Field/#applications","title":"Applications","text":"<ol> <li>Cryptography: Fields like \\( \\mathbb{Z}_p \\) are used in RSA and elliptic curve cryptography.</li> <li>Linear Algebra: Vector spaces require a field for scalar multiplication.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Ring%20and%20Field/#tips-and-tricks","title":"Tips and Tricks","text":"<ol> <li>Check Zero Divisors: To determine if a ring is an integral domain, verify there are no zero divisors.</li> <li>Prime Modulo: For fields \\( \\mathbb{Z}_p \\), ensure \\( p \\) is prime.</li> <li>Unity Element: Always confirm the presence of a multiplicative identity when analyzing rings and fields.</li> <li>Inverse Element: In fields, test the existence of multiplicative inverses for all nonzero elements.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Transformations/","title":"Transformations in Linear Algebra","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Transformations/#1-introduction-to-linear-transformation","title":"1. Introduction to Linear Transformation","text":"<p>A linear transformation is a mapping \\(T: \\mathbb{R}^n \\to \\mathbb{R}^m\\) that satisfies the following properties:</p> <ol> <li>Additivity: \\(T(\\mathbf{u} + \\mathbf{v}) = T(\\mathbf{u}) + T(\\mathbf{v})\\) for all vectors \\(\\mathbf{u}, \\mathbf{v} \\in \\mathbb{R}^n\\).</li> <li>Scalar Multiplication: \\(T(c\\mathbf{u}) = cT(\\mathbf{u})\\) for all scalars \\(c\\) and vectors \\(\\mathbf{u} \\in \\mathbb{R}^n\\).</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Transformations/#examples-of-linear-transformations","title":"Examples of Linear Transformations","text":"<ol> <li>Scaling: \\(T(\\mathbf{x}) = c\\mathbf{x}\\), where \\(c\\) is a constant.</li> <li>Rotation: \\(T(\\mathbf{x}) = R\\mathbf{x}\\), where \\(R\\) is a rotation matrix.</li> <li>Projection: \\(T(\\mathbf{x}) = P\\mathbf{x}\\), where \\(P\\) is a projection matrix.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Transformations/#mathematical-representation","title":"Mathematical Representation","text":"<p>If \\(T\\) is a linear transformation, then there exists a matrix \\(A\\) such that:</p> \\[ T(\\mathbf{x}) = A\\mathbf{x} \\] <p>where \\(\\mathbf{x}\\) is the input vector and \\(A\\) is the transformation matrix.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Transformations/#2-the-matrix-of-a-linear-transformation","title":"2. The Matrix of a Linear Transformation","text":"<p>The matrix of a linear transformation is the matrix representation of the mapping based on its effect on the standard basis vectors.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Transformations/#finding-the-transformation-matrix","title":"Finding the Transformation Matrix","text":"<p>Given a linear transformation \\(T: \\mathbb{R}^n \\to \\mathbb{R}^m\\):</p> <ol> <li>Apply \\(T\\) to each standard basis vector of \\(\\mathbb{R}^n\\).</li> <li>Combine the resulting vectors as columns of a matrix \\(A\\).</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Transformations/#example","title":"Example","text":"<p>Let \\(T: \\mathbb{R}^2 \\to \\mathbb{R}^2\\) be defined as:</p> \\[ T(\\mathbf{x}) = \\begin{bmatrix} 2 &amp; -1 \\\\ 3 &amp; 0 \\end{bmatrix}\\mathbf{x} \\] <p>Matrix Representation:</p> \\[ A = \\begin{bmatrix} 2 &amp; -1 \\\\ 3 &amp; 0 \\end{bmatrix} \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Transformations/#transforming-a-vector","title":"Transforming a Vector","text":"<p>To transform a vector \\(\\mathbf{x} = \\begin{bmatrix} x_1 \\\\ x_2 \\end{bmatrix}\\):</p> \\[ T(\\mathbf{x}) = \\begin{bmatrix} 2 &amp; -1 \\\\ 3 &amp; 0 \\end{bmatrix}\\begin{bmatrix} x_1 \\\\ x_2 \\end{bmatrix} = \\begin{bmatrix} 2x_1 - x_2 \\\\ 3x_1 \\end{bmatrix} \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Transformations/#code-example","title":"Code Example","text":"<pre><code>import numpy as np\n\n# Define the transformation matrix\nA = np.array([[2, -1], [3, 0]])\n\n# Define the input vector\nx = np.array([1, 2])\n\n# Apply the transformation\nT_x = A @ x\nprint(\"Transformed vector:\", T_x)\n</code></pre>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Transformations/#3-linear-models-in-business-science-and-engineering","title":"3. Linear Models in Business, Science, and Engineering","text":"<p>Linear transformations have wide-ranging applications in business, science, and engineering. Below are some key areas where they are utilized:</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Transformations/#business-applications","title":"Business Applications","text":"<ol> <li>Optimization Models: Linear transformations are used in linear programming to optimize resource allocation.</li> <li>Economics: Input-output models analyze production and consumption relationships.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Transformations/#example-linear-programming","title":"Example: Linear Programming","text":"<p>Maximize profit:</p> \\[ z = 3x_1 + 5x_2 \\] <p>Subject to:</p> \\[ 2x_1 + x_2 \\leq 100 \\\\ x_1 + 3x_2 \\leq 90 \\\\ x_1, x_2 \\geq 0 \\] <p>Solution using Python: <pre><code>from scipy.optimize import linprog\n\n# Coefficients of the objective function\nc = [-3, -5]  # Negative for maximization\n\n# Coefficients of the inequality constraints\nA = [[2, 1], [1, 3]]\nb = [100, 90]\n\n# Solve the linear program\nresult = linprog(c, A_ub=A, b_ub=b, bounds=(0, None))\nprint(\"Optimal solution:\", result.x)\nprint(\"Maximum profit:\", -result.fun)\n</code></pre></p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Transformations/#scientific-applications","title":"Scientific Applications","text":"<ol> <li>Data Transformations: Principal Component Analysis (PCA) reduces the dimensionality of datasets by applying linear transformations.</li> <li>Signal Processing: Fourier transforms, a type of linear transformation, analyze frequencies in signals.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Transformations/#example-pca","title":"Example: PCA","text":"<pre><code>from sklearn.decomposition import PCA\nfrom sklearn.datasets import load_iris\n\n# Load dataset\niris = load_iris()\ndata = iris.data\n\n# Apply PCA\npca = PCA(n_components=2)\ntransformed_data = pca.fit_transform(data)\nprint(\"Reduced data shape:\", transformed_data.shape)\n</code></pre>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Transformations/#engineering-applications","title":"Engineering Applications","text":"<ol> <li>Robotics: Transformations model robot movements in 3D space.</li> <li>Structural Analysis: Analyze forces and stresses in structures using transformations.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Transformations/#example-3d-rotation","title":"Example: 3D Rotation","text":"<p>Rotate a point \\((x, y, z)\\) around the z-axis by an angle \\(\\theta\\):</p> \\[ R_z(\\theta) = \\begin{bmatrix} \\cos\\theta &amp; -\\sin\\theta &amp; 0 \\\\ \\sin\\theta &amp; \\cos\\theta &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\end{bmatrix} \\] <pre><code>import numpy as np\n\n# Define the rotation matrix\ntheta = np.pi / 4  # 45 degrees\nR_z = np.array([\n    [np.cos(theta), -np.sin(theta), 0],\n    [np.sin(theta), np.cos(theta), 0],\n    [0, 0, 1]\n])\n\n# Define the point\npoint = np.array([1, 0, 0])\n\n# Rotate the point\nrotated_point = R_z @ point\nprint(\"Rotated point:\", rotated_point)\n</code></pre>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Transformations/#tips-and-tricks-for-solving-problems","title":"Tips and Tricks for Solving Problems","text":"<ol> <li>Matrix Multiplication: Ensure dimensions match: \\(A (m \\times n) \\cdot \\mathbf{x} (n \\times 1)\\).</li> <li>Invertibility: A transformation matrix is invertible if it is square and its determinant is non-zero.</li> <li>Visualization: Use tools like Matplotlib for 2D and 3D transformations.</li> <li>Use Libraries: Python libraries like NumPy, SciPy, and Scikit-learn simplify complex computations.</li> </ol> <p>This guide provides an in-depth understanding of transformations and their applications in linear algebra. Feel free to expand or modify for additional insights!</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/","title":"Vector Spaces Continued","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#the-dimension-of-a-vector-space","title":"The Dimension of a Vector Space","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#definition","title":"Definition","text":"<p>The dimension of a vector space is the number of vectors in its basis, which is a linearly independent set that spans the entire space.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#formula","title":"Formula","text":"<p>If \\( V \\) is a vector space with a basis \\( \\{v_1, v_2, \\ldots, v_n\\} \\), then:</p> \\[ \\dim(V) = n \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#examples","title":"Examples","text":"<ol> <li>The dimension of \\( \\mathbb{R}^3 \\) is 3.</li> <li>For the space of polynomials of degree \\( \\leq 2 \\), the dimension is 3 (basis: \\( \\{1, x, x^2\\} \\)).</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#tips-and-tricks","title":"Tips and Tricks","text":"<ol> <li>To find the dimension of a vector space, determine the maximum number of linearly independent vectors.</li> <li>Use the row-reduction method to identify a basis from a set of vectors.</li> <li>The number of pivot columns in the row echelon form equals the dimension of the column space.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#rank","title":"Rank","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#definition_1","title":"Definition","text":"<p>The rank of a matrix is the dimension of its column space (or row space), representing the maximum number of linearly independent columns (or rows).</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#formula_1","title":"Formula","text":"\\[ \\text{rank}(A) = \\dim(\\text{Col}(A)) = \\dim(\\text{Row}(A)) \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#examples_1","title":"Examples","text":"<ol> <li> <p>For \\( A = \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{bmatrix} \\):</p> <p>Row-reduce to find the rank is 2.</p> </li> <li> <p>For \\( B = \\begin{bmatrix} 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\end{bmatrix} \\):</p> <p>Row-reduce to find the rank is 3.</p> </li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#tips-and-tricks_1","title":"Tips and Tricks","text":"<ol> <li>A square matrix is invertible if and only if \\( \\text{rank}(A) = n \\), where \\( n \\) is the size of the matrix.</li> <li>Use the singular value decomposition (SVD) to numerically compute the rank for large matrices.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#change-of-basis","title":"Change of Basis","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#definition_2","title":"Definition","text":"<p>Changing the basis of a vector space means expressing vectors or transformations in terms of a different basis.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#transformation-formula","title":"Transformation Formula","text":"<p>If \\( B \\) and \\( B' \\) are bases of \\( V \\), the change of basis matrix \\( P \\) satisfies:</p> \\[ [P]_B^{B'} v_B = v_{B'} \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#steps-to-change-basis","title":"Steps to Change Basis","text":"<ol> <li>Construct the Change of Basis Matrix: </li> <li> <p>Write the vectors of the new basis \\( B' \\) as columns in terms of the old basis \\( B \\).</p> </li> <li> <p>Transform Coordinates: </p> </li> <li>Multiply the change of basis matrix with the coordinate vector in the old basis to get the vector in the new basis.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#example","title":"Example","text":"<p>Transform coordinates from the standard basis \\( B_s = \\{(1, 0), (0, 1)\\} \\) to \\( B = \\{(1, 1), (1, -1)\\} \\).</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#solution","title":"Solution","text":"<ol> <li> <p>Write \\( B \\) in terms of \\( B_s \\): \\( P = \\begin{bmatrix} 1 &amp; 1 \\\\ 1 &amp; -1 \\end{bmatrix} \\)</p> </li> <li> <p>For a vector \\( v = \\begin{bmatrix} 3 \\\\ 1 \\end{bmatrix} \\), </p> <p>compute:\\(P^{-1} v = \\begin{bmatrix} 0.5 &amp; 0.5 \\\\ 0.5 &amp; -0.5 \\end{bmatrix} \\begin{bmatrix} 3 \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} 2 \\end{bmatrix}\\)</p> </li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#applications-of-difference-equations","title":"Applications of Difference Equations","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#definition_3","title":"Definition","text":"<p>Difference equations describe the relationship between consecutive terms in a sequence, often representing discrete systems.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#example_1","title":"Example","text":"<p>\\( x_{n+1} = 3x_n - 4x_{n-1} \\).</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#steps-to-solve","title":"Steps to Solve","text":"<ol> <li>Find the characteristic equation: \\( r^2 - 3r + 4 = 0 \\).</li> <li>Solve for roots. If roots are real and distinct, the solution is:</li> </ol> \\[ x_n = C_1 r_1^n + C_2 r_2^n \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#applications","title":"Applications","text":"<ol> <li>Population Modeling: Predict population growth or decline over discrete time intervals.</li> <li>Financial Calculations: Compute compound interest, loan payments, etc.</li> <li>Signal Processing: Analyze discrete signals in time-series data.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#example-problem","title":"Example Problem","text":"<p>Given \\( x_{n+1} = 2x_n - x_{n-1} \\), solve for \\( x_n \\).</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#solution_1","title":"Solution","text":"<ol> <li>Characteristic equation: \\( r^2 - 2r + 1 = 0 \\).</li> <li>Roots: \\( r = 1 \\) (repeated root).</li> <li>General solution:</li> </ol> \\[ x_n = C_1 + C_2 n \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#applications-of-markov-chains","title":"Applications of Markov Chains","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#definition_4","title":"Definition","text":"<p>A Markov chain is a stochastic process with memoryless transitions between states, meaning the probability of transitioning to the next state depends only on the current state.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#transition-matrix","title":"Transition Matrix","text":"<p>The probabilities of moving from one state to another are represented in a matrix \\( P \\):</p> \\[ P = \\begin{bmatrix} p_{11} &amp; p_{12} &amp; \\cdots &amp; p_{1n} \\\\ p_{21} &amp; p_{22} &amp; \\cdots &amp; p_{2n} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ p_{n1} &amp; p_{n2} &amp; \\cdots &amp; p_{nn} \\end{bmatrix} \\] <p>where \\( p_{ij} \\) is the probability of transitioning from state \\( i \\) to state \\( j \\).</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#applications_1","title":"Applications","text":"<ol> <li>Google PageRank: Determines the importance of webpages based on link structure.</li> <li>Weather Prediction: Models probabilities of weather transitions (e.g., sunny to rainy).</li> <li>Queueing Systems: Analyzes customer arrival and service processes.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#example_2","title":"Example","text":"<p>A Markov chain with states \\( A \\) and \\( B \\):</p> \\[ P = \\begin{bmatrix} 0.7 &amp; 0.3 \\\\ 0.4 &amp; 0.6 \\end{bmatrix} \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#problem","title":"Problem","text":"<p>Find the steady-state distribution.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces%20Continued/#solution_2","title":"Solution","text":"<ol> <li>Solve \\( \\pi P = \\pi \\):</li> </ol> \\[ \\begin{bmatrix} \\pi_A &amp; \\pi_B \\end{bmatrix} \\begin{bmatrix} 0.7 &amp; 0.3 \\\\ 0.4 &amp; 0.6 \\end{bmatrix} = \\begin{bmatrix} \\pi_A &amp; \\pi_B \\end{bmatrix} \\] <ol> <li>Solve the system of equations:</li> </ol> \\[ 0.7\\pi_A + 0.4\\pi_B = \\pi_A \\\\ 0.3\\pi_A + 0.6\\pi_B = \\pi_B \\\\ \\pi_A + \\pi_B = 1 \\] <ol> <li>Solution: \\( \\pi_A = 0.571, \\pi_B = 0.429 \\).</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces/","title":"Vector Spaces","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces/#1-vector-space-and-subspace","title":"1. Vector Space and Subspace","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces/#introduction","title":"Introduction","text":"<p>A vector space is a set of vectors that can be added together and multiplied by scalars, satisfying specific axioms (closure, associativity, distributivity, etc.). Vector spaces provide the framework for linear algebra and are crucial for applications in mathematics, physics, and engineering.</p> <p>A subspace is a subset of a vector space that is itself a vector space under the same operations.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces/#key-concepts","title":"Key Concepts","text":"<p>Vector Space: A set \\( V \\) with operations addition and scalar multiplication such that:</p> <ol> <li>Closure under addition and scalar multiplication.</li> <li>Existence of a zero vector.</li> <li>Additive inverses exist.</li> <li>Associativity and commutativity of addition.</li> <li>Distributive properties.</li> </ol> <p>Subspace Criteria:</p> <ol> <li>The zero vector is in the subset.</li> <li>Closed under vector addition.</li> <li>Closed under scalar multiplication.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces/#example","title":"Example","text":"<ol> <li>The set of all vectors \\( \\mathbb{R}^n \\) is a vector space.</li> <li>The set of all solutions to a homogeneous linear equation \\( Ax = 0 \\) forms a subspace.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces/#visualization","title":"Visualization","text":"<p>Subspaces of \\( \\mathbb{R}^3 \\): - A line through the origin. - A plane through the origin.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces/#2-null-space-and-column-space-and-linear-transformation","title":"2. Null Space and Column Space, and Linear Transformation","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces/#null-space","title":"Null Space","text":"<p>The null space of a matrix \\( A \\) is the set of all vectors \\( \\mathbf{x} \\) such that:</p> \\[ A\\mathbf{x} = \\mathbf{0} \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces/#column-space","title":"Column Space","text":"<p>The column space is the span of the columns of \\( A \\). It represents all possible linear combinations of the columns.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces/#linear-transformation","title":"Linear Transformation","text":"<p>A linear transformation is a mapping \\( T: V \\to W \\) such that:</p> <ol> <li>\\( T(u + v) = T(u) + T(v) \\)</li> <li>\\( T(cu) = cT(u) \\)</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces/#example_1","title":"Example","text":"<p>Given \\( A = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\\\ 5 &amp; 6 \\end{bmatrix} \\):</p> <ul> <li>Null space: Solve \\( A\\mathbf{x} = \\mathbf{0} \\).</li> <li>Column space: Span of \\( \\begin{bmatrix} 1 \\\\ 3 \\\\ 5 \\end{bmatrix}, \\begin{bmatrix} 2 \\\\ 4 \\\\ 6 \\end{bmatrix} \\).</li> </ul>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces/#code-example","title":"Code Example","text":"<pre><code>import numpy as np\nfrom scipy.linalg import null_space\n\nA = np.array([[1, 2], [3, 4], [5, 6]])\nnull = null_space(A)\nprint(\"Null Space:\", null)\n</code></pre>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces/#3-linearly-independent-sets-and-bases","title":"3. Linearly Independent Sets and Bases","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces/#linearly-independent-sets","title":"Linearly Independent Sets","text":"<p>A set of vectors \\( \\{v_1, v_2, \\dots, v_k\\} \\) is linearly independent if:</p> \\[ c_1v_1 + c_2v_2 + \\dots + c_kv_k = 0 \\implies c_1 = c_2 = \\dots = c_k = 0 \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces/#bases","title":"Bases","text":"<p>A basis is a linearly independent set of vectors that spans the vector space.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces/#dimension","title":"Dimension","text":"<p>The number of vectors in a basis is the dimension of the vector space.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces/#example_2","title":"Example","text":"<p>The standard basis for \\( \\mathbb{R}^3 \\):</p> \\[ \\{ \\begin{bmatrix} 1 \\\\ 0 \\\\ 0 \\end{bmatrix}, \\begin{bmatrix} 0 \\\\ 1 \\\\ 0 \\end{bmatrix}, \\begin{bmatrix} 0 \\\\ 0 \\\\ 1 \\end{bmatrix} \\} \\]"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces/#code-example_1","title":"Code Example","text":"<pre><code>A = np.array([[1, 2], [3, 4]])\nrank = np.linalg.matrix_rank(A)\nprint(\"Rank (dimension of column space):\", rank)\n</code></pre>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces/#4-coordinate-system","title":"4. Coordinate System","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces/#definition","title":"Definition","text":"<p>A coordinate system represents a vector as a linear combination of basis vectors.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces/#change-of-basis","title":"Change of Basis","text":"<p>To convert coordinates from one basis \\( B \\) to another \\( C \\):</p> \\[ [\\mathbf{x}]_C = P_{B \\to C} [\\mathbf{x}]_B \\] <p>Where \\( P_{B \\to C} \\) is the change of basis matrix.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces/#example_3","title":"Example","text":"<p>Convert \\( \\mathbf{x} \\) from basis \\( B = \\{\\mathbf{b}_1, \\mathbf{b}_2\\} \\) to \\( C = \\{\\mathbf{c}_1, \\mathbf{c}_2\\} \\).</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces/#code-example_2","title":"Code Example","text":"<pre><code>B = np.array([[1, 0], [0, 1]])\nC = np.array([[2, 1], [1, 3]])\nP = np.linalg.inv(B) @ C\nprint(\"Change of Basis Matrix:\", P)\n</code></pre>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces/#conclusion","title":"Conclusion","text":"<p>Vector spaces form the backbone of linear algebra, connecting concepts like independence, transformations, and applications in numerous fields. Understanding these fundamentals is crucial for advanced studies and practical problem-solving.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces/#exercises","title":"Exercises","text":"<ol> <li>Prove that the set of all polynomials of degree at most 2 forms a vector space.</li> <li> <p>Find the null space and column space of the matrix:</p> \\[ A = \\begin{bmatrix} 2 &amp; 4 \\\\ -1 &amp; -2 \\\\ 3 &amp; 6 \\end{bmatrix} \\] </li> <li> <p>Verify if the vectors \\( \\{(1, 0, 0), (0, 1, 0), (1, 1, 1)\\} \\) are linearly independent.</p> </li> <li>Compute the coordinates of \\( \\mathbf{x} = \\begin{bmatrix} 3 \\\\ 7 \\end{bmatrix} \\) relative to the basis \\( \\{\\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix}, \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix}\\} \\).</li> </ol> <p>Solutions available upon request!</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces2/","title":"Vector Spaces","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces2/#1-vector-space-and-subspace","title":"1. Vector Space and Subspace","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces2/#introduction","title":"Introduction","text":"<p>A vector space is a collection of objects called vectors, which can be added together and multiplied by scalars while satisfying specific axioms. Examples include Euclidean space \\( \\mathbb{R}^n \\), spaces of functions, and polynomial spaces.</p> <p>A subspace is a subset of a vector space that is also a vector space under the same operations.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces2/#why-are-vector-spaces-important","title":"Why are Vector Spaces Important?","text":"<ul> <li>Form the foundation of linear algebra.</li> <li>Used in diverse fields such as physics, computer graphics, and data science.</li> </ul>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces2/#key-concepts","title":"Key Concepts","text":"<ol> <li> <p>Vector Space Axioms:</p> <ul> <li>Closure under addition and scalar multiplication.</li> <li>Associativity and commutativity of addition.</li> <li>Existence of additive identity and additive inverses.</li> <li>Compatibility of scalar multiplication.</li> </ul> </li> <li> <p>Subspaces:</p> <ul> <li>Must contain the zero vector.</li> <li>Closed under vector addition and scalar multiplication.</li> </ul> </li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces2/#example","title":"Example","text":"<p>Let \\( V = \\mathbb{R}^3 \\) and consider \\( W = \\{(x, y, z) \\in \\mathbb{R}^3 : x + y + z = 0\\} \\). Prove \\( W \\) is a subspace.</p> <p>Solution:</p> <ol> <li>Zero Vector: \\( (0, 0, 0) \\in W \\).</li> <li> <p>Closure under Addition:  If \\( (x_1, y_1, z_1), (x_2, y_2, z_2) \\in W \\), then:</p> \\[ (x_1 + x_2) + (y_1 + y_2) + (z_1 + z_2) = 0 \\] </li> <li> <p>Closure under Scalar Multiplication: For \\( k \\in \\mathbb{R} \\): [ kx + ky + kz = k(x + y + z) = 0 ]</p> </li> </ol> <p>Thus, \\( W \\) is a subspace.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces2/#2-null-space-and-column-space-and-linear-transformations","title":"2. Null Space and Column Space, and Linear Transformations","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces2/#null-space-and-column-space","title":"Null Space and Column Space","text":"<ol> <li> <p>Null Space (Kernel):    The set of all solutions to \\( A\\mathbf{x} = \\mathbf{0} \\).</p> </li> <li> <p>Column Space (Range):    The span of the columns of matrix \\( A \\).</p> </li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces2/#example_1","title":"Example","text":"<p>Find the null space and column space of:</p> \\[ A = \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{bmatrix} \\] <p>Solution:</p> <ul> <li>Null Space: Solve \\( A\\mathbf{x} = \\mathbf{0} \\):</li> </ul> \\[ \\mathbf{x} = \\begin{bmatrix} t \\\\ -2t \\\\ t \\end{bmatrix}, \\quad t \\in \\mathbb{R} \\] <p>Basis: \\( \\begin{bmatrix} 1 \\\\ -2 \\\\ 1 \\end{bmatrix} \\).</p> <ul> <li> <p>Column Space: Rank of \\( A = 2 \\).  Basis vectors:</p> \\[ \\begin{bmatrix} 1 \\\\ 4 \\\\ 7 \\end{bmatrix}, \\begin{bmatrix} 2 \\\\ 5 \\\\ 8 \\end{bmatrix} \\] </li> </ul>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces2/#linear-transformations","title":"Linear Transformations","text":"<p>A function \\( T: V \\to W \\) is linear if:</p> <ul> <li>\\( T(\\mathbf{u} + \\mathbf{v}) = T(\\mathbf{u}) + T(\\mathbf{v}) \\).</li> <li>\\( T(c\\mathbf{u}) = cT(\\mathbf{u}) \\).</li> </ul>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces2/#example_2","title":"Example","text":"<p>Show \\( T(x, y) = (2x, 3y) \\) is a linear transformation.</p> <p>Solution:</p> <ul> <li>Addition: \\( T((x_1, y_1) + (x_2, y_2)) = T(x_1 + x_2, y_1 + y_2) = (2(x_1 + x_2), 3(y_1 + y_2)) \\).</li> <li>Scalar Multiplication: \\( T(c(x, y)) = T(cx, cy) = (2cx, 3cy) \\).</li> </ul>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces2/#3-linearly-independent-sets-bases","title":"3. Linearly Independent Sets, Bases","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces2/#linearly-independent-sets","title":"Linearly Independent Sets","text":"<p>A set of vectors is linearly independent if no vector can be written as a linear combination of the others.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces2/#example_3","title":"Example","text":"<p>Determine if \\( \\{(1, 0), (0, 1), (1, 1)\\} \\) is linearly independent.</p> <p>Solution: Solve:</p> \\[ c_1(1, 0) + c_2(0, 1) + c_3(1, 1) = (0, 0) \\] <p>This gives \\( c_1 + c_3 = 0 \\) and \\( c_2 + c_3 = 0 \\). Only solution: \\( c_1 = c_2 = c_3 = 0 \\). Independent.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces2/#bases","title":"Bases","text":"<p>A basis of a vector space is a linearly independent set that spans the space.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces2/#example_4","title":"Example","text":"<p>Find a basis for \\( \\mathbb{R}^2 \\).</p> <p>Solution: Standard basis: \\( \\{(1, 0), (0, 1)\\} \\).</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces2/#4-coordinate-system","title":"4. Coordinate System","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces2/#introduction_1","title":"Introduction","text":"<p>Coordinates represent a vector relative to a basis.</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces2/#example_5","title":"Example","text":"<p>Given basis \\( \\{(1, 2), (3, 4)\\} \\), find coordinates of \\( \\mathbf{v} = (7, 10) \\).</p> <p>Solution:</p> <p>Solve \\( c_1(1, 2) + c_2(3, 4) = (7, 10) \\):    \\( c_1 = 2, \\, c_2 = 1 \\)</p> <p>Coordinates: \\( (2, 1) \\).</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces2/#exercises","title":"Exercises","text":""},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces2/#exercise-1","title":"Exercise 1","text":"<p>Prove \\( W = \\{(x, y, z) : x + 2y - z = 0\\} \\) is a subspace of \\( \\mathbb{R}^3 \\).</p> <p>Solution:</p> <ol> <li>Zero Vector: \\( (0, 0, 0) \\in W \\).</li> <li>Addition: Closure under addition holds.</li> <li>Scalar Multiplication: Closure under scalar multiplication holds.</li> </ol>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces2/#exercise-2","title":"Exercise 2","text":"<p>Find the null space of \\( A = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 6 \\end{bmatrix} \\).</p> <p>Solution:</p> <p>Solve \\( A\\mathbf{x} = \\mathbf{0} \\):</p> \\[ \\mathbf{x} = \\begin{bmatrix} t \\\\ -\\frac{1}{2}t \\end{bmatrix}, \\, t \\in \\mathbb{R} \\] <p>Basis: \\( \\begin{bmatrix} 1 \\\\ -\\frac{1}{2} \\end{bmatrix} \\).</p>"},{"location":"Learning_resources/Mathematics/Linear%20Algebra/Vector%20Spaces2/#exercise-3","title":"Exercise 3","text":"<p>Find the basis for the column space of:</p> \\[ A = \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{bmatrix} \\] <p>Solution:</p> <p>Rank: 2.</p> <p>Basis vectors: </p> \\[ \\begin{bmatrix} 1 \\\\ 4 \\\\ 7 \\end{bmatrix}, \\begin{bmatrix} 2 \\\\ 5 \\\\ 8 \\end{bmatrix} \\]"},{"location":"Learning_resources/Python/Class/","title":"Understanding Classes in Python","text":"<p>In Python, a class is a blueprint for creating objects. Classes encapsulate data (attributes) and behaviors (methods) that define objects. They are a cornerstone of Object-Oriented Programming (OOP).</p> <p>This document provides a detailed explanation of Python classes with examples and syntax.</p>"},{"location":"Learning_resources/Python/Class/#what-is-a-class","title":"What is a Class?","text":"<p>A class is a logical grouping of data and functions that operate on that data. It defines a type and provides a mechanism for creating objects of that type.</p>"},{"location":"Learning_resources/Python/Class/#syntax-for-defining-a-class","title":"Syntax for Defining a Class","text":"<pre><code>class ClassName:\n    # Class attributes\n    class_attribute = \"Default Value\"\n\n    # Constructor method\n    def __init__(self, instance_attribute1, instance_attribute2):\n        self.instance_attribute1 = instance_attribute1\n        self.instance_attribute2 = instance_attribute2\n\n    # Instance method\n    def instance_method(self):\n        return f\"Attribute 1: {self.instance_attribute1}, Attribute 2: {self.instance_attribute2}\"\n\n    # Class method\n    @classmethod\n    def class_method(cls):\n        return cls.class_attribute\n\n    # Static method\n    @staticmethod\n    def static_method():\n        return \"Static methods don\u2019t require class or instance context.\"\n</code></pre>"},{"location":"Learning_resources/Python/Class/#components-of-a-class","title":"Components of a Class","text":""},{"location":"Learning_resources/Python/Class/#1-attributes","title":"1. Attributes","text":"<p>Attributes are variables that hold data. There are two types of attributes:</p> <ul> <li>Class Attributes: Shared by all instances of the class.</li> <li>Instance Attributes: Unique to each object.</li> </ul>"},{"location":"Learning_resources/Python/Class/#example","title":"Example:","text":"<pre><code>class Person:\n    species = \"Homo sapiens\"  # Class attribute\n\n    def __init__(self, name, age):\n        self.name = name      # Instance attribute\n        self.age = age        # Instance attribute\n\nperson1 = Person(\"Alice\", 30)\nperson2 = Person(\"Bob\", 25)\n\nprint(Person.species)        # Output: Homo sapiens\nprint(person1.name)          # Output: Alice\nprint(person2.age)           # Output: 25\n</code></pre>"},{"location":"Learning_resources/Python/Class/#2-methods","title":"2. Methods","text":"<p>Methods are functions defined within a class that operate on objects. There are three types:</p> <ul> <li>Instance Methods: Operate on instance attributes.</li> <li>Class Methods: Operate on class attributes and are defined with <code>@classmethod</code>.</li> <li>Static Methods: Independent of class or instance attributes and are defined with <code>@staticmethod</code>.</li> </ul>"},{"location":"Learning_resources/Python/Class/#example_1","title":"Example:","text":"<pre><code>class Calculator:\n    def __init__(self, value):\n        self.value = value\n\n    def add(self, other):\n        return self.value + other\n\n    @classmethod\n    def default_value(cls):\n        return cls(10)\n\n    @staticmethod\n    def info():\n        return \"This is a simple calculator.\"\n\ncalc = Calculator(20)\nprint(calc.add(5))           # Output: 25\nprint(Calculator.default_value().value)  # Output: 10\nprint(Calculator.info())     # Output: This is a simple calculator.\n</code></pre>"},{"location":"Learning_resources/Python/Class/#3-constructor-method-__init__","title":"3. Constructor Method (<code>__init__</code>)","text":"<p>The <code>__init__</code> method is called automatically when an object is instantiated. It initializes the object with data.</p>"},{"location":"Learning_resources/Python/Class/#example_2","title":"Example:","text":"<pre><code>class Book:\n    def __init__(self, title, author):\n        self.title = title\n        self.author = author\n\n    def details(self):\n        return f\"{self.title} by {self.author}\"\n\nbook = Book(\"1984\", \"George Orwell\")\nprint(book.details())        # Output: 1984 by George Orwell\n</code></pre>"},{"location":"Learning_resources/Python/Class/#4-special-methods-dunder-methods","title":"4. Special Methods (Dunder Methods)","text":"<p>Special methods, also known as \"magic\" methods, allow customization of class behavior.</p>"},{"location":"Learning_resources/Python/Class/#example_3","title":"Example:","text":"<pre><code>class Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n\n    def __str__(self):\n        return f\"Vector({self.x}, {self.y})\"\n\nv1 = Vector(1, 2)\nv2 = Vector(3, 4)\nv3 = v1 + v2\nprint(v3)                    # Output: Vector(4, 6)\n</code></pre>"},{"location":"Learning_resources/Python/Class/#key-points-about-classes","title":"Key Points About Classes","text":"<ol> <li>Encapsulation: Classes help group data and methods, enhancing code modularity and security.</li> <li>Reusability: Once defined, classes can be reused across different programs.</li> <li>Inheritance and Polymorphism: Classes support advanced OOP features for extending and customizing behavior.</li> </ol>"},{"location":"Learning_resources/Python/Class/#practical-example-a-banking-system","title":"Practical Example: A Banking System","text":"<pre><code>class BankAccount:\n    interest_rate = 0.02  # Class attribute\n\n    def __init__(self, owner, balance):\n        self.owner = owner      # Instance attribute\n        self.balance = balance  # Instance attribute\n\n    def deposit(self, amount):\n        self.balance += amount\n        return self.balance\n\n    def withdraw(self, amount):\n        if amount &gt; self.balance:\n            return \"Insufficient funds\"\n        self.balance -= amount\n        return self.balance\n\n    @classmethod\n    def set_interest_rate(cls, rate):\n        cls.interest_rate = rate\n\n    @staticmethod\n    def bank_policy():\n        return \"No overdrafts allowed.\"\n\n# Create an account\naccount = BankAccount(\"John Doe\", 1000)\naccount.deposit(500)\nprint(account.withdraw(200))     # Output: 1300\nprint(BankAccount.interest_rate) # Output: 0.02\nprint(BankAccount.bank_policy()) # Output: No overdrafts allowed.\n</code></pre> <p>Classes provide a powerful way to create modular and reusable code. Understanding their structure and functionality is essential for mastering Python and OOP.</p>"},{"location":"Learning_resources/Python/Conditions_and_Loops/","title":"Conditions and Loops","text":""},{"location":"Learning_resources/Python/Conditions_and_Loops/#conditions-and-loops-in-python","title":"Conditions and Loops in Python","text":"<p>Python provides intuitive ways to handle conditional statements and loops, enabling decision-making and repetition in programs. Below are detailed explanations and examples.</p>"},{"location":"Learning_resources/Python/Conditions_and_Loops/#conditional-statements","title":"Conditional Statements","text":"<p>Conditional statements allow decision-making by evaluating expressions and executing specific code blocks based on the results.</p>"},{"location":"Learning_resources/Python/Conditions_and_Loops/#1-if-statement","title":"1. if Statement","text":"<p>The <code>if</code> statement executes a block of code if a specified condition is <code>True</code>.</p> <p><pre><code>x = 10\nif x &gt; 5:\n    print(\"x is greater than 5\")\n</code></pre> Output: <p>x is greater than 5</p></p>"},{"location":"Learning_resources/Python/Conditions_and_Loops/#2-if-else-statement","title":"2. if-else Statement","text":"<p>The <code>if-else</code> statement provides an alternative block of code if the condition is <code>False</code>.</p> <pre><code>x = 3\nif x &gt; 5:\n    print(\"x is greater than 5\")\nelse:\n    print(\"x is less than or equal to 5\")\n</code></pre>"},{"location":"Learning_resources/Python/Conditions_and_Loops/#3-if-elif-else-statement","title":"3. if-elif-else Statement","text":"<p>The <code>if-elif-else</code> statement is used for multiple conditions.</p> <pre><code>x = 7\nif x &gt; 10:\n    print(\"x is greater than 10\")\nelif x &gt; 5:\n    print(\"x is greater than 5 but less than or equal to 10\")\nelse:\n    print(\"x is 5 or less\")\n</code></pre>"},{"location":"Learning_resources/Python/Conditions_and_Loops/#flow-diagram-for-conditional-statements","title":"Flow Diagram for Conditional Statements","text":"<pre><code>graph TD\n    Start[\"Start\"]\n    Condition[\"Condition\"]\n    TrueBlock[\"True Block\"]\n    FalseBlock[\"False Block\"]\n    End[\"End\"]\n\n    Start --&gt; Condition\n    Condition -- True --&gt; TrueBlock\n    Condition -- False --&gt; FalseBlock\n    TrueBlock --&gt; End\n    FalseBlock --&gt; End</code></pre>"},{"location":"Learning_resources/Python/Conditions_and_Loops/#match-case-statement-in-python","title":"match-case Statement in Python","text":"<p>The <code>match-case</code> statement, introduced in Python 3.10, is a feature that allows structural pattern matching. It provides an elegant way to compare values or match patterns, similar to a <code>switch</code> statement in other languages, but with advanced capabilities like destructuring and conditions.</p>"},{"location":"Learning_resources/Python/Conditions_and_Loops/#syntax","title":"Syntax","text":"<pre><code>match value:\n    case pattern1:\n        # Code block for pattern1\n    case pattern2:\n        # Code block for pattern2\n    case _:\n        # Default case (wildcard)\n</code></pre>"},{"location":"Learning_resources/Python/Conditions_and_Loops/#examples","title":"Examples","text":""},{"location":"Learning_resources/Python/Conditions_and_Loops/#1-simple-match-case","title":"1. Simple match-case","text":"<pre><code>def get_day_type(day):\n    match day:\n        case \"Saturday\" | \"Sunday\":\n            return \"Weekend\"\n        case \"Monday\" | \"Tuesday\" | \"Wednesday\" | \"Thursday\" | \"Friday\":\n            return \"Weekday\"\n        case _:\n            return \"Invalid day\"\n\nprint(get_day_type(\"Sunday\"))  # Output: Weekend\nprint(get_day_type(\"Friday\"))  # Output: Weekday\n</code></pre>"},{"location":"Learning_resources/Python/Conditions_and_Loops/#2-matching-with-conditions","title":"2. Matching with Conditions","text":"<pre><code>def describe_number(num):\n    match num:\n        case x if x &gt; 0:\n            return \"Positive\"\n        case x if x &lt; 0:\n            return \"Negative\"\n        case _:\n            return \"Zero\"\n\nprint(describe_number(10))  # Output: Positive\nprint(describe_number(-5))  # Output: Negative\nprint(describe_number(0))   # Output: Zero\n</code></pre>"},{"location":"Learning_resources/Python/Conditions_and_Loops/#3-destructuring-tuples","title":"3. Destructuring Tuples","text":"<pre><code>def describe_point(point):\n    match point:\n        case (0, 0):\n            return \"Origin\"\n        case (x, 0):\n            return f\"Point on X-axis at {x}\"\n        case (0, y):\n            return f\"Point on Y-axis at {y}\"\n        case (x, y):\n            return f\"Point at ({x}, {y})\"\n        case _:\n            return \"Not a point\"\n\nprint(describe_point((0, 0)))    # Output: Origin\nprint(describe_point((3, 0)))    # Output: Point on X-axis at 3\nprint(describe_point((0, -2)))   # Output: Point on Y-axis at -2\nprint(describe_point((2, 3)))    # Output: Point at (2, 3)\n</code></pre>"},{"location":"Learning_resources/Python/Conditions_and_Loops/#4-matching-lists","title":"4. Matching Lists","text":"<pre><code>def process_list(items):\n    match items:\n        case []:\n            return \"Empty list\"\n        case [x]:\n            return f\"Single item: {x}\"\n        case [x, y]:\n            return f\"Two items: {x}, {y}\"\n        case [x, *rest]:\n            return f\"First item: {x}, Rest: {rest}\"\n\nprint(process_list([]))           # Output: Empty list\nprint(process_list([10]))         # Output: Single item: 10\nprint(process_list([1, 2]))       # Output: Two items: 1, 2\nprint(process_list([1, 2, 3, 4])) # Output: First item: 1, Rest: [2, 3, 4]\n</code></pre>"},{"location":"Learning_resources/Python/Conditions_and_Loops/#5-matching-dictionaries","title":"5. Matching Dictionaries","text":"<pre><code>def check_config(config):\n    match config:\n        case {\"debug\": True}:\n            return \"Debugging enabled\"\n        case {\"debug\": False}:\n            return \"Debugging disabled\"\n        case _:\n            return \"No debug key found\"\n\nprint(check_config({\"debug\": True}))   # Output: Debugging enabled\nprint(check_config({\"debug\": False}))  # Output: Debugging disabled\nprint(check_config({\"version\": \"1.0\"})) # Output: No debug key found\n</code></pre>"},{"location":"Learning_resources/Python/Conditions_and_Loops/#flow-diagram","title":"Flow Diagram","text":"<pre><code>graph TD\n    Start[\"Start\"]\n    Value[\"Value\"]\n    Case1[\"Case 1\"]\n    Case2[\"Case 2\"]\n    DefaultCase[\"Default Case\"]\n    End[\"End\"]\n\n    Start --&gt; Value\n    Value --&gt; Case1\n    Value --&gt; Case2\n    Value --&gt; DefaultCase\n    Case1 --&gt; End\n    Case2 --&gt; End\n    DefaultCase --&gt; End</code></pre>"},{"location":"Learning_resources/Python/Conditions_and_Loops/#advantages","title":"Advantages","text":"<ol> <li>Improved Readability: Cleaner and more structured than complex <code>if-elif</code> chains.</li> <li>Flexible Matching: Supports destructuring, wildcards, and conditions.</li> <li>Default Handling: The <code>_</code> case acts as a fallback for unmatched patterns.</li> </ol>"},{"location":"Learning_resources/Python/Conditions_and_Loops/#limitations","title":"Limitations","text":"<ul> <li>Requires Python 3.10 or later.</li> <li>Overhead for very simple condition checks compared to <code>if-elif</code>.</li> </ul> <p>The <code>match-case</code> statement is particularly useful for applications like parsing structured data, handling enums, or processing complex conditions in a readable way. It adds a significant level of expressiveness and power to Python's pattern-matching capabilities.</p>"},{"location":"Learning_resources/Python/Conditions_and_Loops/#loops","title":"Loops","text":"<p>Loops are used to repeat a block of code multiple times.</p>"},{"location":"Learning_resources/Python/Conditions_and_Loops/#1-while-loop","title":"1. while Loop","text":"<p>The <code>while</code> loop executes as long as the condition is <code>True</code>.</p> <pre><code>count = 0\nwhile count &lt; 5:\n    print(f\"Count is {count}\")\n    count += 1\n</code></pre>"},{"location":"Learning_resources/Python/Conditions_and_Loops/#2-for-loop","title":"2. for Loop","text":"<p>The <code>for</code> loop iterates over a sequence (like a list, tuple, or range).</p> <pre><code>for i in range(5):\n    print(f\"Iteration {i}\")\n</code></pre>"},{"location":"Learning_resources/Python/Conditions_and_Loops/#3-nested-loops","title":"3. Nested Loops","text":"<p>Loops can be nested inside each other.</p> <pre><code>for i in range(3):\n    for j in range(2):\n        print(f\"Outer loop {i}, Inner loop {j}\")\n</code></pre>"},{"location":"Learning_resources/Python/Conditions_and_Loops/#4-loop-control-statements","title":"4. Loop Control Statements","text":"<ul> <li>break: Exits the loop.</li> <li>continue: Skips the current iteration.</li> <li>pass: Does nothing (a placeholder).</li> </ul> <pre><code>for i in range(5):\n    if i == 3:\n        break\n    elif i == 2:\n        continue\n    print(i)\n</code></pre>"},{"location":"Learning_resources/Python/Conditions_and_Loops/#flow-diagrams-for-loops","title":"Flow Diagrams for Loops","text":""},{"location":"Learning_resources/Python/Conditions_and_Loops/#while-loop","title":"While Loop","text":"<pre><code>graph TD\n    Start[\"Start\"]\n    Condition[\"Condition\"]\n    ExecuteBlock[\"Execute Block\"]\n    ExitLoop[\"Exit Loop\"]\n\n    Start --&gt; Condition\n    Condition -- True --&gt; ExecuteBlock\n    ExecuteBlock --&gt; Condition\n    Condition -- False --&gt; ExitLoop</code></pre>"},{"location":"Learning_resources/Python/Conditions_and_Loops/#for-loop","title":"For Loop","text":"<pre><code>graph TD\n    Start[\"Start\"]\n    Sequence[\"Sequence\"]\n    ExecuteBlock[\"Execute Block\"]\n    NextItem[\"Next Item\"]\n    ExitLoop[\"Exit Loop\"]\n\n    Start --&gt; Sequence\n    Sequence --&gt; ExecuteBlock\n    ExecuteBlock --&gt; NextItem\n    NextItem --&gt; Sequence\n    Sequence --&gt; ExitLoop</code></pre>"},{"location":"Learning_resources/Python/Conditions_and_Loops/#conclusion","title":"Conclusion","text":"<p>Conditional statements and loops are core concepts in Python, enabling flexible and dynamic programming. The flow diagrams above help visualize the logic and execution flow, making it easier to understand and implement these constructs in your programs.</p>"},{"location":"Learning_resources/Python/Constructors/","title":"Constructors in Python","text":"<p>A constructor in Python is a special method that is automatically called when an object of a class is created. The primary purpose of a constructor is to initialize the instance attributes of a class. In Python, constructors are defined using the <code>__init__</code> method.</p> <p>This document provides a detailed explanation of constructors in Python with syntax and examples.</p>"},{"location":"Learning_resources/Python/Constructors/#types-of-constructors-in-python","title":"Types of Constructors in Python","text":"<ol> <li>Default Constructor</li> <li>Parameterized Constructor</li> </ol>"},{"location":"Learning_resources/Python/Constructors/#1-default-constructor","title":"1. Default Constructor","text":"<p>A default constructor does not take any arguments other than <code>self</code>. It initializes the object with default values.</p>"},{"location":"Learning_resources/Python/Constructors/#syntax","title":"Syntax:","text":"<pre><code>class ClassName:\n    def __init__(self):\n        # Initialization code\n        pass\n</code></pre>"},{"location":"Learning_resources/Python/Constructors/#example","title":"Example:","text":"<pre><code>class Greeting:\n    def __init__(self):\n        self.message = \"Hello, World!\"\n\n    def display_message(self):\n        print(self.message)\n\n# Creating an object\ngreet = Greeting()\ngreet.display_message()  # Output: Hello, World!\n</code></pre>"},{"location":"Learning_resources/Python/Constructors/#2-parameterized-constructor","title":"2. Parameterized Constructor","text":"<p>A parameterized constructor takes arguments in addition to <code>self</code>. These arguments are used to initialize instance attributes with specific values.</p>"},{"location":"Learning_resources/Python/Constructors/#syntax_1","title":"Syntax:","text":"<pre><code>class ClassName:\n    def __init__(self, arg1, arg2):\n        # Initialization code using arguments\n        pass\n</code></pre>"},{"location":"Learning_resources/Python/Constructors/#example_1","title":"Example:","text":"<pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def display_info(self):\n        print(f\"Name: {self.name}, Age: {self.age}\")\n\n# Creating an object\nperson = Person(\"Alice\", 30)\nperson.display_info()  # Output: Name: Alice, Age: 30\n</code></pre>"},{"location":"Learning_resources/Python/Constructors/#key-points-about-constructors","title":"Key Points about Constructors","text":"<ol> <li>Automatic Invocation: The constructor is automatically called when an object is created.</li> <li>Single Constructor per Class: A class can only have one constructor method defined as <code>__init__</code>.</li> <li>Initialization of Attributes: Constructors are mainly used to initialize attributes.</li> <li>Self Parameter: The first parameter of the constructor must be <code>self</code>, which represents the instance being created.</li> </ol>"},{"location":"Learning_resources/Python/Constructors/#example-using-default-and-parameterized-constructors-together","title":"Example: Using Default and Parameterized Constructors Together","text":"<pre><code>class Rectangle:\n    def __init__(self, length=1, width=1):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return self.length * self.width\n\n# Using default constructor\nrect1 = Rectangle()\nprint(f\"Default Area: {rect1.area()}\")  # Output: Default Area: 1\n\n# Using parameterized constructor\nrect2 = Rectangle(10, 5)\nprint(f\"Parameterized Area: {rect2.area()}\")  # Output: Parameterized Area: 50\n</code></pre>"},{"location":"Learning_resources/Python/Constructors/#constructor-chaining","title":"Constructor Chaining","text":"<p>In Python, a constructor can call another method within the same class to initialize attributes.</p>"},{"location":"Learning_resources/Python/Constructors/#example_2","title":"Example:","text":"<pre><code>class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n        self.diameter = self.calculate_diameter()\n\n    def calculate_diameter(self):\n        return self.radius * 2\n\n# Creating an object\ncircle = Circle(5)\nprint(f\"Radius: {circle.radius}, Diameter: {circle.diameter}\")  # Output: Radius: 5, Diameter: 10\n</code></pre>"},{"location":"Learning_resources/Python/Constructors/#advantages-of-using-constructors","title":"Advantages of Using Constructors","text":"<ol> <li>Automatic Initialization: Ensures that attributes are initialized as soon as the object is created.</li> <li>Code Reusability: Provides a reusable way to initialize objects.</li> <li>Readability: Makes the code more readable and maintainable by consolidating initialization logic.</li> </ol>"},{"location":"Learning_resources/Python/Constructors/#understanding-destructors-in-python","title":"Understanding Destructors in Python","text":"<p>Destructors in Python are methods used to perform cleanup actions when an object is deleted or goes out of scope. Python manages memory automatically through garbage collection, but destructors allow for explicit cleanup of resources such as closing files or database connections.</p>"},{"location":"Learning_resources/Python/Constructors/#what-is-a-destructor","title":"What is a Destructor?","text":"<p>A destructor is a special method called when an object is destroyed. In Python, the destructor method is <code>__del__</code>. It is defined in a class and is automatically invoked when the object is no longer needed.</p>"},{"location":"Learning_resources/Python/Constructors/#syntax-of-a-destructor","title":"Syntax of a Destructor","text":"<p>The destructor method is defined using the <code>__del__</code> keyword.</p> <pre><code>class ClassName:\n    def __del__(self):\n        # Cleanup actions\n        print(\"Object is being destroyed\")\n</code></pre>"},{"location":"Learning_resources/Python/Constructors/#how-destructors-work-in-python","title":"How Destructors Work in Python","text":"<p>In Python, destructors are invoked under the following conditions: 1. When the reference count of an object drops to zero. 2. When the program ends (in most cases). 3. When the <code>del</code> statement is explicitly used to delete an object.</p>"},{"location":"Learning_resources/Python/Constructors/#code-examples","title":"Code Examples","text":""},{"location":"Learning_resources/Python/Constructors/#example-1-basic-destructor","title":"Example 1: Basic Destructor","text":"<pre><code>class Sample:\n    def __init__(self, name):\n        self.name = name\n        print(f\"Object {self.name} is created\")\n\n    def __del__(self):\n        print(f\"Object {self.name} is destroyed\")\n\n# Creating and deleting an object\nobj = Sample(\"TestObject\")\ndel obj\n</code></pre> <p>Output: <pre><code>Object TestObject is created\nObject TestObject is destroyed\n</code></pre></p>"},{"location":"Learning_resources/Python/Constructors/#example-2-destructor-with-resource-cleanup","title":"Example 2: Destructor with Resource Cleanup","text":"<pre><code>class FileHandler:\n    def __init__(self, file_name):\n        self.file_name = file_name\n        self.file = open(self.file_name, 'w')\n        print(f\"File {self.file_name} is opened\")\n\n    def write_data(self, data):\n        self.file.write(data)\n\n    def __del__(self):\n        self.file.close()\n        print(f\"File {self.file_name} is closed\")\n\n# Using the FileHandler class\nhandler = FileHandler(\"example.txt\")\nhandler.write_data(\"Hello, World!\")\ndel handler\n</code></pre> <p>Output: <pre><code>File example.txt is opened\nFile example.txt is closed\n</code></pre></p>"},{"location":"Learning_resources/Python/Constructors/#example-3-implicit-destructor-invocation","title":"Example 3: Implicit Destructor Invocation","text":"<p>Destructors are called automatically when an object goes out of scope or the program ends.</p> <pre><code>class AutoDestroy:\n    def __init__(self, name):\n        self.name = name\n        print(f\"Object {self.name} is created\")\n\n    def __del__(self):\n        print(f\"Object {self.name} is destroyed\")\n\n# Creating objects in a function\ndef create_objects():\n    obj1 = AutoDestroy(\"Object1\")\n    obj2 = AutoDestroy(\"Object2\")\n\ncreate_objects()  # Objects will be destroyed when the function ends\n</code></pre> <p>Output: <pre><code>Object Object1 is created\nObject Object2 is created\nObject Object1 is destroyed\nObject Object2 is destroyed\n</code></pre></p>"},{"location":"Learning_resources/Python/Constructors/#things-to-remember-about-destructors","title":"Things to Remember about Destructors","text":"<ol> <li>Garbage Collection: Python has a built-in garbage collector that automatically reclaims memory, so explicit use of destructors is rarely needed.</li> <li>Circular References: Destructors are not called for objects involved in circular references.</li> <li>Exceptions in <code>__del__</code>: If an exception occurs inside the <code>__del__</code> method, it will be ignored, and the program continues execution.</li> <li>Explicit Deletion: Use the <code>del</code> statement to explicitly delete an object and invoke its destructor.</li> </ol>"},{"location":"Learning_resources/Python/Constructors/#use-cases-of-destructors","title":"Use Cases of Destructors","text":"<ol> <li>Closing files or network connections.</li> <li>Releasing locks in multi-threaded programs.</li> <li>Cleaning up temporary resources or cache data.</li> </ol> <p>This concludes the overview of constructors in Python. Use these examples and explanations to enhance your understanding and practice implementing constructors in your classes!</p> <p>Destructors, while less commonly used in Python compared to other languages, are a powerful tool for resource management and cleanup when used correctly. Understanding their behavior is essential for writing robust and efficient Python programs.</p>"},{"location":"Learning_resources/Python/Data_Abstraction/","title":"Data Abstraction in Python","text":"<p>Data abstraction is an essential concept in object-oriented programming that focuses on hiding the implementation details and exposing only the necessary functionality to the users. By using abstraction, we can simplify complex systems and make our code more modular and easier to understand.</p> <p>In Python, abstraction can be implemented using abstract classes and interfaces. Python provides the <code>abc</code> module (short for Abstract Base Class) to facilitate abstraction.</p>"},{"location":"Learning_resources/Python/Data_Abstraction/#what-is-data-abstraction","title":"What is Data Abstraction?","text":"<p>Data abstraction allows you to focus on what an object does instead of how it does it. This means that the implementation details are hidden from the user, and only the essential features are exposed.</p> <p>For example, when using a television, you only need to know how to operate it using buttons or a remote control. You do not need to understand the internal circuitry of the television.</p>"},{"location":"Learning_resources/Python/Data_Abstraction/#abstract-classes","title":"Abstract Classes","text":"<p>An abstract class in Python is a class that cannot be instantiated directly. It is meant to be a blueprint for other classes. Abstract classes can contain one or more abstract methods, which are methods declared but not implemented.</p>"},{"location":"Learning_resources/Python/Data_Abstraction/#syntax-for-abstract-classes","title":"Syntax for Abstract Classes","text":"<pre><code>from abc import ABC, abstractmethod\n\nclass AbstractClassName(ABC):\n    @abstractmethod\n    def abstract_method_name(self):\n        pass\n</code></pre>"},{"location":"Learning_resources/Python/Data_Abstraction/#key-points","title":"Key Points:","text":"<ol> <li>Abstract classes are defined using the <code>ABC</code> class from the <code>abc</code> module.</li> <li>Abstract methods are declared using the <code>@abstractmethod</code> decorator.</li> <li>A class inheriting from an abstract class must implement all the abstract methods; otherwise, it will also be treated as an abstract class.</li> </ol>"},{"location":"Learning_resources/Python/Data_Abstraction/#example-abstract-class-in-python","title":"Example: Abstract Class in Python","text":""},{"location":"Learning_resources/Python/Data_Abstraction/#abstract-class-with-implementation","title":"Abstract Class with Implementation:","text":"<pre><code>from abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n\n    @abstractmethod\n    def perimeter(self):\n        pass\n\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def area(self):\n        return self.width * self.height\n\n    def perimeter(self):\n        return 2 * (self.width + self.height)\n\n# Create an instance of Rectangle\nrect = Rectangle(10, 5)\nprint(\"Area:\", rect.area())        # Output: Area: 50\nprint(\"Perimeter:\", rect.perimeter())  # Output: Perimeter: 30\n</code></pre>"},{"location":"Learning_resources/Python/Data_Abstraction/#explanation","title":"Explanation:","text":"<ol> <li><code>Shape</code> is an abstract class with two abstract methods: <code>area</code> and <code>perimeter</code>.</li> <li>The <code>Rectangle</code> class inherits from the <code>Shape</code> class and implements both abstract methods.</li> <li>You cannot create an instance of the <code>Shape</code> class directly, as it contains abstract methods.</li> </ol>"},{"location":"Learning_resources/Python/Data_Abstraction/#example-real-life-scenario","title":"Example: Real-Life Scenario","text":"<p>Consider a payment processing system where different payment methods (e.g., credit card, PayPal, and bank transfer) are implemented using abstraction.</p>"},{"location":"Learning_resources/Python/Data_Abstraction/#code-example","title":"Code Example:","text":"<pre><code>from abc import ABC, abstractmethod\n\nclass Payment(ABC):\n    @abstractmethod\n    def make_payment(self, amount):\n        pass\n\nclass CreditCardPayment(Payment):\n    def make_payment(self, amount):\n        return f\"Paid {amount} using Credit Card.\"\n\nclass PayPalPayment(Payment):\n    def make_payment(self, amount):\n        return f\"Paid {amount} using PayPal.\"\n\n# Using the classes\npayment1 = CreditCardPayment()\nprint(payment1.make_payment(100))  # Output: Paid 100 using Credit Card.\n\npayment2 = PayPalPayment()\nprint(payment2.make_payment(200))  # Output: Paid 200 using PayPal.\n</code></pre>"},{"location":"Learning_resources/Python/Data_Abstraction/#explanation_1","title":"Explanation:","text":"<ol> <li><code>Payment</code> is an abstract class with an abstract method <code>make_payment</code>.</li> <li>Concrete classes <code>CreditCardPayment</code> and <code>PayPalPayment</code> inherit from <code>Payment</code> and implement the <code>make_payment</code> method.</li> </ol>"},{"location":"Learning_resources/Python/Data_Abstraction/#benefits-of-data-abstraction","title":"Benefits of Data Abstraction","text":"<ol> <li>Improved Modularity: Abstraction separates interface from implementation, promoting code reuse and modular design.</li> <li>Enhanced Readability: Users interact with the interface and are not concerned with internal details.</li> <li>Ease of Maintenance: Abstract classes act as blueprints, ensuring consistency and simplifying updates.</li> </ol>"},{"location":"Learning_resources/Python/Data_Abstraction/#limitations-of-data-abstraction","title":"Limitations of Data Abstraction","text":"<ol> <li>Abstract classes can increase complexity as they require detailed planning.</li> <li>Overuse of abstraction can make the code harder to follow.</li> </ol>"},{"location":"Learning_resources/Python/Data_Abstraction/#conclusion","title":"Conclusion","text":"<p>Data abstraction is a powerful tool in Python for designing scalable and maintainable applications. By focusing on \"what\" an object does and not \"how,\" abstraction helps developers create robust and reusable code structures. Leverage abstract classes and methods to enforce consistency and hide unnecessary details from users.</p>"},{"location":"Learning_resources/Python/Decorators/","title":"Python First-Class Functions, Closures, and Decorators","text":""},{"location":"Learning_resources/Python/Decorators/#overview","title":"Overview","text":"<p>This guide covers three fundamental concepts in Python: First-Class Functions, Closures, and Decorators. These concepts form the backbone of functional programming in Python and are essential for creating dynamic, reusable, and modular code.</p>"},{"location":"Learning_resources/Python/Decorators/#first-class-functions","title":"First-Class Functions","text":""},{"location":"Learning_resources/Python/Decorators/#what-are-first-class-functions","title":"What Are First-Class Functions?","text":"<p>In Python, functions are treated as first-class citizens, which means:</p> <ul> <li>They can be assigned to variables.</li> <li>They can be passed as arguments to other functions.</li> <li>They can be returned from other functions.</li> <li>They can be stored in data structures such as lists or dictionaries.</li> </ul>"},{"location":"Learning_resources/Python/Decorators/#syntax-and-examples","title":"Syntax and Examples","text":"<pre><code># Assigning a function to a variable\ndef greet(name):\n    return f\"Hello, {name}!\"\n\nsay_hello = greet\nprint(say_hello(\"Alice\"))  # Output: Hello, Alice!\n\n# Passing a function as an argument\n\ndef execute_function(func, value):\n    return func(value)\n\nprint(execute_function(greet, \"Bob\"))  # Output: Hello, Bob!\n\n# Returning a function from another function\n\ndef outer_function():\n    def inner_function():\n        return \"Hello from inner function!\"\n    return inner_function\n\ninner = outer_function()\nprint(inner())  # Output: Hello from inner function!\n</code></pre>"},{"location":"Learning_resources/Python/Decorators/#closures","title":"Closures","text":""},{"location":"Learning_resources/Python/Decorators/#what-are-closures","title":"What Are Closures?","text":"<p>A closure is a function that retains access to the variables from its enclosing scope even after that scope has finished executing. Closures are created when:</p> <ol> <li>A nested function references variables from the outer function.</li> <li>The outer function returns the nested function.</li> </ol>"},{"location":"Learning_resources/Python/Decorators/#syntax-and-examples_1","title":"Syntax and Examples","text":"<pre><code># Example of a closure\n\ndef outer_function(message):\n    def inner_function():\n        return f\"Message: {message}\"\n    return inner_function\n\nclosure_func = outer_function(\"Hello, World!\")\nprint(closure_func())  # Output: Message: Hello, World!\n\n# The 'message' variable is retained even after outer_function finishes.\n</code></pre>"},{"location":"Learning_resources/Python/Decorators/#real-world-use-case","title":"Real-World Use Case","text":"<p>Closures are often used to create function factories or to maintain state between function calls.</p> <pre><code># Function factory example\n\ndef multiplier(factor):\n    def multiply_by_factor(number):\n        return number * factor\n    return multiply_by_factor\n\nmultiply_by_2 = multiplier(2)\nmultiply_by_3 = multiplier(3)\n\nprint(multiply_by_2(10))  # Output: 20\nprint(multiply_by_3(10))  # Output: 30\n</code></pre>"},{"location":"Learning_resources/Python/Decorators/#decorators","title":"Decorators","text":""},{"location":"Learning_resources/Python/Decorators/#what-are-decorators","title":"What Are Decorators?","text":"<p>A decorator is a higher-order function that modifies or extends the behavior of another function or method without modifying its source code. Decorators are commonly used for:</p> <ul> <li>Logging</li> <li>Access control</li> <li>Caching</li> <li>Measuring execution time</li> </ul>"},{"location":"Learning_resources/Python/Decorators/#syntax-and-examples_2","title":"Syntax and Examples","text":"<p>Decorators are typically implemented using the <code>@decorator_name</code> syntax.</p> <pre><code># Basic decorator example\n\ndef decorator(func):\n    def wrapper():\n        print(\"Before the function call\")\n        func()\n        print(\"After the function call\")\n    return wrapper\n\n@decorator\ndef say_hello():\n    print(\"Hello, Decorators!\")\n\nsay_hello()\n# Output:\n# Before the function call\n# Hello, Decorators!\n# After the function call\n</code></pre>"},{"location":"Learning_resources/Python/Decorators/#decorating-functions-with-arguments","title":"Decorating Functions With Arguments","text":"<pre><code># Decorator for functions with arguments\n\ndef decorator(func):\n    def wrapper(*args, **kwargs):\n        print(f\"Arguments: {args}, {kwargs}\")\n        result = func(*args, **kwargs)\n        print(f\"Result: {result}\")\n        return result\n    return wrapper\n\n@decorator\ndef add(a, b):\n    return a + b\n\nadd(2, 3)\n# Output:\n# Arguments: (2, 3), {}\n# Result: 5\n</code></pre>"},{"location":"Learning_resources/Python/Decorators/#built-in-decorators","title":"Built-in Decorators","text":"<p>Python provides several built-in decorators, such as:</p> <ul> <li><code>@staticmethod</code>: Defines a static method.</li> <li><code>@classmethod</code>: Defines a class method.</li> <li><code>@property</code>: Defines a property method.</li> </ul> <pre><code>class Circle:\n    def __init__(self, radius):\n        self._radius = radius\n\n    @property\n    def radius(self):\n        return self._radius\n\n    @radius.setter\n    def radius(self, value):\n        if value &lt; 0:\n            raise ValueError(\"Radius cannot be negative\")\n        self._radius = value\n\ncircle = Circle(5)\nprint(circle.radius)  # Output: 5\ncircle.radius = 10\nprint(circle.radius)  # Output: 10\n</code></pre>"},{"location":"Learning_resources/Python/Decorators/#summary","title":"Summary","text":"Concept Description Example Use Case First-Class Functions Treat functions as values: assign, pass, or return them. Callbacks, function factories Closures Retain access to variables in an enclosing scope after the scope has exited. Function factories, maintaining state Decorators Modify or extend the behavior of functions or methods without altering their source code. Logging, access control, performance timing <p>These concepts enable Python developers to write cleaner, more modular, and more reusable code.</p>"},{"location":"Learning_resources/Python/Dict/","title":"Python Dictionary - A Comprehensive Guide","text":""},{"location":"Learning_resources/Python/Dict/#overview","title":"Overview","text":"<p>A dictionary in Python is a collection of key-value pairs that are unordered, mutable, and indexed. It is one of the most powerful and commonly used data structures in Python, allowing fast lookups, insertion, and deletion.</p>"},{"location":"Learning_resources/Python/Dict/#key-characteristics","title":"Key Characteristics","text":"<ul> <li>Key-Value Pairs: Each item in a dictionary is stored as a key-value pair.</li> <li>Keys Are Unique: Keys must be unique and immutable (e.g., strings, numbers, tuples).</li> <li>Mutable: Dictionaries can be modified after creation (e.g., adding, updating, or deleting items).</li> <li>Dynamic: The size of a dictionary can grow or shrink dynamically.</li> </ul>"},{"location":"Learning_resources/Python/Dict/#creating-dictionaries","title":"Creating Dictionaries","text":"<p>Dictionaries can be created using curly braces <code>{}</code> or the <code>dict()</code> constructor.</p> <pre><code># Using curly braces\nempty_dict = {}\nstudent = {\"name\": \"Alice\", \"age\": 22, \"major\": \"Computer Science\"}\n\n# Using the dict() constructor\nemployee = dict(name=\"Bob\", age=30, department=\"HR\")\n</code></pre>"},{"location":"Learning_resources/Python/Dict/#accessing-dictionary-elements","title":"Accessing Dictionary Elements","text":""},{"location":"Learning_resources/Python/Dict/#by-key","title":"By Key","text":"<p>You can access the value associated with a key using square brackets <code>[]</code> or the <code>get()</code> method.</p> <pre><code>student = {\"name\": \"Alice\", \"age\": 22, \"major\": \"Computer Science\"}\n\n# Accessing elements\nprint(student[\"name\"])  # Output: Alice\nprint(student.get(\"age\"))  # Output: 22\n</code></pre>"},{"location":"Learning_resources/Python/Dict/#iterating-through-a-dictionary","title":"Iterating Through a Dictionary","text":"<pre><code># Iterating through keys\nfor key in student:\n    print(key, student[key])\n\n# Iterating through key-value pairs\nfor key, value in student.items():\n    print(f\"{key}: {value}\")\n</code></pre>"},{"location":"Learning_resources/Python/Dict/#modifying-dictionaries","title":"Modifying Dictionaries","text":""},{"location":"Learning_resources/Python/Dict/#adding-or-updating-elements","title":"Adding or Updating Elements","text":"<pre><code>student = {\"name\": \"Alice\", \"age\": 22}\nstudent[\"major\"] = \"Computer Science\"  # Adding a new key-value pair\nstudent[\"age\"] = 23  # Updating an existing key-value pair\nprint(student)\n# Output: {'name': 'Alice', 'age': 23, 'major': 'Computer Science'}\n</code></pre>"},{"location":"Learning_resources/Python/Dict/#removing-elements","title":"Removing Elements","text":"<ul> <li><code>pop(key)</code>: Removes the key-value pair for the specified key.</li> <li><code>popitem()</code>: Removes and returns the last inserted key-value pair.</li> <li><code>del</code>: Deletes a specific key or the entire dictionary.</li> <li><code>clear()</code>: Removes all items from the dictionary.</li> </ul> <pre><code>student = {\"name\": \"Alice\", \"age\": 22, \"major\": \"Computer Science\"}\n\n# Removing an item\nstudent.pop(\"age\")\nprint(student)  # Output: {'name': 'Alice', 'major': 'Computer Science'}\n\n# Clearing the dictionary\nstudent.clear()\nprint(student)  # Output: {}\n</code></pre>"},{"location":"Learning_resources/Python/Dict/#dictionary-methods","title":"Dictionary Methods","text":""},{"location":"Learning_resources/Python/Dict/#common-methods","title":"Common Methods","text":"<ul> <li><code>keys()</code>: Returns a view object of all keys.</li> <li><code>values()</code>: Returns a view object of all values.</li> <li><code>items()</code>: Returns a view object of all key-value pairs.</li> <li><code>update(other_dict)</code>: Updates the dictionary with another dictionary.</li> </ul> <pre><code>student = {\"name\": \"Alice\", \"age\": 22}\nprint(student.keys())   # Output: dict_keys(['name', 'age'])\nprint(student.values()) # Output: dict_values(['Alice', 22])\nprint(student.items())  # Output: dict_items([('name', 'Alice'), ('age', 22)])\n\n# Updating the dictionary\nstudent.update({\"major\": \"Computer Science\"})\nprint(student)\n# Output: {'name': 'Alice', 'age': 22, 'major': 'Computer Science'}\n</code></pre>"},{"location":"Learning_resources/Python/Dict/#difference-tuple-vs-list-vs-set-vs-dictionary","title":"Difference: Tuple vs List vs Set vs Dictionary","text":"Feature Tuple List Set Dictionary Ordered Yes Yes No No Mutable No Yes Yes Yes (keys immutable) Duplicates Allowed Yes Yes No Keys: No, Values: Yes Access by Index Yes Yes No No Syntax <code>(1, 2)</code> <code>[1, 2]</code> <code>{1, 2}</code> <code>{\"key\": \"value\"}</code>"},{"location":"Learning_resources/Python/Dict/#difference-dictionary-vs-json","title":"Difference: Dictionary vs JSON","text":"Feature Dictionary JSON Format Python-specific Language-neutral Syntax <code>{}</code> for key-value pairs Text-based (string) Keys Must be immutable and hashable Must be strings Boolean Values <code>True</code>/<code>False</code> <code>true</code>/<code>false</code> Null Representation <code>None</code> <code>null</code> Data Types Python objects Strings, numbers, arrays Use Case In-memory operations Data exchange"},{"location":"Learning_resources/Python/Dict/#syntax-and-code-examples","title":"Syntax and Code Examples","text":"<p>Dictionary Example</p> <pre><code>data = {\"name\": \"Alice\", \"age\": 22, \"is_student\": True}\nprint(data[\"name\"])  # Output: Alice\n</code></pre> <p>JSON Example</p> <pre><code>import json\n\n# Convert dictionary to JSON\ndata = {\"name\": \"Alice\", \"age\": 22, \"is_student\": True}\ndata_json = json.dumps(data)\nprint(data_json)  # Output: '{\"name\": \"Alice\", \"age\": 22, \"is_student\": true}'\n\n# Convert JSON to dictionary\ndata_dict = json.loads(data_json)\nprint(data_dict[\"name\"])  # Output: Alice\n</code></pre>"},{"location":"Learning_resources/Python/Encapsulation/","title":"Encapsulation in Python","text":"<p>Encapsulation is one of the fundamental principles of Object-Oriented Programming (OOP). It is the mechanism of restricting access to certain details of an object and exposing only essential features. This concept helps protect an object\u2019s integrity by preventing unintended interference and misuse of its data.</p> <p>Encapsulation is implemented in Python by: 1. Defining public, protected, and private attributes. 2. Using getter and setter methods to access and modify private attributes.</p>"},{"location":"Learning_resources/Python/Encapsulation/#1-public-attributes","title":"1. Public Attributes","text":"<p>Public attributes are accessible from anywhere, both inside and outside the class.</p>"},{"location":"Learning_resources/Python/Encapsulation/#syntax","title":"Syntax:","text":"<pre><code>class ClassName:\n    def __init__(self):\n        self.public_attribute = \"Accessible everywhere\"\n\n# Accessing public attribute\nobj = ClassName()\nprint(obj.public_attribute)\n</code></pre>"},{"location":"Learning_resources/Python/Encapsulation/#example","title":"Example:","text":"<pre><code>class Person:\n    def __init__(self, name):\n        self.name = name  # Public attribute\n\nperson = Person(\"Alice\")\nprint(person.name)  # Output: Alice\n</code></pre>"},{"location":"Learning_resources/Python/Encapsulation/#2-protected-attributes","title":"2. Protected Attributes","text":"<p>Protected attributes are indicated by a single underscore (<code>_</code>) prefix. They are intended to be used within the class and its subclasses, but can still be accessed directly if needed (not strictly enforced).</p>"},{"location":"Learning_resources/Python/Encapsulation/#syntax_1","title":"Syntax:","text":"<pre><code>class ClassName:\n    def __init__(self):\n        self._protected_attribute = \"Accessible within class and subclasses\"\n</code></pre>"},{"location":"Learning_resources/Python/Encapsulation/#example_1","title":"Example:","text":"<pre><code>class Animal:\n    def __init__(self, species):\n        self._species = species  # Protected attribute\n\n    def get_species(self):\n        return self._species\n\nclass Dog(Animal):\n    def speak(self):\n        return f\"I am a {self._species}. Woof!\"\n\ndog = Dog(\"Canine\")\nprint(dog.get_species())  # Output: Canine\nprint(dog.speak())        # Output: I am a Canine. Woof!\n</code></pre>"},{"location":"Learning_resources/Python/Encapsulation/#3-private-attributes","title":"3. Private Attributes","text":"<p>Private attributes are indicated by a double underscore (<code>__</code>) prefix. They are only accessible within the class and are not directly accessible from outside the class.</p>"},{"location":"Learning_resources/Python/Encapsulation/#syntax_2","title":"Syntax:","text":"<pre><code>class ClassName:\n    def __init__(self):\n        self.__private_attribute = \"Accessible only within the class\"\n</code></pre>"},{"location":"Learning_resources/Python/Encapsulation/#example_2","title":"Example:","text":"<pre><code>class BankAccount:\n    def __init__(self, balance):\n        self.__balance = balance  # Private attribute\n\n    def deposit(self, amount):\n        self.__balance += amount\n\n    def get_balance(self):\n        return self.__balance\n\naccount = BankAccount(1000)\naccount.deposit(500)\nprint(account.get_balance())  # Output: 1500\n\n# Attempting to access private attribute directly\n# print(account.__balance)  # Raises AttributeError\n</code></pre>"},{"location":"Learning_resources/Python/Encapsulation/#4-getter-and-setter-methods","title":"4. Getter and Setter Methods","text":"<p>Getter and setter methods are used to access and modify private attributes while maintaining control over how the data is manipulated.</p>"},{"location":"Learning_resources/Python/Encapsulation/#syntax_3","title":"Syntax:","text":"<pre><code>class ClassName:\n    def __init__(self):\n        self.__attribute = value\n\n    def get_attribute(self):\n        return self.__attribute\n\n    def set_attribute(self, value):\n        self.__attribute = value\n</code></pre>"},{"location":"Learning_resources/Python/Encapsulation/#example_3","title":"Example:","text":"<pre><code>class Employee:\n    def __init__(self, salary):\n        self.__salary = salary  # Private attribute\n\n    def get_salary(self):\n        return self.__salary\n\n    def set_salary(self, value):\n        if value &gt; 0:\n            self.__salary = value\n        else:\n            raise ValueError(\"Salary must be positive\")\n\nemployee = Employee(5000)\nprint(employee.get_salary())  # Output: 5000\n\nemployee.set_salary(6000)\nprint(employee.get_salary())  # Output: 6000\n\n# employee.set_salary(-100)  # Raises ValueError\n</code></pre>"},{"location":"Learning_resources/Python/Encapsulation/#benefits-of-encapsulation","title":"Benefits of Encapsulation","text":"<ol> <li>Data Protection: Prevents unauthorized access and modification of data.</li> <li>Modularity: Makes the class more modular and manageable.</li> <li>Ease of Maintenance: Changes to encapsulated code do not affect other parts of the program.</li> <li>Controlled Access: Provides controlled access through methods like getters and setters.</li> </ol> <p>Encapsulation ensures the integrity and security of the data while providing the flexibility to modify implementations without affecting external code.</p>"},{"location":"Learning_resources/Python/Exception_Handling/","title":"Python Exception Handling - A Comprehensive Guide","text":""},{"location":"Learning_resources/Python/Exception_Handling/#overview","title":"Overview","text":"<p>Exception handling in Python is a mechanism to handle errors gracefully without halting the program's execution. Exceptions are unexpected events that disrupt the normal flow of a program.</p>"},{"location":"Learning_resources/Python/Exception_Handling/#key-concepts","title":"Key Concepts","text":"<ul> <li>Exception: An error that occurs during the execution of a program.</li> <li>Handling: Using specific syntax and constructs to address these errors.</li> </ul>"},{"location":"Learning_resources/Python/Exception_Handling/#why-handle-exceptions","title":"Why Handle Exceptions?","text":"<ul> <li>Prevent Program Crashes: Handle errors without stopping the program.</li> <li>Provide Informative Messages: Help users or developers understand what went wrong.</li> <li>Maintain Program Flow: Allow the program to recover from unexpected states.</li> </ul>"},{"location":"Learning_resources/Python/Exception_Handling/#python-exception-hierarchy","title":"Python Exception Hierarchy","text":"<p>Python exceptions are organized in a hierarchy. Commonly used exceptions include: - <code>Exception</code>: Base class for all exceptions. - <code>ValueError</code>: Raised for invalid values. - <code>TypeError</code>: Raised for operations on incompatible types. - <code>IndexError</code>: Raised when accessing out-of-bound indexes in sequences. - <code>KeyError</code>: Raised when a dictionary key is not found. - <code>ZeroDivisionError</code>: Raised when dividing by zero.</p>"},{"location":"Learning_resources/Python/Exception_Handling/#syntax-of-exception-handling","title":"Syntax of Exception Handling","text":"<p>Python provides <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks for handling exceptions.</p>"},{"location":"Learning_resources/Python/Exception_Handling/#basic-syntax","title":"Basic Syntax","text":"<pre><code>try:\n    # Code that may raise an exception\n    risky_code()\nexcept ExceptionType:\n    # Code to handle the exception\n    handle_error()\n</code></pre>"},{"location":"Learning_resources/Python/Exception_Handling/#extended-syntax","title":"Extended Syntax","text":"<pre><code>try:\n    # Code that may raise an exception\n    risky_code()\nexcept ExceptionType1:\n    # Handle ExceptionType1\n    handle_error1()\nexcept ExceptionType2:\n    # Handle ExceptionType2\n    handle_error2()\nelse:\n    # Code to run if no exceptions occur\n    run_success_code()\nfinally:\n    # Code that always runs, regardless of exceptions\n    cleanup_code()\n</code></pre>"},{"location":"Learning_resources/Python/Exception_Handling/#examples-of-exception-handling","title":"Examples of Exception Handling","text":""},{"location":"Learning_resources/Python/Exception_Handling/#handling-a-single-exception","title":"Handling a Single Exception","text":"<pre><code>try:\n    number = int(input(\"Enter a number: \"))\n    result = 10 / number\n    print(\"Result:\", result)\nexcept ZeroDivisionError:\n    print(\"You cannot divide by zero!\")\n</code></pre>"},{"location":"Learning_resources/Python/Exception_Handling/#handling-multiple-exceptions","title":"Handling Multiple Exceptions","text":"<pre><code>try:\n    data = [1, 2, 3]\n    print(data[5])\nexcept IndexError:\n    print(\"Index out of range!\")\nexcept KeyError:\n    print(\"Key not found!\")\n</code></pre>"},{"location":"Learning_resources/Python/Exception_Handling/#using-else-and-finally","title":"Using Else and Finally","text":"<pre><code>try:\n    file = open(\"example.txt\", \"r\")\n    content = file.read()\nexcept FileNotFoundError:\n    print(\"File not found!\")\nelse:\n    print(\"File content:\", content)\nfinally:\n    print(\"Execution completed.\")\n</code></pre>"},{"location":"Learning_resources/Python/Exception_Handling/#raising-exceptions","title":"Raising Exceptions","text":"<p>You can explicitly raise exceptions using the <code>raise</code> keyword.</p> <pre><code>age = int(input(\"Enter your age: \"))\nif age &lt; 0:\n    raise ValueError(\"Age cannot be negative!\")\n</code></pre>"},{"location":"Learning_resources/Python/Exception_Handling/#custom-exceptions","title":"Custom Exceptions","text":"<p>You can define your own exceptions by inheriting from the <code>Exception</code> class.</p> <pre><code>class CustomError(Exception):\n    def __init__(self, message):\n        self.message = message\n\ntry:\n    raise CustomError(\"This is a custom error!\")\nexcept CustomError as e:\n    print(\"Caught custom error:\", e.message)\n</code></pre>"},{"location":"Learning_resources/Python/Exception_Handling/#best-practices-for-exception-handling","title":"Best Practices for Exception Handling","text":"<ol> <li>Be Specific: Catch specific exceptions rather than using a generic <code>Exception</code>.</li> <li>Use Else for Success: Use the <code>else</code> block for code that runs only when no exception occurs.</li> <li>Avoid Bare Excepts: Do not use <code>except:</code> without specifying an exception type.</li> <li>Clean Up Resources: Use <code>finally</code> or context managers to release resources.</li> <li>Log Errors: Use logging instead of printing errors for production systems.</li> </ol>"},{"location":"Learning_resources/Python/Exception_Handling/#common-mistakes-to-avoid","title":"Common Mistakes to Avoid","text":"<ol> <li> <p>Swallowing Exceptions:    <pre><code>try:\n    risky_code()\nexcept Exception:\n    pass  # This hides the error and makes debugging difficult\n</code></pre></p> </li> <li> <p>Overusing Exceptions:    <pre><code>try:\n    if number &lt; 0:\n        raise ValueError(\"Negative value\")\nexcept ValueError:\n    print(\"Handle negative values logically instead of raising errors.\")\n</code></pre></p> </li> </ol>"},{"location":"Learning_resources/Python/Exception_Handling/#summary","title":"Summary","text":"<ul> <li>Exception handling ensures your program runs smoothly despite unexpected errors.</li> <li>Use <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> for robust error handling.</li> <li>Raise and handle custom exceptions when needed.</li> <li>Follow best practices to write clean, maintainable code.</li> </ul>"},{"location":"Learning_resources/Python/File_Handling/","title":"Python File Handling and File I/O","text":"<p>File handling in Python is a vital skill for working with external files to read, write, and manage data. Python provides a simple and intuitive interface for file operations through built-in functions and methods.</p>"},{"location":"Learning_resources/Python/File_Handling/#why-file-handling-is-important","title":"Why File Handling is Important","text":"<p>File handling allows programs to: - Store data persistently. - Share data between programs. - Work with large datasets efficiently.</p>"},{"location":"Learning_resources/Python/File_Handling/#basic-file-operations","title":"Basic File Operations","text":""},{"location":"Learning_resources/Python/File_Handling/#opening-a-file","title":"Opening a File","text":"<p>The <code>open()</code> function is used to open a file. It returns a file object and supports the following modes:</p> Mode Description <code>r</code> Read mode (default). <code>w</code> Write mode. Creates a file if it doesn't exist. Overwrites existing content. <code>x</code> Exclusive creation. Fails if the file exists. <code>a</code> Append mode. Creates the file if it doesn't exist. <code>b</code> Binary mode. <code>t</code> Text mode (default). <code>+</code> Open for both reading and writing."},{"location":"Learning_resources/Python/File_Handling/#syntax","title":"Syntax","text":"<pre><code>file = open(\"filename\", \"mode\")\n</code></pre>"},{"location":"Learning_resources/Python/File_Handling/#example","title":"Example","text":"<pre><code># Open a file in read mode\ndata_file = open(\"data.txt\", \"r\")\nprint(data_file.read())\ndata_file.close()\n</code></pre>"},{"location":"Learning_resources/Python/File_Handling/#reading-a-file","title":"Reading a File","text":"<p>Python provides multiple methods to read from a file.</p> <ul> <li><code>read(size)</code>: Reads the specified number of bytes. Reads the entire file if no size is provided.</li> <li><code>readline()</code>: Reads a single line from the file.</li> <li><code>readlines()</code>: Reads all lines and returns them as a list.</li> </ul>"},{"location":"Learning_resources/Python/File_Handling/#example_1","title":"Example","text":"<pre><code># Reading a file\nwith open(\"data.txt\", \"r\") as file:\n    content = file.read()\n    print(content)\n\n# Reading line by line\nwith open(\"data.txt\", \"r\") as file:\n    for line in file:\n        print(line.strip())\n</code></pre>"},{"location":"Learning_resources/Python/File_Handling/#writing-to-a-file","title":"Writing to a File","text":"<p>To write data to a file, use the <code>write()</code> or <code>writelines()</code> methods.</p> <ul> <li><code>write(string)</code>: Writes a string to the file.</li> <li><code>writelines(list)</code>: Writes a list of strings to the file.</li> </ul>"},{"location":"Learning_resources/Python/File_Handling/#example_2","title":"Example","text":"<pre><code># Writing to a file\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"Hello, World!\\n\")\n    file.write(\"Python File I/O is simple.\")\n\n# Writing multiple lines\nlines = [\"Line 1\\n\", \"Line 2\\n\", \"Line 3\\n\"]\nwith open(\"output.txt\", \"w\") as file:\n    file.writelines(lines)\n</code></pre>"},{"location":"Learning_resources/Python/File_Handling/#appending-to-a-file","title":"Appending to a File","text":"<p>Use the <code>a</code> mode to append data to a file without overwriting its existing content.</p>"},{"location":"Learning_resources/Python/File_Handling/#example_3","title":"Example","text":"<pre><code># Appending data to a file\nwith open(\"output.txt\", \"a\") as file:\n    file.write(\"This is an appended line.\\n\")\n</code></pre>"},{"location":"Learning_resources/Python/File_Handling/#closing-a-file","title":"Closing a File","text":"<p>Always close a file after operations to free up system resources. This can be done explicitly using <code>file.close()</code> or automatically with a <code>with</code> statement.</p>"},{"location":"Learning_resources/Python/File_Handling/#example_4","title":"Example","text":"<pre><code># Explicitly closing a file\nfile = open(\"data.txt\", \"r\")\nprint(file.read())\nfile.close()\n\n# Using a with statement\nwith open(\"data.txt\", \"r\") as file:\n    print(file.read())  # File is automatically closed after this block\n</code></pre>"},{"location":"Learning_resources/Python/File_Handling/#file-positioning","title":"File Positioning","text":"<p>The <code>seek()</code> and <code>tell()</code> methods help navigate through a file.</p> <ul> <li><code>tell()</code>: Returns the current file pointer position.</li> <li><code>seek(offset, from_what)</code>: Moves the file pointer to the specified position.</li> <li><code>from_what</code> values: <code>0</code> (default, beginning of file), <code>1</code> (current position), <code>2</code> (end of file).</li> </ul>"},{"location":"Learning_resources/Python/File_Handling/#example_5","title":"Example","text":"<pre><code>with open(\"data.txt\", \"r\") as file:\n    print(file.read(5))      # Read first 5 bytes\n    print(file.tell())       # Print current position\n    file.seek(0)             # Move pointer to the beginning\n    print(file.read(5))      # Read first 5 bytes again\n</code></pre>"},{"location":"Learning_resources/Python/File_Handling/#working-with-binary-files","title":"Working with Binary Files","text":"<p>Binary files store data in a non-human-readable format (e.g., images, videos).</p>"},{"location":"Learning_resources/Python/File_Handling/#example_6","title":"Example","text":"<pre><code># Writing binary data\nwith open(\"image.png\", \"rb\") as source:\n    content = source.read()\n\nwith open(\"copy.png\", \"wb\") as destination:\n    destination.write(content)\n</code></pre>"},{"location":"Learning_resources/Python/File_Handling/#file-deletion","title":"File Deletion","text":"<p>Use the <code>os</code> module to delete files.</p>"},{"location":"Learning_resources/Python/File_Handling/#example_7","title":"Example","text":"<pre><code>import os\n\n# Deleting a file\nif os.path.exists(\"output.txt\"):\n    os.remove(\"output.txt\")\n    print(\"File deleted.\")\nelse:\n    print(\"File does not exist.\")\n</code></pre>"},{"location":"Learning_resources/Python/File_Handling/#exception-handling-in-file-operations","title":"Exception Handling in File Operations","text":"<p>Use <code>try-except</code> blocks to handle errors gracefully.</p>"},{"location":"Learning_resources/Python/File_Handling/#example_8","title":"Example","text":"<pre><code>try:\n    with open(\"non_existent.txt\", \"r\") as file:\n        print(file.read())\nexcept FileNotFoundError:\n    print(\"File not found!\")\n</code></pre>"},{"location":"Learning_resources/Python/File_Handling/#summary-of-file-io-methods","title":"Summary of File I/O Methods","text":"Method Description <code>open()</code> Opens a file. <code>read()</code> Reads the entire file or specified bytes. <code>readline()</code> Reads a single line. <code>readlines()</code> Reads all lines as a list. <code>write()</code> Writes a string to the file. <code>writelines()</code> Writes a list of strings to the file. <code>close()</code> Closes the file. <code>seek()</code> Moves the file pointer to a specific position. <code>tell()</code> Returns the current file pointer position. <p>File handling is a fundamental skill in Python, enabling programs to interact with external files effectively. Understanding these concepts will help you manage data efficiently in real-world applications.</p>"},{"location":"Learning_resources/Python/Functions/","title":"Python Functions - A Comprehensive Guide","text":""},{"location":"Learning_resources/Python/Functions/#overview","title":"Overview","text":"<p>A function in Python is a block of reusable code that performs a specific task. Functions help to modularize the program, making it easier to write, debug, and maintain.</p>"},{"location":"Learning_resources/Python/Functions/#key-features","title":"Key Features","text":"<ul> <li>Modularization: Breaks down the code into manageable chunks.</li> <li>Reusability: Code can be reused in different parts of the program.</li> <li>Parameterization: Accepts inputs (parameters) to customize its behavior.</li> <li>Return Values: Produces an output that can be used elsewhere in the program.</li> </ul>"},{"location":"Learning_resources/Python/Functions/#defining-a-function","title":"Defining a Function","text":"<p>Functions in Python are defined using the <code>def</code> keyword, followed by the function name and parentheses <code>()</code> containing optional parameters.</p>"},{"location":"Learning_resources/Python/Functions/#syntax","title":"Syntax","text":"<pre><code>def function_name(parameters):\n    \"\"\"Optional Docstring\"\"\"\n    # Function body\n    return value\n</code></pre>"},{"location":"Learning_resources/Python/Functions/#example","title":"Example","text":"<pre><code>def greet(name):\n    \"\"\"Greets the user by name.\"\"\"\n    return f\"Hello, {name}!\"\n\n# Calling the function\nprint(greet(\"Alice\"))  # Output: Hello, Alice!\n</code></pre>"},{"location":"Learning_resources/Python/Functions/#types-of-functions","title":"Types of Functions","text":"<ol> <li>Built-in Functions: Provided by Python, such as <code>len()</code>, <code>print()</code>, etc.</li> <li>User-defined Functions: Created by the user to perform specific tasks.</li> <li>Anonymous Functions (Lambdas): Functions without a name, defined using the <code>lambda</code> keyword.</li> </ol>"},{"location":"Learning_resources/Python/Functions/#function-parameters-and-arguments","title":"Function Parameters and Arguments","text":""},{"location":"Learning_resources/Python/Functions/#types-of-parameters","title":"Types of Parameters","text":"<ol> <li>Positional Parameters: Passed in order.</li> <li>Default Parameters: Provide default values.</li> <li>Keyword Parameters: Explicitly specify parameter names.</li> <li>Variable-length Parameters: Allow multiple arguments.</li> </ol>"},{"location":"Learning_resources/Python/Functions/#examples","title":"Examples","text":"<p><pre><code>def describe_person(name, age=25, *hobbies, **attributes):\n    print(f\"Name: {name}, Age: {age}\")\n    print(f\"Hobbies: {hobbies}\")\n    print(f\"Attributes: {attributes}\")\n\ndescribe_person(\"Bob\", 30, \"reading\", \"cycling\", height=180, weight=75)\n</code></pre> Output:</p>"},{"location":"Learning_resources/Python/Functions/#name-bob-age-30-hobbies-reading-cycling-attributes-height-180-weight-75","title":"<p>Name: Bob,   Age: 30</p> <p>Hobbies: ('reading', 'cycling')</p> <p>Attributes: {'height': 180, 'weight': 75}</p>","text":""},{"location":"Learning_resources/Python/Functions/#returning-values","title":"Returning Values","text":"<p>Functions can return values using the <code>return</code> keyword. A function without a <code>return</code> statement implicitly returns <code>None</code>.</p> <pre><code>def add(a, b):\n    return a + b\n\nresult = add(5, 3)\nprint(result)  # Output: 8\n</code></pre>"},{"location":"Learning_resources/Python/Functions/#built-in-functions","title":"Built-in Functions","text":"<p>Python provides numerous built-in functions to perform common tasks. Here are some commonly used ones:</p> Category Function Examples Type <code>type()</code>, <code>isinstance()</code>, <code>id()</code> Math <code>abs()</code>, <code>round()</code>, <code>min()</code>, <code>max()</code> String <code>len()</code>, <code>str()</code>, <code>ord()</code>, <code>chr()</code> Iterables <code>len()</code>, <code>sum()</code>, <code>sorted()</code>, <code>zip()</code> Input/Output <code>print()</code>, <code>input()</code> Conversion <code>int()</code>, <code>float()</code>, <code>str()</code>, <code>list()</code>, <code>dict()</code>"},{"location":"Learning_resources/Python/Functions/#examples_1","title":"Examples","text":"<pre><code># Type functions\nx = 10\nprint(type(x))  # Output: &lt;class 'int'&gt;\n\n# Math functions\nprint(abs(-5))  # Output: 5\nprint(round(4.567, 2))  # Output: 4.57\n\n# String functions\nprint(len(\"hello\"))  # Output: 5\nprint(ord('A'))  # Output: 65\n</code></pre>"},{"location":"Learning_resources/Python/Functions/#magic-methods-dunder-methods","title":"Magic Methods (Dunder Methods)","text":"<p>Magic methods, also known as dunder (double underscore) methods, are special methods that allow you to define custom behaviors for built-in operations. These methods start and end with double underscores, e.g., <code>__init__</code>, <code>__str__</code>, <code>__add__</code>.</p>"},{"location":"Learning_resources/Python/Functions/#common-magic-methods","title":"Common Magic Methods","text":"Method Purpose <code>__init__</code> Constructor (initialization of objects) <code>__str__</code> String representation of an object <code>__repr__</code> Official string representation of an object <code>__len__</code> Defines behavior for <code>len()</code> <code>__add__</code> Defines behavior for <code>+</code> operator <code>__getitem__</code> Defines behavior for indexing (<code>[]</code>)"},{"location":"Learning_resources/Python/Functions/#examples_2","title":"Examples","text":"<pre><code>class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return f\"Point({self.x}, {self.y})\"\n\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n\n# Using the class\np1 = Point(1, 2)\np2 = Point(3, 4)\nprint(p1)  # Output: Point(1, 2)\nprint(p1 + p2)  # Output: Point(4, 6)\n</code></pre>"},{"location":"Learning_resources/Python/Functions/#lambda-functions","title":"Lambda Functions","text":"<p>Lambda functions are small, anonymous functions defined with the <code>lambda</code> keyword. They can have any number of arguments but only one expression.</p>"},{"location":"Learning_resources/Python/Functions/#syntax_1","title":"Syntax","text":"<pre><code>lambda arguments: expression\n</code></pre>"},{"location":"Learning_resources/Python/Functions/#example_1","title":"Example","text":"<pre><code># Regular function\nadd = lambda x, y: x + y\nprint(add(5, 3))  # Output: 8\n\n# Using lambda with `map`\nnumbers = [1, 2, 3, 4]\nsquared = list(map(lambda x: x**2, numbers))\nprint(squared)  # Output: [1, 4, 9, 16]\n</code></pre>"},{"location":"Learning_resources/Python/Functions/#key-differences-between-regular-and-lambda-functions","title":"Key Differences Between Regular and Lambda Functions","text":"Feature Regular Function Lambda Function Definition Uses <code>def</code> keyword Uses <code>lambda</code> keyword Name Named or anonymous Anonymous Number of Expressions Multiple expressions/statements Single expression Readability More readable Concise but less readable <p>This document provides a comprehensive understanding of Python functions, built-in functions, magic methods, and lambda expressions. Feel free to experiment with these concepts to deepen your understanding!</p>"},{"location":"Learning_resources/Python/Functions_2/","title":"Python Functions-2 - A Comprehensive Guide","text":"<p>Functions are reusable blocks of code designed to perform specific tasks. Python supports various types of functions, including built-in, user-defined, and anonymous (lambda) functions. This guide covers detailed explanations, syntax, and examples for various types of Python functions.</p>"},{"location":"Learning_resources/Python/Functions_2/#1-lambda-functions","title":"1. Lambda Functions","text":"<p>Lambda functions are anonymous, single-expression functions often used for short, concise operations.</p>"},{"location":"Learning_resources/Python/Functions_2/#syntax","title":"Syntax","text":"<pre><code>lambda arguments: expression\n</code></pre>"},{"location":"Learning_resources/Python/Functions_2/#example","title":"Example","text":"<pre><code># Add two numbers\nadd = lambda x, y: x + y\nprint(add(5, 3))  # Output: 8\n\n# Square of a number\nsquare = lambda x: x ** 2\nprint(square(4))  # Output: 16\n</code></pre>"},{"location":"Learning_resources/Python/Functions_2/#2-recursive-functions","title":"2. Recursive Functions","text":"<p>Recursive functions are functions that call themselves to solve smaller instances of a problem.</p>"},{"location":"Learning_resources/Python/Functions_2/#syntax_1","title":"Syntax","text":"<pre><code>def function_name(parameters):\n    if termination_condition:\n        return base_case\n    else:\n        return function_name(smaller_problem)\n</code></pre>"},{"location":"Learning_resources/Python/Functions_2/#example_1","title":"Example","text":"<pre><code># Factorial of a number\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n\nprint(factorial(5))  # Output: 120\n</code></pre>"},{"location":"Learning_resources/Python/Functions_2/#3-map-functions","title":"3. Map Functions","text":"<p>Map functions apply a given function to each item in an iterable (e.g., list, tuple).</p>"},{"location":"Learning_resources/Python/Functions_2/#syntax_2","title":"Syntax","text":"<pre><code>map(function, iterable)\n</code></pre>"},{"location":"Learning_resources/Python/Functions_2/#example_2","title":"Example","text":"<pre><code>numbers = [1, 2, 3, 4]\nsquares = map(lambda x: x ** 2, numbers)\nprint(list(squares))  # Output: [1, 4, 9, 16]\n</code></pre>"},{"location":"Learning_resources/Python/Functions_2/#4-filter-functions","title":"4. Filter Functions","text":"<p>Filter functions filter elements from an iterable based on a condition.</p>"},{"location":"Learning_resources/Python/Functions_2/#syntax_3","title":"Syntax","text":"<pre><code>filter(function, iterable)\n</code></pre>"},{"location":"Learning_resources/Python/Functions_2/#example_3","title":"Example","text":"<pre><code>numbers = [1, 2, 3, 4, 5]\neven_numbers = filter(lambda x: x % 2 == 0, numbers)\nprint(list(even_numbers))  # Output: [2, 4]\n</code></pre>"},{"location":"Learning_resources/Python/Functions_2/#5-reduce-functions","title":"5. Reduce Functions","text":"<p>Reduce functions, from the <code>functools</code> module, reduce an iterable to a single cumulative value.</p>"},{"location":"Learning_resources/Python/Functions_2/#syntax_4","title":"Syntax","text":"<pre><code>from functools import reduce\nreduce(function, iterable)\n</code></pre>"},{"location":"Learning_resources/Python/Functions_2/#example_4","title":"Example","text":"<pre><code>from functools import reduce\nnumbers = [1, 2, 3, 4]\nproduct = reduce(lambda x, y: x * y, numbers)\nprint(product)  # Output: 24\n</code></pre>"},{"location":"Learning_resources/Python/Functions_2/#6-functools-module","title":"6. Functools Module","text":"<p>The <code>functools</code> module provides higher-order functions for functional programming.</p>"},{"location":"Learning_resources/Python/Functions_2/#functions-in-functools","title":"Functions in <code>functools</code>","text":"<ol> <li><code>cmp_to_key(func)</code>: Converts a comparison function into a key function.</li> <li><code>lru_cache(maxsize=None)</code>: Decorator to cache results for optimization.</li> <li><code>partial(func, *args, **keywords)</code>: Create a new function with partial application of arguments.</li> <li><code>reduce(func, iterable)</code>: Applies a function cumulatively to items in an iterable.</li> <li><code>total_ordering(cls)</code>: Class decorator to fill in missing ordering methods.</li> <li><code>wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)</code>: Decorator to update a wrapper function.</li> </ol>"},{"location":"Learning_resources/Python/Functions_2/#example-partial-function","title":"Example: Partial Function","text":"<pre><code>from functools import partial\n\ndef power(base, exponent):\n    return base ** exponent\n\nsquare = partial(power, exponent=2)\nprint(square(5))  # Output: 25\n</code></pre>"},{"location":"Learning_resources/Python/Functions_2/#7-currying-functions","title":"7. Currying Functions","text":"<p>Currying transforms a function with multiple arguments into a sequence of functions, each with a single argument.</p>"},{"location":"Learning_resources/Python/Functions_2/#example_5","title":"Example","text":"<pre><code>def curry(func):\n    def curried(x):\n        return lambda y: func(x, y)\n    return curried\n\ndef add(x, y):\n    return x + y\n\ncurried_add = curry(add)\nadd_five = curried_add(5)\nprint(add_five(10))  # Output: 15\n</code></pre>"},{"location":"Learning_resources/Python/Functions_2/#8-memoization-functions","title":"8. Memoization Functions","text":"<p>Memoization is a technique to store function results for faster future computation.</p>"},{"location":"Learning_resources/Python/Functions_2/#example_6","title":"Example","text":"<pre><code>from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef fibonacci(n):\n    if n &lt;= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\nprint(fibonacci(10))  # Output: 55\n</code></pre>"},{"location":"Learning_resources/Python/Functions_2/#9-threading-functions","title":"9. Threading Functions","text":"<p>Threading allows parallel execution of code.</p>"},{"location":"Learning_resources/Python/Functions_2/#syntax_5","title":"Syntax","text":"<pre><code>from threading import Thread\n</code></pre>"},{"location":"Learning_resources/Python/Functions_2/#example_7","title":"Example","text":"<pre><code>from threading import Thread\n\ndef print_numbers():\n    for i in range(5):\n        print(i)\n\ndef print_letters():\n    for letter in 'abcde':\n        print(letter)\n\n# Create threads\nthread1 = Thread(target=print_numbers)\nthread2 = Thread(target=print_letters)\n\n# Start threads\nthread1.start()\nthread2.start()\n\n# Wait for threads to complete\nthread1.join()\nthread2.join()\n</code></pre>"},{"location":"Learning_resources/Python/Functions_2/#additional-functions","title":"Additional Functions","text":""},{"location":"Learning_resources/Python/Functions_2/#higher-order-functions","title":"Higher-Order Functions","text":"<p>Higher-order functions take other functions as arguments or return them.</p> <p>Example <pre><code>def apply_function(func, value):\n    return func(value)\n\ndef square(x):\n    return x ** 2\n\nprint(apply_function(square, 5))  # Output: 25\n</code></pre></p> <p>This guide provides a solid foundation for understanding and using Python functions effectively. Feel free to expand further based on your use case!</p>"},{"location":"Learning_resources/Python/Inheritance/","title":"Inheritance in Python","text":"<p>Inheritance is a fundamental concept in Object-Oriented Programming (OOP) that allows a class (child class) to inherit attributes and methods from another class (parent class). This enables code reuse, modularity, and the ability to build upon existing implementations.</p>"},{"location":"Learning_resources/Python/Inheritance/#why-use-inheritance","title":"Why Use Inheritance?","text":"<ol> <li>Code Reusability: Avoid rewriting common logic by inheriting it from a parent class.</li> <li>Modularity: Separate concerns by dividing functionalities among parent and child classes.</li> <li>Extensibility: Add or override functionalities in child classes without modifying the parent class.</li> </ol>"},{"location":"Learning_resources/Python/Inheritance/#types-of-inheritance","title":"Types of Inheritance","text":"<p>Python supports the following types of inheritance:</p> <ol> <li>Single Inheritance</li> <li>Multiple Inheritance</li> <li>Multilevel Inheritance</li> <li>Hierarchical Inheritance</li> <li>Hybrid Inheritance</li> </ol>"},{"location":"Learning_resources/Python/Inheritance/#syntax","title":"Syntax","text":"<pre><code>class ParentClass:\n    # Parent class attributes and methods\n\nclass ChildClass(ParentClass):\n    # Additional attributes and methods for the child class\n</code></pre>"},{"location":"Learning_resources/Python/Inheritance/#examples","title":"Examples","text":""},{"location":"Learning_resources/Python/Inheritance/#1-single-inheritance","title":"1. Single Inheritance","text":"<p>In single inheritance, a child class inherits from a single parent class.</p>"},{"location":"Learning_resources/Python/Inheritance/#example","title":"Example:","text":"<pre><code>class Animal:\n    def speak(self):\n        return \"I make sounds\"\n\nclass Dog(Animal):\n    def bark(self):\n        return \"Woof! Woof!\"\n\n# Create an object of the child class\ndog = Dog()\nprint(dog.speak())  # Output: I make sounds\nprint(dog.bark())   # Output: Woof! Woof!\n</code></pre>"},{"location":"Learning_resources/Python/Inheritance/#2-multiple-inheritance","title":"2. Multiple Inheritance","text":"<p>In multiple inheritance, a child class inherits from multiple parent classes.</p>"},{"location":"Learning_resources/Python/Inheritance/#example_1","title":"Example:","text":"<pre><code>class Father:\n    def skills(self):\n        return \"Driving\"\n\nclass Mother:\n    def skills(self):\n        return \"Cooking\"\n\nclass Child(Father, Mother):\n    def all_skills(self):\n        return f\"{self.skills()} and {Mother.skills(self)}\"\n\n# Create an object of the child class\nchild = Child()\nprint(child.all_skills())  # Output: Driving and Cooking\n</code></pre>"},{"location":"Learning_resources/Python/Inheritance/#3-multilevel-inheritance","title":"3. Multilevel Inheritance","text":"<p>In multilevel inheritance, a class inherits from another class, which in turn inherits from another class.</p>"},{"location":"Learning_resources/Python/Inheritance/#example_2","title":"Example:","text":"<pre><code>class Vehicle:\n    def info(self):\n        return \"I am a vehicle\"\n\nclass Car(Vehicle):\n    def car_type(self):\n        return \"I am a car\"\n\nclass SportsCar(Car):\n    def brand(self):\n        return \"I am a sports car\"\n\n# Create an object of the grandchild class\nsports_car = SportsCar()\nprint(sports_car.info())       # Output: I am a vehicle\nprint(sports_car.car_type())   # Output: I am a car\nprint(sports_car.brand())      # Output: I am a sports car\n</code></pre>"},{"location":"Learning_resources/Python/Inheritance/#4-hierarchical-inheritance","title":"4. Hierarchical Inheritance","text":"<p>In hierarchical inheritance, multiple child classes inherit from a single parent class.</p>"},{"location":"Learning_resources/Python/Inheritance/#example_3","title":"Example:","text":"<pre><code>class Parent:\n    def message(self):\n        return \"This is a message from the parent\"\n\nclass Child1(Parent):\n    def child1_message(self):\n        return \"This is child 1\"\n\nclass Child2(Parent):\n    def child2_message(self):\n        return \"This is child 2\"\n\n# Create objects of child classes\nchild1 = Child1()\nchild2 = Child2()\nprint(child1.message())        # Output: This is a message from the parent\nprint(child1.child1_message()) # Output: This is child 1\nprint(child2.message())        # Output: This is a message from the parent\nprint(child2.child2_message()) # Output: This is child 2\n</code></pre>"},{"location":"Learning_resources/Python/Inheritance/#5-hybrid-inheritance","title":"5. Hybrid Inheritance","text":"<p>Hybrid inheritance is a combination of two or more types of inheritance.</p>"},{"location":"Learning_resources/Python/Inheritance/#example_4","title":"Example:","text":"<pre><code>class Base:\n    def base_message(self):\n        return \"This is the base class\"\n\nclass Parent1(Base):\n    def parent1_message(self):\n        return \"This is parent 1\"\n\nclass Parent2(Base):\n    def parent2_message(self):\n        return \"This is parent 2\"\n\nclass Child(Parent1, Parent2):\n    def child_message(self):\n        return \"This is the child class\"\n\n# Create an object of the child class\nchild = Child()\nprint(child.base_message())     # Output: This is the base class\nprint(child.parent1_message())  # Output: This is parent 1\nprint(child.parent2_message())  # Output: This is parent 2\nprint(child.child_message())    # Output: This is the child class\n</code></pre>"},{"location":"Learning_resources/Python/Inheritance/#method-overriding-in-inheritance","title":"Method Overriding in Inheritance","text":"<p>Method overriding allows a child class to provide a specific implementation of a method that is already defined in its parent class.</p>"},{"location":"Learning_resources/Python/Inheritance/#example_5","title":"Example:","text":"<pre><code>class Parent:\n    def greet(self):\n        return \"Hello from Parent\"\n\nclass Child(Parent):\n    def greet(self):\n        return \"Hello from Child\"\n\n# Create objects\nparent = Parent()\nchild = Child()\nprint(parent.greet())  # Output: Hello from Parent\nprint(child.greet())   # Output: Hello from Child\n</code></pre>"},{"location":"Learning_resources/Python/Inheritance/#advantages-of-inheritance","title":"Advantages of Inheritance","text":"<ol> <li>Code Reusability: Eliminates redundancy by reusing common functionality.</li> <li>Improved Maintainability: Centralizes common logic, making updates easier.</li> <li>Extensibility: Easily extend functionality in child classes.</li> </ol> <p>This concludes an in-depth explanation of inheritance in Python with examples and syntax. Use this knowledge to create modular and reusable programs!</p>"},{"location":"Learning_resources/Python/Iterator_Generator_Duck_Typing/","title":"Python Generators, Iterators, and Duck Typing","text":""},{"location":"Learning_resources/Python/Iterator_Generator_Duck_Typing/#overview","title":"Overview","text":"<p>This page explores three foundational concepts in Python: Generators, Iterators, and Duck Typing. These concepts play a significant role in Python's design philosophy and practical programming.</p>"},{"location":"Learning_resources/Python/Iterator_Generator_Duck_Typing/#python-generators","title":"Python Generators","text":""},{"location":"Learning_resources/Python/Iterator_Generator_Duck_Typing/#what-are-generators","title":"What are Generators?","text":"<p>Generators are a type of iterable that yield values one at a time, allowing you to iterate over data without storing the entire dataset in memory. They are defined using the <code>yield</code> keyword instead of <code>return</code>.</p>"},{"location":"Learning_resources/Python/Iterator_Generator_Duck_Typing/#characteristics","title":"Characteristics","text":"<ul> <li>Generators are memory-efficient.</li> <li>They produce items only when needed (lazy evaluation).</li> <li>They maintain their state between iterations.</li> </ul>"},{"location":"Learning_resources/Python/Iterator_Generator_Duck_Typing/#syntax","title":"Syntax","text":"<pre><code>def generator_function():\n    yield 1\n    yield 2\n    yield 3\n\n# Using the generator\ngen = generator_function()\nprint(next(gen))  # Output: 1\nprint(next(gen))  # Output: 2\nprint(next(gen))  # Output: 3\n</code></pre>"},{"location":"Learning_resources/Python/Iterator_Generator_Duck_Typing/#example-generating-fibonacci-sequence","title":"Example: Generating Fibonacci Sequence","text":"<pre><code>def fibonacci(limit):\n    a, b = 0, 1\n    while a &lt; limit:\n        yield a\n        a, b = b, a + b\n\n# Using the generator\nfor num in fibonacci(10):\n    print(num)  # Output: 0 1 1 2 3 5 8\n</code></pre>"},{"location":"Learning_resources/Python/Iterator_Generator_Duck_Typing/#python-iterators","title":"Python Iterators","text":""},{"location":"Learning_resources/Python/Iterator_Generator_Duck_Typing/#what-are-iterators","title":"What are Iterators?","text":"<p>An iterator is an object that implements two methods: - <code>__iter__()</code> - Returns the iterator object itself. - <code>__next__()</code> - Returns the next item from the iterator. If no items remain, it raises <code>StopIteration</code>.</p>"},{"location":"Learning_resources/Python/Iterator_Generator_Duck_Typing/#characteristics_1","title":"Characteristics","text":"<ul> <li>Used to traverse through all items in a collection (e.g., list, tuple, set).</li> <li>Iterators are consumed once.</li> </ul>"},{"location":"Learning_resources/Python/Iterator_Generator_Duck_Typing/#syntax_1","title":"Syntax","text":"<pre><code>class MyIterator:\n    def __init__(self, numbers):\n        self.numbers = numbers\n        self.index = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.index &lt; len(self.numbers):\n            value = self.numbers[self.index]\n            self.index += 1\n            return value\n        else:\n            raise StopIteration\n\n# Using the iterator\nnums = MyIterator([1, 2, 3])\nfor num in nums:\n    print(num)  # Output: 1 2 3\n</code></pre>"},{"location":"Learning_resources/Python/Iterator_Generator_Duck_Typing/#iterables-vs-iterators","title":"Iterables vs Iterators","text":"Feature Iterable Iterator Definition An object that supports <code>__iter__()</code> An object that supports <code>__iter__()</code> and <code>__next__()</code> Example Lists, tuples, dictionaries Objects like file readers, generators Consumption Can be converted into an iterator Consumed item by item"},{"location":"Learning_resources/Python/Iterator_Generator_Duck_Typing/#duck-typing","title":"Duck Typing","text":""},{"location":"Learning_resources/Python/Iterator_Generator_Duck_Typing/#what-is-duck-typing","title":"What is Duck Typing?","text":"<p>Duck typing is a programming concept where the suitability of an object is determined by the presence of certain methods and properties, rather than the object's type. This aligns with Python's dynamic typing philosophy.</p> <p>\"If it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck.\"</p>"},{"location":"Learning_resources/Python/Iterator_Generator_Duck_Typing/#characteristics_2","title":"Characteristics","text":"<ul> <li>Focuses on behavior rather than inheritance or explicit type checking.</li> <li>Encourages flexibility and adaptability in code.</li> </ul>"},{"location":"Learning_resources/Python/Iterator_Generator_Duck_Typing/#syntax_2","title":"Syntax","text":"<pre><code>class Duck:\n    def quack(self):\n        print(\"Quack!\")\n\n    def swim(self):\n        print(\"Swimming like a duck.\")\n\nclass Person:\n    def quack(self):\n        print(\"I can quack too!\")\n\n    def swim(self):\n        print(\"I can swim as well!\")\n\n# Function demonstrating Duck Typing\ndef interact_with_duck(duck):\n    duck.quack()\n    duck.swim()\n\n# Using Duck Typing\ninteract_with_duck(Duck())  # Output: Quack! Swimming like a duck.\ninteract_with_duck(Person())  # Output: I can quack too! I can swim as well!\n</code></pre>"},{"location":"Learning_resources/Python/Iterator_Generator_Duck_Typing/#advantages","title":"Advantages","text":"<ul> <li>Encourages writing more generic and reusable code.</li> <li>Simplifies code without requiring strict type hierarchies.</li> </ul>"},{"location":"Learning_resources/Python/Iterator_Generator_Duck_Typing/#limitations","title":"Limitations","text":"<ul> <li>May lead to runtime errors if the expected behavior is not implemented in the object.</li> </ul>"},{"location":"Learning_resources/Python/Iterator_Generator_Duck_Typing/#summary-table","title":"Summary Table","text":"Concept Description Key Methods Example Use Cases Generators Yield values lazily <code>yield</code> Large datasets, streams Iterators Object for sequential data traversal <code>__iter__</code>, <code>__next__</code> File handling, custom collections Duck Typing Behavior-based object suitability N/A Polymorphism without inheritance <p>Let me know if there is anything else you would like to explore in more detail!</p>"},{"location":"Learning_resources/Python/List/","title":"Python List - A Comprehensive Guide","text":""},{"location":"Learning_resources/Python/List/#overview","title":"Overview","text":"<p>A list in Python is a collection of items that are ordered, mutable, and allow duplicate elements. Lists are one of the most versatile and commonly used data structures in Python, providing an efficient way to store and manipulate a collection of items.</p>"},{"location":"Learning_resources/Python/List/#key-characteristics","title":"Key Characteristics","text":"<ul> <li>Ordered: Items in a list have a specific order, and this order is preserved.</li> <li>Mutable: Lists can be modified after creation (e.g., adding, removing, or changing elements).</li> <li>Dynamic: Lists can grow or shrink in size dynamically.</li> <li>Heterogeneous: Lists can store elements of different data types (e.g., integers, strings, objects).</li> </ul>"},{"location":"Learning_resources/Python/List/#creating-lists","title":"Creating Lists","text":"<p>Lists can be created using square brackets <code>[]</code> or the <code>list()</code> constructor.</p> <pre><code># Using square brackets\nempty_list = []\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\n# Using the list() constructor\nnumbers = list((1, 2, 3, 4))\n</code></pre>"},{"location":"Learning_resources/Python/List/#accessing-list-elements","title":"Accessing List Elements","text":""},{"location":"Learning_resources/Python/List/#by-index","title":"By Index","text":"<p>Elements in a list can be accessed using their index. Indexing starts at <code>0</code> for the first element and goes up to <code>-1</code> for the last element (negative indexing).</p> <pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\n\n# Accessing elements\nprint(fruits[0])  # Output: apple\nprint(fruits[-1]) # Output: cherry\n</code></pre>"},{"location":"Learning_resources/Python/List/#slicing","title":"Slicing","text":"<p>Lists support slicing to access a subset of elements.</p> <pre><code>fruits = [\"apple\", \"banana\", \"cherry\", \"date\"]\nprint(fruits[1:3]) # Output: ['banana', 'cherry']\nprint(fruits[:2])  # Output: ['apple', 'banana']\nprint(fruits[2:])  # Output: ['cherry', 'date']\n</code></pre>"},{"location":"Learning_resources/Python/List/#modifying-lists","title":"Modifying Lists","text":""},{"location":"Learning_resources/Python/List/#changing-elements","title":"Changing Elements","text":"<pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\nfruits[1] = \"blueberry\"\nprint(fruits) # Output: ['apple', 'blueberry', 'cherry']\n</code></pre>"},{"location":"Learning_resources/Python/List/#adding-elements","title":"Adding Elements","text":"<ul> <li><code>append(item)</code>: Adds an item to the end of the list.</li> <li><code>insert(index, item)</code>: Inserts an item at the specified position.</li> <li><code>extend(iterable)</code>: Extends the list by appending elements from an iterable.</li> </ul> <pre><code>fruits = [\"apple\", \"banana\"]\nfruits.append(\"cherry\")\nprint(fruits) # Output: ['apple', 'banana', 'cherry']\n\nfruits.insert(1, \"blueberry\")\nprint(fruits) # Output: ['apple', 'blueberry', 'banana', 'cherry']\n\nfruits.extend([\"date\", \"elderberry\"])\nprint(fruits) # Output: ['apple', 'blueberry', 'banana', 'cherry', 'date', 'elderberry']\n</code></pre>"},{"location":"Learning_resources/Python/List/#removing-elements","title":"Removing Elements","text":"<ul> <li><code>remove(item)</code>: Removes the first occurrence of the specified item.</li> <li><code>pop(index)</code>: Removes and returns the item at the specified index (default is the last item).</li> <li><code>clear()</code>: Removes all items from the list.</li> </ul> <pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\nfruits.remove(\"banana\")\nprint(fruits) # Output: ['apple', 'cherry']\n\nfruits.pop()\nprint(fruits) # Output: ['apple']\n\nfruits.clear()\nprint(fruits) # Output: []\n</code></pre>"},{"location":"Learning_resources/Python/List/#list-methods-and-functions","title":"List Methods and Functions","text":""},{"location":"Learning_resources/Python/List/#sorting-and-reversing","title":"Sorting and Reversing","text":"<ul> <li><code>sort()</code>: Sorts the list in ascending order (modifies the list in place).</li> <li><code>sorted(iterable)</code>: Returns a new sorted list.</li> <li><code>reverse()</code>: Reverses the order of the list.</li> </ul> <pre><code>numbers = [3, 1, 4, 1, 5]\nnumbers.sort()\nprint(numbers) # Output: [1, 1, 3, 4, 5]\n\nnumbers = [3, 1, 4, 1, 5]\nprint(sorted(numbers)) # Output: [1, 1, 3, 4, 5]\n\nnumbers.reverse()\nprint(numbers) # Output: [5, 4, 3, 1, 1]\n</code></pre>"},{"location":"Learning_resources/Python/List/#other-useful-methods","title":"Other Useful Methods","text":"<ul> <li><code>count(item)</code>: Returns the number of occurrences of an item.</li> <li><code>index(item)</code>: Returns the index of the first occurrence of an item.</li> <li><code>copy()</code>: Creates a shallow copy of the list.</li> </ul> <pre><code>fruits = [\"apple\", \"banana\", \"apple\"]\nprint(fruits.count(\"apple\")) # Output: 2\n\nprint(fruits.index(\"banana\")) # Output: 1\n\nnew_fruits = fruits.copy()\nprint(new_fruits) # Output: ['apple', 'banana', 'apple']\n</code></pre>"},{"location":"Learning_resources/Python/List/#list-comprehension","title":"List Comprehension","text":"<p>List comprehension provides a concise way to create lists. It follows the syntax:</p> <pre><code>[expression for item in iterable if condition]\n</code></pre>"},{"location":"Learning_resources/Python/List/#examples","title":"Examples","text":"<pre><code># Create a list of squares\nsquares = [x**2 for x in range(5)]\nprint(squares) # Output: [0, 1, 4, 9, 16]\n\n# Filter even numbers\nevens = [x for x in range(10) if x % 2 == 0]\nprint(evens) # Output: [0, 2, 4, 6, 8]\n\n# Combine strings with a condition\nwords = [word.upper() for word in [\"hello\", \"world\"] if \"o\" in word]\nprint(words) # Output: ['HELLO', 'WORLD']\n\n# Nested list comprehension\nmatrix = [[row + col for col in range(3)] for row in range(3)]\nprint(matrix) # Output: [[0, 1, 2], [1, 2, 3], [2, 3, 4]]\n</code></pre>"},{"location":"Learning_resources/Python/List/#built-in-functions","title":"Built-in Functions","text":"<p>Python provides several built-in functions to work with lists:</p> <ul> <li><code>len(list)</code>: Returns the number of items.</li> <li><code>max(list)</code>: Returns the largest item.</li> <li><code>min(list)</code>: Returns the smallest item.</li> <li><code>sum(list)</code>: Returns the sum of items (numeric lists only).</li> <li><code>any(list)</code>: Returns <code>True</code> if any item is <code>True</code>.</li> <li><code>all(list)</code>: Returns <code>True</code> if all items are <code>True</code>.</li> </ul> <pre><code>numbers = [1, 2, 3, 4]\nprint(len(numbers)) # Output: 4\nprint(max(numbers)) # Output: 4\nprint(min(numbers)) # Output: 1\nprint(sum(numbers)) # Output: 10\nprint(any(numbers)) # Output: True\nprint(all(numbers)) # Output: True\n</code></pre>"},{"location":"Learning_resources/Python/List/#conclusion","title":"Conclusion","text":"<p>Python lists are a powerful and versatile data structure suitable for a wide range of applications. Understanding their properties, methods, and common usage patterns is essential for effective programming in Python.</p>"},{"location":"Learning_resources/Python/Method/","title":"Methods in Python","text":"<p>In Python, a method is a function that is associated with an object. Methods are defined inside a class and are designed to work on the data contained within that class. They are invoked on objects and can access or modify the object's attributes.</p>"},{"location":"Learning_resources/Python/Method/#types-of-methods-in-python","title":"Types of Methods in Python","text":""},{"location":"Learning_resources/Python/Method/#1-instance-methods","title":"1. Instance Methods","text":"<p>Instance methods are the most common type of methods in Python. They operate on an instance of the class and can access the instance's attributes and other methods.</p>"},{"location":"Learning_resources/Python/Method/#syntax","title":"Syntax:","text":"<pre><code>class ClassName:\n    def instance_method(self, arg1, arg2):\n        # Method body\n</code></pre>"},{"location":"Learning_resources/Python/Method/#example","title":"Example:","text":"<pre><code>class Car:\n    def __init__(self, brand, model):\n        self.brand = brand\n        self.model = model\n\n    def display_info(self):\n        return f\"Car Brand: {self.brand}, Model: {self.model}\"\n\ncar = Car(\"Toyota\", \"Corolla\")\nprint(car.display_info())  # Output: Car Brand: Toyota, Model: Corolla\n</code></pre>"},{"location":"Learning_resources/Python/Method/#2-class-methods","title":"2. Class Methods","text":"<p>Class methods are used to operate on the class itself, rather than an instance. They are defined using the <code>@classmethod</code> decorator and take <code>cls</code> as the first parameter instead of <code>self</code>.</p>"},{"location":"Learning_resources/Python/Method/#syntax_1","title":"Syntax:","text":"<pre><code>class ClassName:\n    @classmethod\n    def class_method(cls, arg1, arg2):\n        # Method body\n</code></pre>"},{"location":"Learning_resources/Python/Method/#example_1","title":"Example:","text":"<pre><code>class Employee:\n    employee_count = 0\n\n    def __init__(self, name):\n        self.name = name\n        Employee.employee_count += 1\n\n    @classmethod\n    def total_employees(cls):\n        return cls.employee_count\n\nemp1 = Employee(\"Alice\")\nemp2 = Employee(\"Bob\")\nprint(Employee.total_employees())  # Output: 2\n</code></pre>"},{"location":"Learning_resources/Python/Method/#3-static-methods","title":"3. Static Methods","text":"<p>Static methods are methods that do not operate on the instance or class directly. They are defined using the <code>@staticmethod</code> decorator and do not take <code>self</code> or <code>cls</code> as parameters.</p>"},{"location":"Learning_resources/Python/Method/#syntax_2","title":"Syntax:","text":"<pre><code>class ClassName:\n    @staticmethod\n    def static_method(arg1, arg2):\n        # Method body\n</code></pre>"},{"location":"Learning_resources/Python/Method/#example_2","title":"Example:","text":"<pre><code>class MathUtils:\n    @staticmethod\n    def add_numbers(a, b):\n        return a + b\n\nprint(MathUtils.add_numbers(5, 10))  # Output: 15\n</code></pre>"},{"location":"Learning_resources/Python/Method/#special-methods","title":"Special Methods","text":"<p>Special methods, also known as dunder (double underscore) methods, allow you to define the behavior of objects in certain situations. These methods start and end with double underscores (<code>__</code>).</p>"},{"location":"Learning_resources/Python/Method/#example-of-special-methods","title":"Example of Special Methods:","text":""},{"location":"Learning_resources/Python/Method/#__init__-constructor-method-to-initialize-an-object","title":"<code>__init__</code>: Constructor method to initialize an object.","text":"<pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nperson = Person(\"John\", 30)\nprint(person.name)  # Output: John\n</code></pre>"},{"location":"Learning_resources/Python/Method/#__str__-method-to-define-the-string-representation-of-an-object","title":"<code>__str__</code>: Method to define the string representation of an object.","text":"<pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __str__(self):\n        return f\"Name: {self.name}, Age: {self.age}\"\n\nperson = Person(\"John\", 30)\nprint(person)  # Output: Name: John, Age: 30\n</code></pre>"},{"location":"Learning_resources/Python/Method/#key-differences-between-method-types","title":"Key Differences Between Method Types","text":"Type Access to Instance Attributes Access to Class Attributes Independent of Instance/Class Instance Method Yes Yes No Class Method No Yes No Static Method No No Yes"},{"location":"Learning_resources/Python/Method/#summary","title":"Summary","text":"<ol> <li>Instance Methods: Operate on object instances and can access instance attributes.</li> <li>Class Methods: Operate on the class and are useful for accessing or modifying class attributes.</li> <li>Static Methods: Do not rely on instance or class data and are primarily utility functions.</li> <li>Special Methods: Enable customization of object behavior in specific scenarios.</li> </ol> <p>These concepts make Python an incredibly flexible and powerful object-oriented language.</p>"},{"location":"Learning_resources/Python/Methods/","title":"Python Methods - Static, Class, and Abstract","text":"<p>Python provides three main types of methods that offer different functionalities and use cases: Static Methods, Class Methods, and Abstract Methods. Understanding these methods is crucial for object-oriented programming and clean code design.</p>"},{"location":"Learning_resources/Python/Methods/#static-method","title":"Static Method","text":"<p>A static method is a method that belongs to a class but does not require access to the class instance (<code>self</code>) or class itself (<code>cls</code>). It is defined using the <code>@staticmethod</code> decorator.</p>"},{"location":"Learning_resources/Python/Methods/#characteristics","title":"Characteristics","text":"<ul> <li>Does not access or modify instance or class-level attributes.</li> <li>Useful for utility or helper functions related to the class.</li> </ul>"},{"location":"Learning_resources/Python/Methods/#syntax","title":"Syntax","text":"<pre><code>class MyClass:\n    @staticmethod\n    def static_method(arg1, arg2):\n        # Method logic\n        return arg1 + arg2\n</code></pre>"},{"location":"Learning_resources/Python/Methods/#example","title":"Example","text":"<pre><code>class Calculator:\n    @staticmethod\n    def add(a, b):\n        return a + b\n\n    @staticmethod\n    def subtract(a, b):\n        return a - b\n\n# Using static methods\nprint(Calculator.add(5, 3))       # Output: 8\nprint(Calculator.subtract(10, 4)) # Output: 6\n</code></pre>"},{"location":"Learning_resources/Python/Methods/#class-method","title":"Class Method","text":"<p>A class method is a method that operates on the class level rather than the instance level. It is defined using the <code>@classmethod</code> decorator and takes <code>cls</code> (class itself) as its first parameter.</p>"},{"location":"Learning_resources/Python/Methods/#characteristics_1","title":"Characteristics","text":"<ul> <li>Can modify class-level attributes.</li> <li>Often used as factory methods to create instances.</li> </ul>"},{"location":"Learning_resources/Python/Methods/#syntax_1","title":"Syntax","text":"<pre><code>class MyClass:\n    @classmethod\n    def class_method(cls, arg1):\n        # Method logic\n        return cls(arg1)\n</code></pre>"},{"location":"Learning_resources/Python/Methods/#example_1","title":"Example","text":"<pre><code>class Employee:\n    company = \"TechCorp\"\n\n    def __init__(self, name):\n        self.name = name\n\n    @classmethod\n    def change_company(cls, new_company):\n        cls.company = new_company\n\n# Using class methods\nprint(Employee.company)  # Output: TechCorp\nEmployee.change_company(\"InnovateInc\")\nprint(Employee.company)  # Output: InnovateInc\n</code></pre>"},{"location":"Learning_resources/Python/Methods/#abstract-method","title":"Abstract Method","text":"<p>An abstract method is a method that is declared but not implemented. It serves as a blueprint for derived classes. Abstract methods are defined in abstract base classes (ABCs), which require subclasses to implement the abstract methods.</p>"},{"location":"Learning_resources/Python/Methods/#characteristics_2","title":"Characteristics","text":"<ul> <li>Defined using the <code>@abstractmethod</code> decorator from the <code>abc</code> module.</li> <li>Enforces implementation in subclasses.</li> <li>Abstract classes cannot be instantiated directly.</li> </ul>"},{"location":"Learning_resources/Python/Methods/#syntax_2","title":"Syntax","text":"<pre><code>from abc import ABC, abstractmethod\n\nclass MyAbstractClass(ABC):\n    @abstractmethod\n    def abstract_method(self):\n        pass\n</code></pre>"},{"location":"Learning_resources/Python/Methods/#example_2","title":"Example","text":"<pre><code>from abc import ABC, abstractmethod\n\nclass Animal(ABC):\n    @abstractmethod\n    def make_sound(self):\n        pass\n\nclass Dog(Animal):\n    def make_sound(self):\n        return \"Woof!\"\n\nclass Cat(Animal):\n    def make_sound(self):\n        return \"Meow!\"\n\n# Instantiating subclasses\ndog = Dog()\ncat = Cat()\nprint(dog.make_sound())  # Output: Woof!\nprint(cat.make_sound())  # Output: Meow!\n</code></pre>"},{"location":"Learning_resources/Python/Methods/#comparison-table","title":"Comparison Table","text":"Feature Static Method Class Method Abstract Method Decorator <code>@staticmethod</code> <code>@classmethod</code> <code>@abstractmethod</code> First Argument None <code>cls</code> Must be overridden by subclass Access Class Data No Yes Depends on subclass Access Instance Data No No Depends on subclass Use Case Utility functions Factory methods, class-wide settings Enforce subclass behavior"},{"location":"Learning_resources/Python/Methods/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Static Methods: Independent of instance and class. Great for utility functions.</li> <li>Class Methods: Operate at the class level. Often used for class-level changes or factory methods.</li> <li>Abstract Methods: Define a contract for subclasses, ensuring consistent implementation.</li> </ul> <p>Understanding these methods helps you write clean, maintainable, and modular code. They each serve unique purposes and should be used appropriately in different scenarios.</p>"},{"location":"Learning_resources/Python/OOPs/","title":"Object-Oriented Programming (OOPs) Concepts","text":"<p>Object-Oriented Programming (OOP) is a programming paradigm based on the concept of \"objects,\" which can contain data in the form of fields (often called attributes) and code in the form of methods. OOP aims to implement real-world entities like inheritance, polymorphism, abstraction, and encapsulation in programming.</p> <p>This document provides a detailed explanation of OOP concepts with Python examples.</p>"},{"location":"Learning_resources/Python/OOPs/#core-oop-concepts","title":"Core OOP Concepts","text":""},{"location":"Learning_resources/Python/OOPs/#1-class","title":"1. Class","text":"<p>A class is a blueprint for creating objects. It defines the attributes and methods that the objects created from the class will have.</p>"},{"location":"Learning_resources/Python/OOPs/#syntax","title":"Syntax:","text":"<pre><code>class ClassName:\n    # Class attributes\n    attribute = value\n\n    # Constructor\n    def __init__(self, parameter1, parameter2):\n        self.parameter1 = parameter1\n        self.parameter2 = parameter2\n\n    # Method\n    def method_name(self):\n        return self.parameter1\n</code></pre>"},{"location":"Learning_resources/Python/OOPs/#example","title":"Example:","text":"<pre><code>class Car:\n    def __init__(self, brand, model):\n        self.brand = brand\n        self.model = model\n\n    def display_info(self):\n        return f\"Car Brand: {self.brand}, Model: {self.model}\"\n\ncar1 = Car(\"Toyota\", \"Corolla\")\nprint(car1.display_info())\n</code></pre>"},{"location":"Learning_resources/Python/OOPs/#2-object","title":"2. Object","text":"<p>An object is an instance of a class. Objects are created using the class blueprint and have attributes and methods defined by the class.</p>"},{"location":"Learning_resources/Python/OOPs/#example_1","title":"Example:","text":"<pre><code># Using the Car class\ncar2 = Car(\"Honda\", \"Civic\")\nprint(car2.display_info())\n</code></pre>"},{"location":"Learning_resources/Python/OOPs/#3-encapsulation","title":"3. Encapsulation","text":"<p>Encapsulation is the mechanism of wrapping the data (attributes) and methods together. It restricts direct access to some of an object's components, which is achieved using access modifiers.</p>"},{"location":"Learning_resources/Python/OOPs/#syntax_1","title":"Syntax:","text":"<pre><code>class ClassName:\n    def __init__(self):\n        self.public_attribute = \"Public\"\n        self._protected_attribute = \"Protected\"\n        self.__private_attribute = \"Private\"\n\n    def get_private_attribute(self):\n        return self.__private_attribute\n</code></pre>"},{"location":"Learning_resources/Python/OOPs/#example_2","title":"Example:","text":"<pre><code>class BankAccount:\n    def __init__(self, balance):\n        self.__balance = balance  # Private attribute\n\n    def deposit(self, amount):\n        self.__balance += amount\n\n    def get_balance(self):\n        return self.__balance\n\naccount = BankAccount(1000)\naccount.deposit(500)\nprint(account.get_balance())  # Output: 1500\n</code></pre>"},{"location":"Learning_resources/Python/OOPs/#4-inheritance","title":"4. Inheritance","text":"<p>Inheritance is the process by which one class (child class) can inherit attributes and methods from another class (parent class).</p>"},{"location":"Learning_resources/Python/OOPs/#syntax_2","title":"Syntax:","text":"<pre><code>class ParentClass:\n    # Parent class attributes and methods\n\nclass ChildClass(ParentClass):\n    # Additional attributes and methods for the child class\n</code></pre>"},{"location":"Learning_resources/Python/OOPs/#example_3","title":"Example:","text":"<pre><code>class Animal:\n    def speak(self):\n        return \"I am an animal\"\n\nclass Dog(Animal):\n    def speak(self):\n        return \"Woof!\"\n\ndog = Dog()\nprint(dog.speak())  # Output: Woof!\n</code></pre>"},{"location":"Learning_resources/Python/OOPs/#5-polymorphism","title":"5. Polymorphism","text":"<p>Polymorphism allows objects of different classes to be treated as objects of a common parent class. It is often implemented using method overriding or method overloading.</p>"},{"location":"Learning_resources/Python/OOPs/#example_4","title":"Example:","text":"<pre><code>class Bird:\n    def sound(self):\n        return \"Chirp\"\n\nclass Cat:\n    def sound(self):\n        return \"Meow\"\n\ndef make_sound(animal):\n    print(animal.sound())\n\nmake_sound(Bird())  # Output: Chirp\nmake_sound(Cat())   # Output: Meow\n</code></pre>"},{"location":"Learning_resources/Python/OOPs/#6-abstraction","title":"6. Abstraction","text":"<p>Abstraction is the process of hiding implementation details and showing only essential features. It can be implemented using abstract base classes in Python.</p>"},{"location":"Learning_resources/Python/OOPs/#syntax_3","title":"Syntax:","text":"<pre><code>from abc import ABC, abstractmethod\n\nclass AbstractClass(ABC):\n    @abstractmethod\n    def abstract_method(self):\n        pass\n</code></pre>"},{"location":"Learning_resources/Python/OOPs/#example_5","title":"Example:","text":"<pre><code>from abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def area(self):\n        return self.width * self.height\n\nrect = Rectangle(10, 5)\nprint(rect.area())  # Output: 50\n</code></pre>"},{"location":"Learning_resources/Python/OOPs/#key-benefits-of-oop","title":"Key Benefits of OOP","text":"<ol> <li>Reusability: Classes and objects can be reused in multiple programs.</li> <li>Scalability: OOP concepts make large-scale projects easier to manage.</li> <li>Encapsulation: Ensures security by hiding sensitive data.</li> <li>Flexibility: Polymorphism and inheritance provide flexibility in programming.</li> </ol> <p>This concludes an overview of the essential OOP concepts in Python. Use these examples to strengthen your understanding and build robust, maintainable programs!</p>"},{"location":"Learning_resources/Python/Objects/","title":"Object in Python","text":"<p>In Python, objects are the core building blocks of object-oriented programming (OOP). An object is an instance of a class, encapsulating both data (attributes) and behavior (methods). Everything in Python, including integers, strings, lists, and functions, is an object.</p> <p>This document provides a detailed explanation of objects in Python with examples and syntax.</p>"},{"location":"Learning_resources/Python/Objects/#key-features-of-objects","title":"Key Features of Objects","text":"<ol> <li>Encapsulation: Objects encapsulate data and functions into a single entity.</li> <li>Reusability: Objects allow the reuse of code via classes.</li> <li>Dynamic Nature: Python objects are dynamic, meaning attributes and methods can be added or modified at runtime.</li> </ol>"},{"location":"Learning_resources/Python/Objects/#creating-an-object","title":"Creating an Object","text":"<p>Objects are created using a class. A class serves as a blueprint, while the object is the actual instance created from that class.</p>"},{"location":"Learning_resources/Python/Objects/#syntax","title":"Syntax:","text":"<pre><code># Define a class\nclass ClassName:\n    def __init__(self, attribute):\n        self.attribute = attribute\n\n    def method(self):\n        return self.attribute\n\n# Create an object\nobject_name = ClassName(value)\n</code></pre>"},{"location":"Learning_resources/Python/Objects/#example","title":"Example:","text":"<pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name  # Attribute\n        self.age = age\n\n    def greet(self):  # Method\n        return f\"Hello, my name is {self.name} and I am {self.age} years old.\"\n\n# Create an object of the Person class\nperson1 = Person(\"Alice\", 30)\n\n# Access attributes and methods\nprint(person1.name)       # Output: Alice\nprint(person1.greet())    # Output: Hello, my name is Alice and I am 30 years old.\n</code></pre>"},{"location":"Learning_resources/Python/Objects/#accessing-object-attributes-and-methods","title":"Accessing Object Attributes and Methods","text":""},{"location":"Learning_resources/Python/Objects/#attributes","title":"Attributes","text":"<p>Attributes hold the data of an object. They are accessed using the dot (<code>.</code>) operator.</p>"},{"location":"Learning_resources/Python/Objects/#example_1","title":"Example:","text":"<pre><code># Define a class\nclass Car:\n    def __init__(self, brand, model):\n        self.brand = brand\n        self.model = model\n\n# Create an object\ncar1 = Car(\"Toyota\", \"Corolla\")\n\n# Access attributes\nprint(car1.brand)  # Output: Toyota\nprint(car1.model)  # Output: Corolla\n</code></pre>"},{"location":"Learning_resources/Python/Objects/#methods","title":"Methods","text":"<p>Methods define the behavior of an object. They are functions defined within a class and called using the dot (<code>.</code>) operator.</p>"},{"location":"Learning_resources/Python/Objects/#example_2","title":"Example:","text":"<pre><code>class Calculator:\n    def add(self, a, b):\n        return a + b\n\n    def subtract(self, a, b):\n        return a - b\n\n# Create an object\ncalc = Calculator()\n\n# Call methods\nprint(calc.add(10, 5))        # Output: 15\nprint(calc.subtract(10, 5))  # Output: 5\n</code></pre>"},{"location":"Learning_resources/Python/Objects/#modifying-object-attributes","title":"Modifying Object Attributes","text":"<p>Attributes of an object can be modified directly after the object is created.</p>"},{"location":"Learning_resources/Python/Objects/#example_3","title":"Example:","text":"<pre><code>class Student:\n    def __init__(self, name, grade):\n        self.name = name\n        self.grade = grade\n\n# Create an object\nstudent1 = Student(\"Bob\", \"A\")\nprint(student1.grade)  # Output: A\n\n# Modify the attribute\nstudent1.grade = \"B\"\nprint(student1.grade)  # Output: B\n</code></pre>"},{"location":"Learning_resources/Python/Objects/#deleting-object-attributes","title":"Deleting Object Attributes","text":"<p>Attributes can be deleted using the <code>del</code> keyword.</p>"},{"location":"Learning_resources/Python/Objects/#example_4","title":"Example:","text":"<pre><code>class Employee:\n    def __init__(self, name, position):\n        self.name = name\n        self.position = position\n\n# Create an object\nemployee1 = Employee(\"John\", \"Manager\")\n\n# Delete an attribute\ndel employee1.position\nprint(employee1.name)  # Output: John\n# print(employee1.position)  # Raises AttributeError\n</code></pre>"},{"location":"Learning_resources/Python/Objects/#dynamic-nature-of-python-objects","title":"Dynamic Nature of Python Objects","text":"<p>In Python, you can dynamically add new attributes or methods to an object.</p>"},{"location":"Learning_resources/Python/Objects/#example_5","title":"Example:","text":"<pre><code>class Animal:\n    def __init__(self, species):\n        self.species = species\n\n# Create an object\nanimal1 = Animal(\"Dog\")\n\n# Dynamically add an attribute\nanimal1.color = \"Brown\"\nprint(animal1.color)  # Output: Brown\n\n# Dynamically add a method\ndef bark():\n    return \"Woof!\"\n\nanimal1.bark = bark\nprint(animal1.bark())  # Output: Woof!\n</code></pre>"},{"location":"Learning_resources/Python/Objects/#special-object-methods","title":"Special Object Methods","text":"<p>Python provides special methods (also called dunder methods) that allow objects to integrate seamlessly with built-in Python functions.</p>"},{"location":"Learning_resources/Python/Objects/#example_6","title":"Example:","text":"<pre><code>class Book:\n    def __init__(self, title, author):\n        self.title = title\n        self.author = author\n\n    def __str__(self):\n        return f\"{self.title} by {self.author}\"\n\n# Create an object\nbook1 = Book(\"1984\", \"George Orwell\")\n\n# Use the special method\nprint(book1)  # Output: 1984 by George Orwell\n</code></pre>"},{"location":"Learning_resources/Python/Objects/#summary","title":"Summary","text":"<ul> <li>An object is an instance of a class that encapsulates data and behavior.</li> <li>Objects are created using the class blueprint.</li> <li>Attributes store data, and methods define the behavior of an object.</li> <li>Python objects are dynamic, allowing modification and extension at runtime.</li> <li>Special methods enable integration with Python's built-in operations.</li> </ul> <p>By understanding and leveraging objects in Python, you can build modular, reusable, and maintainable programs!</p>"},{"location":"Learning_resources/Python/Polymorphism/","title":"Polymorphism in Python","text":"<p>Polymorphism is a fundamental concept in Object-Oriented Programming (OOP). It allows objects of different classes to be treated as objects of a common superclass. The word \"polymorphism\" means \"many forms,\" and it is implemented in Python through method overriding, method overloading, and interfaces.</p> <p>This document provides a detailed explanation of polymorphism in Python with examples and syntax.</p>"},{"location":"Learning_resources/Python/Polymorphism/#types-of-polymorphism-in-python","title":"Types of Polymorphism in Python","text":""},{"location":"Learning_resources/Python/Polymorphism/#1-method-overriding","title":"1. Method Overriding","text":"<p>Method overriding occurs when a subclass provides a specific implementation of a method already defined in its superclass. The subclass's method is called instead of the parent class's method when invoked through the subclass instance.</p>"},{"location":"Learning_resources/Python/Polymorphism/#syntax","title":"Syntax:","text":"<pre><code>class ParentClass:\n    def method_name(self):\n        # Parent method implementation\n\nclass ChildClass(ParentClass):\n    def method_name(self):\n        # Overridden method implementation\n</code></pre>"},{"location":"Learning_resources/Python/Polymorphism/#example","title":"Example:","text":"<p><pre><code>class Animal:\n    def sound(self):\n        return \"Generic animal sound\"\n\nclass Dog(Animal):\n    def sound(self):\n        return \"Woof\"\n\nclass Cat(Animal):\n    def sound(self):\n        return \"Meow\"\n\n# Polymorphic behavior\nanimals = [Dog(), Cat(), Animal()]\nfor animal in animals:\n    print(animal.sound())\n</code></pre> Output: <pre><code>Woof\nMeow\nGeneric animal sound\n</code></pre></p>"},{"location":"Learning_resources/Python/Polymorphism/#2-method-overloading-simulated","title":"2. Method Overloading (Simulated)","text":"<p>Python does not natively support method overloading as other languages do, but similar behavior can be achieved by defining a method that accepts varying numbers of arguments using default parameters or <code>*args</code>.</p>"},{"location":"Learning_resources/Python/Polymorphism/#syntax_1","title":"Syntax:","text":"<pre><code>class ClassName:\n    def method_name(self, *args):\n        # Implementation depending on the arguments\n</code></pre>"},{"location":"Learning_resources/Python/Polymorphism/#example_1","title":"Example:","text":"<pre><code>class Calculator:\n    def add(self, *args):\n        return sum(args)\n\ncalc = Calculator()\nprint(calc.add(1, 2))          # Output: 3\nprint(calc.add(1, 2, 3, 4))   # Output: 10\n</code></pre>"},{"location":"Learning_resources/Python/Polymorphism/#3-polymorphism-with-functions-and-objects","title":"3. Polymorphism with Functions and Objects","text":"<p>Polymorphism allows the same function to operate on different types of objects. This is achieved by writing a function that accepts objects of different classes, as long as those objects implement the required methods.</p>"},{"location":"Learning_resources/Python/Polymorphism/#example_2","title":"Example:","text":"<pre><code>class Bird:\n    def fly(self):\n        return \"Birds can fly\"\n\nclass Penguin:\n    def fly(self):\n        return \"Penguins cannot fly\"\n\ndef flying_ability(bird):\n    print(bird.fly())\n\nsparrow = Bird()\npingu = Penguin()\n\nflying_ability(sparrow)  # Output: Birds can fly\nflying_ability(pingu)    # Output: Penguins cannot fly\n</code></pre>"},{"location":"Learning_resources/Python/Polymorphism/#4-polymorphism-with-abstract-base-classes-abcs","title":"4. Polymorphism with Abstract Base Classes (ABCs)","text":"<p>Abstract base classes in Python can enforce the implementation of methods in derived classes, providing a structured way to implement polymorphism.</p>"},{"location":"Learning_resources/Python/Polymorphism/#syntax_2","title":"Syntax:","text":"<pre><code>from abc import ABC, abstractmethod\n\nclass AbstractClass(ABC):\n    @abstractmethod\n    def abstract_method(self):\n        pass\n\nclass ConcreteClass(AbstractClass):\n    def abstract_method(self):\n        # Implementation\n</code></pre>"},{"location":"Learning_resources/Python/Polymorphism/#example_3","title":"Example:","text":"<p><pre><code>from abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * self.radius * self.radius\n\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def area(self):\n        return self.width * self.height\n\nshapes = [Circle(5), Rectangle(4, 6)]\nfor shape in shapes:\n    print(f\"Area: {shape.area()}\")\n</code></pre> Output: <pre><code>Area: 78.5\nArea: 24\n</code></pre></p>"},{"location":"Learning_resources/Python/Polymorphism/#benefits-of-polymorphism","title":"Benefits of Polymorphism","text":"<ol> <li>Flexibility: A single interface can work with different data types or objects.</li> <li>Code Reusability: Reduces duplication by allowing methods to work with objects of different classes.</li> <li>Scalability: Makes programs easier to extend as new object types can be added with minimal changes to existing code.</li> </ol> <p>Polymorphism is a powerful concept that makes object-oriented programming in Python both flexible and maintainable. By using method overriding, simulated method overloading, or abstract base classes, developers can build robust applications that are easy to scale and maintain.</p>"},{"location":"Learning_resources/Python/Python_Basics/","title":"Python Basics","text":""},{"location":"Learning_resources/Python/Python_Basics/#python-basics-variables-datatypes-keywords-and-literals","title":"Python Basics: Variables, Datatypes, Keywords, and Literals","text":"<p>This guide provides a beginner-friendly introduction to variables, datatypes, keywords, and literals in Python, with examples and explanations. 1. Variables Definition</p> <p>Variables are containers for storing data values. In Python, you don\u2019t need to declare a variable type explicitly. The type is inferred when you assign a value.</p> <p>Syntax:</p> <p>variable_name = value</p> <p>Rules</p> <pre><code>Must start with a letter or an underscore _.\nCannot start with a number.\nCan contain letters, numbers, and underscores.\nCase-sensitive (name and Name are different).\n</code></pre> <p>Example: <pre><code># Assigning values to variables\nx = 10           # Integer\nname = \"Alice\"   # String\n_pi = 3.14       # Float\nis_valid = True  # Boolean\n\n# Printing variables\nprint(x, name, _pi, is_valid)\n</code></pre> <p>10 Alice 3.14 True</p> 2. Datatypes Definition</p> <p>Datatypes define the type of data a variable can hold.</p> <p>Common Datatypes</p> Datatype Description Example <code>int</code> Integer numbers <code>x = 5</code> <code>float</code> Decimal numbers <code>y = 3.14</code> <code>str</code> Text or string data <code>name = \"Python\"</code> <code>bool</code> True/False values <code>is_valid = True</code> <code>list</code> Ordered collection of items <code>nums = [1, 2, 3]</code> <code>tuple</code> Immutable ordered collection <code>coords = (10, 20)</code> <code>dict</code> Key-value pairs <code>person = {\"name\": \"Alice\", \"age\": 25}</code> <code>set</code> Unordered collection of unique items <code>unique_nums = {1, 2, 3}</code> <p>Examples <pre><code>#### Integer\nage = 25\nprint(type(age))  # Output: &lt;class 'int'&gt;\n\n#### Float\nprice = 19.99\nprint(type(price))  # Output: &lt;class 'float'&gt;\n\n#### String\ngreeting = \"Hello, World!\"\nprint(type(greeting))  # Output: &lt;class 'str'&gt;\n\n#### List\ncolors = [\"red\", \"green\", \"blue\"]\nprint(type(colors))  # Output: &lt;class 'list'&gt;\n\n#### Dictionary\nperson = {\"name\": \"Alice\", \"age\": 30}\nprint(type(person))  # Output: &lt;class 'dict'&gt;\n</code></pre></p> <p>3. Keywords</p> <p>Definition Keywords are reserved words in Python. They have a special meaning and cannot be used as variable names.</p> <p>Examples of Keywords</p> <p>and, or, not, if, else, while, for, import, def, class, True, False, None, return, etc. Usage <pre><code>#### Using keywords\nif True:\n    print(\"This is a keyword example.\")\n\nCheck All Keywords\n\nimport keyword\nprint(keyword.kwlist)\n</code></pre></p> <p>4. Literals Definition</p> <p>Literals are fixed values assigned to variables or used directly in expressions.</p> <p>Types of Literals</p> Literal Type Description Example Numeric Integer, Float, Complex <code>10, 3.14, 2 + 3j</code> String Text data <code>\"Hello\", 'Python'</code> Boolean Logical True/False Values <code>True, False</code> Special Represents absence of value <code>None</code> <p>Examples <pre><code>#### Numeric Literals\nint_literal = 100\nfloat_literal = 20.5\ncomplex_literal = 3 + 4j\n\n#### String Literals\nsingle_quote = 'Hello'\ndouble_quote = \"World\"\n\n#### Boolean Literals\nis_active = True\n\n#### Special Literal\nempty_value = None\n\nprint(int_literal, float_literal, complex_literal, single_quote, double_quote, is_active, empty_value)\n</code></pre> Output: <p>100 20.5 (3+4j) Hello World True None</p></p> <p>5. Python is Dynamically Typed</p> <p>Python doesn\u2019t require you to specify the type of a variable. The type is determined automatically based on the value assigned. Example <pre><code>x = 10         # x is an integer\nx = \"Python\"   # Now x is a string\nprint(x)       # Output: Python\n</code></pre> 6. Example Program <pre><code># Define variables\nname = \"Alice\"\nage = 30\nis_student = False\ngrades = [85, 90, 92]\n\n# Display information\nprint(f\"Name: {name}\\n\")\nprint(f\"Age: {age}\\n\")\nprint(f\"Is Student: {is_student}\\n\")\nprint(f\"Grades: {grades}\")\n</code></pre> Output: <p>Name: Alice</p> <p>Age: 30</p> <p>Is Student: False</p> <p>Grades: [85, 90, 92]</p></p> <p>Quick Tips</p> <pre><code>Use meaningful variable names (e.g., price, age, username).\nUse type() to check the datatype of a variable.\nUse comments (#) to explain your code.\n</code></pre> <p>This guide provides the foundation for understanding Python's core concepts. Keep practicing, and soon you'll master them! \ud83d\ude0a</p>"},{"location":"Learning_resources/Python/Python_Syntax/","title":"Python Syntax","text":""},{"location":"Learning_resources/Python/Python_Syntax/#first-python-program","title":"First Python Program","text":"<p><pre><code>print(\"Hello World!\")\n</code></pre> Output: <p>Hello World!</p></p>"},{"location":"Learning_resources/Python/Python_Syntax/#basic-syntax-of-python","title":"Basic Syntax of Python","text":"<p>Definition: Python syntax refers to the set of rules that defines how Python code is written and interpreted. Python is designed to be simple, clear, and easy to read. Unlike some programming languages, Python emphasizes readability and uses whitespace to structure code.</p> <p>Key Features of Python Syntax:</p> <ol> <li>No need for semicolons: Statements end with a newline by default, though semicolons can be used to separate multiple statements on a single line.</li> <li>Case-sensitive: Python differentiates between uppercase and lowercase letters (e.g., Variable and variable are distinct).</li> <li>Indentation: Used to define blocks of code, such as in loops, conditionals, or functions (explained further below).</li> <li>Comments: Start with # for single-line comments and triple quotes (''' or \"\"\") for multi-line comments.  </li> </ol>"},{"location":"Learning_resources/Python/Python_Syntax/#example-of-python-syntax","title":"Example of Python Syntax","text":"<pre><code># Assign values to variables\nx = 10  \ny = 20\n\n# Conditional statement\nif x &lt; y:\n    print(\"x is less than y\")\nelse:\n    print(\"x is not less than y\")\n</code></pre>"},{"location":"Learning_resources/Python/Python_Syntax/#comments-in-python","title":"Comments in Python","text":"<p>Definition: A comment is a line of text in Python code that is not executed by the interpreter. Comments are used to explain the code, make it more readable, or temporarily disable certain parts of the code.</p> <p>Python provides two types of comments:</p> <ol> <li>Single-line comments</li> <li>Multi-line comments</li> </ol> <p>Single-line Comments</p> <p>Single-line comments start with a # symbol. Any text after the # on the same line is treated as a comment and is ignored by the Python interpreter. Example: <pre><code># This is a single-line comment\nx = 10  # This is an inline comment\nprint(x)  # Printing the value of x\n</code></pre> Explanation:</p> <pre><code>The # symbol makes the text after it a comment.\nIn this example:\n    The first line explains the purpose of the code.\n    The inline comments next to x = 10 and print(x) provide additional context.\n</code></pre> <p>Multi-line Comments</p> <p>Python does not have a specific multi-line comment syntax like other languages. However, multi-line comments are usually implemented using a block of strings enclosed in triple quotes (''' or \"\"\"). While not technically comments, such strings are ignored by the interpreter if they are not assigned to a variable or used as a docstring. Example: <pre><code>'''\nThis is a multi-line comment.\nIt can span multiple lines\nand is useful for providing detailed explanations.\n'''\n\nx = 10\ny = 20\n\n\"\"\"\nThis part of the code adds two numbers.\nYou can use triple double-quotes as well for multi-line comments.\n\"\"\"\n\nresult = x + y\nprint(result)  # Printing the sum\n</code></pre> Explanation:</p> <pre><code>The triple quotes allow you to write a block of text, making it useful for longer explanations or documentation.\n</code></pre> <p>Practical Use <pre><code># Define a function to add two numbers\n\ndef add_numbers(a, b):\n    \"\"\"\n    This function takes two arguments, 'a' and 'b'.\n    It returns the sum of these numbers.\n    \"\"\"\n    return a + b\n\n# Call the function\nsum_result = add_numbers(5, 7)\nprint(sum_result)  # Outputs: 12\n</code></pre> Explanation:</p> <pre><code>The single-line comment explains the function definition.\nThe multi-line comment (docstring) describes what the function does.\n</code></pre>"},{"location":"Learning_resources/Python/Python_Syntax/#python-indentation","title":"Python Indentation","text":"<p>Definition: Indentation refers to the spaces at the beginning of a code line. Unlike many other programming languages that use braces {} to define code blocks, Python uses indentation to group statements and define the structure of the program. Consistent indentation is mandatory in Python, as improper indentation will lead to a syntax error. Rules for Indentation:</p> <ol> <li>Indentation must be consistent within the same block.</li> <li>The default indentation level is typically 4 spaces (though tabs or other levels are allowed if used consistently). Indentation is required for:<ul> <li>Loops (for, while)</li> <li>Conditionals (if, else, elif)</li> <li>Function definitions</li> <li>Class definitions</li> </ul> </li> </ol> <p>Example of Indentation <pre><code># Function with proper indentation\ndef greet(name):\n    # This line is indented\n    print(f\"Hello, {name}!\")\n\n# Using the function\ngreet(\"Alice\")\n\n# Conditional statement with indentation\nage = 18\nif age &gt;= 18:\n    print(\"You are eligible to vote.\")\nelse:\n    print(\"You are not eligible to vote.\")\n</code></pre> Incorrect Indentation Example <pre><code>def greet(name):\nprint(f\"Hello, {name}!\")  # IndentationError: expected an indented block\n</code></pre> Output: <pre><code>Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/markdown_exec/formatters/python.py\", line 71, in _run_python\n    exec_python(code, code_block_id, exec_globals)\n  File \"/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/markdown_exec/formatters/_exec_python.py\", line 7, in exec_python\n    compiled = compile(code, filename=filename, mode=\"exec\")\n  File \"&lt;code block: n9&gt;\", line 2\n    print(f\"Hello, {name}!\")  # IndentationError: expected an indented block\n    ^^^^^\nIndentationError: expected an indented block after function definition on line 1\n</code></pre></p>"},{"location":"Learning_resources/Python/Sets/","title":"Python Sets - A Comprehensive Guide","text":""},{"location":"Learning_resources/Python/Sets/#overview","title":"Overview","text":"<p>A set in Python is an unordered collection of unique items. It is a powerful data structure for scenarios where uniqueness of elements is required, such as removing duplicates or performing mathematical set operations like union, intersection, and difference.</p>"},{"location":"Learning_resources/Python/Sets/#key-characteristics","title":"Key Characteristics","text":"<ul> <li>Unordered: Elements have no specific order, and indexing is not supported.</li> <li>Unique Items: No duplicate elements are allowed.</li> <li>Mutable: Elements can be added or removed, but the set itself is mutable.</li> <li>Heterogeneous: Sets can store elements of different data types (e.g., integers, strings, tuples).</li> </ul>"},{"location":"Learning_resources/Python/Sets/#creating-sets","title":"Creating Sets","text":"<p>Sets can be created using curly braces <code>{}</code> or the <code>set()</code> constructor.</p>"},{"location":"Learning_resources/Python/Sets/#syntax","title":"Syntax","text":"<pre><code># Using curly braces\nmy_set = {1, 2, 3}\n\n# Using the set() constructor\nempty_set = set()  # Note: {} creates an empty dictionary, not a set\nstring_set = set(\"hello\")\n</code></pre>"},{"location":"Learning_resources/Python/Sets/#examples","title":"Examples","text":"<pre><code># Creating a set\nfruits = {\"apple\", \"banana\", \"cherry\"}\nprint(fruits)  # Output: {'apple', 'banana', 'cherry'}\n\n# Set from a list (removes duplicates)\nnumbers = set([1, 2, 2, 3, 4])\nprint(numbers)  # Output: {1, 2, 3, 4}\n</code></pre>"},{"location":"Learning_resources/Python/Sets/#accessing-elements-in-a-set","title":"Accessing Elements in a Set","text":"<p>Since sets are unordered, elements cannot be accessed by index. However, you can iterate over a set using a <code>for</code> loop.</p> <pre><code>fruits = {\"apple\", \"banana\", \"cherry\"}\nfor fruit in fruits:\n    print(fruit)\n</code></pre>"},{"location":"Learning_resources/Python/Sets/#modifying-sets","title":"Modifying Sets","text":""},{"location":"Learning_resources/Python/Sets/#adding-elements","title":"Adding Elements","text":"<ul> <li><code>add(item)</code>: Adds a single element to the set.</li> <li><code>update(iterable)</code>: Adds multiple elements from an iterable to the set.</li> </ul> <pre><code>fruits = {\"apple\", \"banana\"}\nfruits.add(\"cherry\")\nprint(fruits)  # Output: {'apple', 'banana', 'cherry'}\n\nfruits.update([\"date\", \"elderberry\"])\nprint(fruits)  # Output: {'apple', 'banana', 'cherry', 'date', 'elderberry'}\n</code></pre>"},{"location":"Learning_resources/Python/Sets/#removing-elements","title":"Removing Elements","text":"<ul> <li><code>remove(item)</code>: Removes the specified item; raises <code>KeyError</code> if the item does not exist.</li> <li><code>discard(item)</code>: Removes the specified item; does nothing if the item does not exist.</li> <li><code>pop()</code>: Removes and returns an arbitrary element.</li> <li><code>clear()</code>: Removes all elements from the set.</li> </ul> <pre><code>fruits = {\"apple\", \"banana\", \"cherry\"}\nfruits.remove(\"banana\")\nprint(fruits)  # Output: {'apple', 'cherry'}\n\nfruits.discard(\"pear\")  # No error if 'pear' does not exist\nfruits.pop()\nprint(fruits)  # Output: {'cherry'} (arbitrary element removed)\n\nfruits.clear()\nprint(fruits)  # Output: set()\n</code></pre>"},{"location":"Learning_resources/Python/Sets/#set-operations","title":"Set Operations","text":""},{"location":"Learning_resources/Python/Sets/#union","title":"Union","text":"<p>Combines elements from both sets (no duplicates).</p> <pre><code>set1 = {1, 2, 3}\nset2 = {3, 4, 5}\nunion_set = set1.union(set2)\nprint(union_set)  # Output: {1, 2, 3, 4, 5}\n</code></pre>"},{"location":"Learning_resources/Python/Sets/#intersection","title":"Intersection","text":"<p>Finds elements common to both sets.</p> <pre><code>intersection_set = set1.intersection(set2)\nprint(intersection_set)  # Output: {3}\n</code></pre>"},{"location":"Learning_resources/Python/Sets/#difference","title":"Difference","text":"<p>Finds elements in the first set but not in the second.</p> <pre><code>difference_set = set1.difference(set2)\nprint(difference_set)  # Output: {1, 2}\n</code></pre>"},{"location":"Learning_resources/Python/Sets/#symmetric-difference","title":"Symmetric Difference","text":"<p>Finds elements in either set, but not in both.</p> <pre><code>symmetric_difference_set = set1.symmetric_difference(set2)\nprint(symmetric_difference_set)  # Output: {1, 2, 4, 5}\n</code></pre>"},{"location":"Learning_resources/Python/Sets/#built-in-functions-and-methods","title":"Built-in Functions and Methods","text":"<ul> <li><code>len(set)</code>: Returns the number of elements in the set.</li> <li><code>in</code>: Checks if an element exists in the set.</li> <li><code>isdisjoint(other_set)</code>: Returns <code>True</code> if two sets have no common elements.</li> <li><code>issubset(other_set)</code>: Checks if the set is a subset of another.</li> <li><code>issuperset(other_set)</code>: Checks if the set is a superset of another.</li> </ul> <pre><code>set1 = {1, 2, 3}\nset2 = {2, 3}\n\nprint(len(set1))  # Output: 3\nprint(2 in set1)  # Output: True\nprint(set1.isdisjoint({4, 5}))  # Output: True\nprint(set2.issubset(set1))  # Output: True\nprint(set1.issuperset(set2))  # Output: True\n</code></pre>"},{"location":"Learning_resources/Python/Sets/#tuples-vs-lists-vs-sets","title":"Tuples vs Lists vs Sets","text":"Feature Tuple List Set Order Ordered Ordered Unordered Mutability Immutable Mutable Mutable (but elements must be immutable) Duplicates Allowed Allowed Not allowed Indexing Supported Supported Not supported Performance Fast (fixed size) Slower (dynamic resizing) Fast (hashing) Usage Fixed collections Dynamic collections Unique elements, set operations"},{"location":"Learning_resources/Python/Sets/#conclusion","title":"Conclusion","text":"<p>Python sets are an efficient and versatile data structure for scenarios requiring unique elements and set operations. Understanding their properties, methods, and use cases is essential for effective Python programming. Combined with tuples and lists, they provide a comprehensive toolkit for working with collections.</p>"},{"location":"Learning_resources/Python/Tuples/","title":"Python Tuple - A Comprehensive Guide","text":""},{"location":"Learning_resources/Python/Tuples/#overview","title":"Overview","text":"<p>A tuple in Python is an immutable, ordered collection of items. Tuples are similar to lists but differ in their immutability, making them useful for storing data that should not be modified.</p>"},{"location":"Learning_resources/Python/Tuples/#key-characteristics","title":"Key Characteristics","text":"<ul> <li>Ordered: Items in a tuple have a defined order.</li> <li>Immutable: Tuples cannot be changed after creation.</li> <li>Heterogeneous: Tuples can store elements of different data types (e.g., integers, strings, objects).</li> <li>Hashable: Tuples can be used as keys in dictionaries if they contain only hashable elements.</li> </ul>"},{"location":"Learning_resources/Python/Tuples/#creating-tuples","title":"Creating Tuples","text":"<p>Tuples can be created using parentheses <code>()</code> or the <code>tuple()</code> constructor.</p>"},{"location":"Learning_resources/Python/Tuples/#syntax","title":"Syntax","text":"<pre><code># Empty tuple\nempty_tuple = ()\n\n# Tuple with elements\ntuple_with_elements = (1, \"apple\", 3.14)\n\n# Single-element tuple (note the comma)\nsingle_element_tuple = (\"single\",)\n\n# Using the tuple() constructor\ntuple_from_iterable = tuple([1, 2, 3])\n</code></pre>"},{"location":"Learning_resources/Python/Tuples/#examples","title":"Examples","text":"<pre><code># Creating tuples\ntuple1 = (1, 2, 3)\ntuple2 = (\"a\", \"b\", \"c\")\n\n# Nested tuples\nnested_tuple = ((1, 2), (3, 4))\n\n# Tuple unpacking\na, b, c = tuple1\nprint(a, b, c)  # Output: 1 2 3\n</code></pre>"},{"location":"Learning_resources/Python/Tuples/#accessing-tuple-elements","title":"Accessing Tuple Elements","text":""},{"location":"Learning_resources/Python/Tuples/#by-index","title":"By Index","text":"<p>Elements in a tuple can be accessed using their index.</p> <pre><code>tuple_example = (\"apple\", \"banana\", \"cherry\")\n\nprint(tuple_example[0])  # Output: apple\nprint(tuple_example[-1]) # Output: cherry\n</code></pre>"},{"location":"Learning_resources/Python/Tuples/#slicing","title":"Slicing","text":"<p>Tuples support slicing to access subsets of elements.</p> <pre><code>tuple_example = (0, 1, 2, 3, 4, 5)\nprint(tuple_example[1:4]) # Output: (1, 2, 3)\nprint(tuple_example[:3])  # Output: (0, 1, 2)\nprint(tuple_example[3:])  # Output: (3, 4, 5)\n</code></pre>"},{"location":"Learning_resources/Python/Tuples/#tuple-methods-and-functions","title":"Tuple Methods and Functions","text":""},{"location":"Learning_resources/Python/Tuples/#tuple-methods","title":"Tuple Methods","text":"<ul> <li><code>count(item)</code>: Returns the number of occurrences of an item in the tuple.</li> <li><code>index(item)</code>: Returns the index of the first occurrence of an item in the tuple.</li> </ul> <pre><code>tuple_example = (1, 2, 3, 2, 1)\n\n# Count occurrences of 2\nprint(tuple_example.count(2))  # Output: 2\n\n# Find index of the first occurrence of 3\nprint(tuple_example.index(3))  # Output: 2\n</code></pre>"},{"location":"Learning_resources/Python/Tuples/#built-in-functions","title":"Built-in Functions","text":"<ul> <li><code>len(tuple)</code>: Returns the number of items in the tuple.</li> <li><code>max(tuple)</code>: Returns the largest item (numeric or lexicographically).</li> <li><code>min(tuple)</code>: Returns the smallest item (numeric or lexicographically).</li> <li><code>sum(tuple)</code>: Returns the sum of items (numeric tuples only).</li> <li><code>any(tuple)</code>: Returns <code>True</code> if any item is <code>True</code>.</li> <li><code>all(tuple)</code>: Returns <code>True</code> if all items are <code>True</code>.</li> </ul>"},{"location":"Learning_resources/Python/Tuples/#tuple_numbers-1-2-3-4-printlentuple_numbers-output-4-printmaxtuple_numbers-output-4-printmintuple_numbers-output-1-printsumtuple_numbers-output-10-printanytuple_numbers-output-true-printalltuple_numbers-output-true","title":"<pre><code>tuple_numbers = (1, 2, 3, 4)\n\nprint(len(tuple_numbers)) # Output: 4\nprint(max(tuple_numbers)) # Output: 4\nprint(min(tuple_numbers)) # Output: 1\nprint(sum(tuple_numbers)) # Output: 10\nprint(any(tuple_numbers)) # Output: True\nprint(all(tuple_numbers)) # Output: True\n</code></pre>","text":""},{"location":"Learning_resources/Python/Tuples/#hashable-examples-with-tuples","title":"Hashable Examples with Tuples","text":"<p>Since tuples are immutable, they are hashable if all their elements are hashable. This property makes tuples suitable as keys in dictionaries or elements in sets.</p>"},{"location":"Learning_resources/Python/Tuples/#examples_1","title":"Examples","text":"<pre><code># Hashable tuple example\ntuple1 = (1, 2, 3)\ndictionary = {tuple1: \"value\"}\nprint(dictionary[tuple1])  # Output: value\n\n# Non-hashable tuple example\ntuple2 = ([1, 2], 3)  # Contains a mutable list\n# dictionary = {tuple2: \"value\"}  # Raises TypeError\n\n# Checking hashability\nprint(hash(tuple1))  # Outputs a hash value\n# print(hash(tuple2))  # Raises TypeError\n</code></pre>"},{"location":"Learning_resources/Python/Tuples/#tuples-vs-lists","title":"Tuples vs Lists","text":"Feature Tuple List Mutability Immutable Mutable Syntax Parentheses <code>()</code> Square brackets <code>[]</code> Performance Faster due to immutability Slower due to mutability Usage Fixed data Dynamic data Methods Limited (<code>count</code>, <code>index</code>) Extensive Hashable Yes (if elements are hashable) No"},{"location":"Learning_resources/Python/Tuples/#why-use-tuples","title":"Why Use Tuples?","text":"<ol> <li>Immutability: Ensures data integrity by preventing accidental modifications.</li> <li>Hashability: Useful as dictionary keys or set elements.</li> <li>Performance: Faster than lists due to immutability.</li> </ol>"},{"location":"Learning_resources/Python/Tuples/#conclusion","title":"Conclusion","text":"<p>Python tuples are a lightweight and efficient data structure ideal for fixed collections of data. Their immutability and hashability make them a unique and valuable tool for specific use cases.</p>"},{"location":"Learning_resources/Python/strings/","title":"Python Strings and Their Relevant Functions","text":"<p>Strings in Python are sequences of characters enclosed within either single quotes (<code>'</code>) or double quotes (<code>\"</code>). They are one of the most commonly used data types and support a variety of operations and methods for manipulation.</p>"},{"location":"Learning_resources/Python/strings/#creating-strings","title":"Creating Strings","text":"<p>You can create strings using single or double quotes:</p> <pre><code># Using single quotes\nstring1 = 'Hello'\n\n# Using double quotes\nstring2 = \"World\"\n\nprint(string1, string2)\n</code></pre> <p>You can also use triple quotes for multiline strings:</p> <pre><code># Multiline string\nstring3 = '''This is a \nmultiline string.'''\nprint(string3)\n</code></pre>"},{"location":"Learning_resources/Python/strings/#string-immutability","title":"String Immutability","text":"<p>Strings in Python are immutable, which means once a string is created, its content cannot be changed. For example:</p> <pre><code>string = \"Python\"\n# Attempting to modify a character in the string will result in an error\n# string[0] = 'J'  # This will raise a TypeError\n</code></pre>"},{"location":"Learning_resources/Python/strings/#common-string-operations","title":"Common String Operations","text":""},{"location":"Learning_resources/Python/strings/#string-concatenation","title":"String Concatenation","text":"<p>Strings can be concatenated using the <code>+</code> operator:</p> <pre><code>string1 = \"Hello\"\nstring2 = \"World\"\nresult = string1 + \" \" + string2\nprint(result)  # Output: Hello World\n</code></pre>"},{"location":"Learning_resources/Python/strings/#string-repetition","title":"String Repetition","text":"<p>You can repeat strings using the <code>*</code> operator:</p> <pre><code>string = \"Hello \"\nresult = string * 3\nprint(result)  # Output: Hello Hello Hello \n</code></pre>"},{"location":"Learning_resources/Python/strings/#string-slicing","title":"String Slicing","text":"<p>Strings can be sliced to extract substrings:</p> <pre><code>string = \"Hello, World!\"\nprint(string[0:5])   # Output: Hello\nprint(string[:5])    # Output: Hello\nprint(string[7:])    # Output: World!\nprint(string[-6:])   # Output: World!\n</code></pre>"},{"location":"Learning_resources/Python/strings/#string-length","title":"String Length","text":"<p>Use the <code>len()</code> function to find the length of a string:</p> <pre><code>string = \"Python\"\nprint(len(string))  # Output: 6\n</code></pre>"},{"location":"Learning_resources/Python/strings/#built-in-string-methods","title":"Built-in String Methods","text":""},{"location":"Learning_resources/Python/strings/#strupper-and-strlower","title":"<code>str.upper()</code> and <code>str.lower()</code>","text":"<p>Converts a string to uppercase or lowercase:</p> <pre><code>string = \"Hello World\"\nprint(string.upper())  # Output: HELLO WORLD\nprint(string.lower())  # Output: hello world\n</code></pre>"},{"location":"Learning_resources/Python/strings/#strstrip","title":"<code>str.strip()</code>","text":"<p>Removes leading and trailing whitespace (or specified characters):</p> <pre><code>string = \"   Hello World   \"\nprint(string.strip())  # Output: Hello World\n</code></pre>"},{"location":"Learning_resources/Python/strings/#strsplit","title":"<code>str.split()</code>","text":"<p>Splits a string into a list of substrings based on a delimiter:</p> <pre><code>string = \"apple,banana,cherry\"\nfruits = string.split(\",\")\nprint(fruits)  # Output: ['apple', 'banana', 'cherry']\n</code></pre>"},{"location":"Learning_resources/Python/strings/#strjoin","title":"<code>str.join()</code>","text":"<p>Joins a list of strings into a single string with a specified delimiter:</p> <pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\nresult = \",\".join(fruits)\nprint(result)  # Output: apple,banana,cherry\n</code></pre>"},{"location":"Learning_resources/Python/strings/#strreplace","title":"<code>str.replace()</code>","text":"<p>Replaces occurrences of a substring with another substring:</p> <pre><code>string = \"Hello World\"\nprint(string.replace(\"World\", \"Python\"))  # Output: Hello Python\n</code></pre>"},{"location":"Learning_resources/Python/strings/#strfind","title":"<code>str.find()</code>","text":"<p>Returns the index of the first occurrence of a substring, or <code>-1</code> if not found:</p> <pre><code>string = \"Hello World\"\nprint(string.find(\"World\"))  # Output: 6\nprint(string.find(\"Python\"))  # Output: -1\n</code></pre>"},{"location":"Learning_resources/Python/strings/#strstartswith-and-strendswith","title":"<code>str.startswith()</code> and <code>str.endswith()</code>","text":"<p>Checks if a string starts or ends with a specified substring:</p> <pre><code>string = \"Hello World\"\nprint(string.startswith(\"Hello\"))  # Output: True\nprint(string.endswith(\"World\"))    # Output: True\n</code></pre>"},{"location":"Learning_resources/Python/strings/#strisalpha-strisdigit-and-strisalnum","title":"<code>str.isalpha()</code>, <code>str.isdigit()</code>, and <code>str.isalnum()</code>","text":"<p>Checks if a string contains only alphabetic characters, digits, or alphanumeric characters:</p> <pre><code>string1 = \"Python\"\nstring2 = \"12345\"\nstring3 = \"Python123\"\n\nprint(string1.isalpha())  # Output: True\nprint(string2.isdigit())  # Output: True\nprint(string3.isalnum())  # Output: True\n</code></pre>"},{"location":"Learning_resources/Python/strings/#strcapitalize-and-strtitle","title":"<code>str.capitalize()</code> and <code>str.title()</code>","text":"<ul> <li><code>capitalize()</code>: Capitalizes the first character of the string.</li> <li><code>title()</code>: Capitalizes the first character of each word.</li> </ul> <pre><code>string = \"hello world\"\nprint(string.capitalize())  # Output: Hello world\nprint(string.title())       # Output: Hello World\n</code></pre>"},{"location":"Learning_resources/Python/strings/#string-formatting","title":"String Formatting","text":""},{"location":"Learning_resources/Python/strings/#using-f-strings-python-36","title":"Using <code>f-strings</code> (Python 3.6+)","text":"<pre><code>name = \"Alice\"\nage = 30\nprint(f\"My name is {name} and I am {age} years old.\")\n</code></pre>"},{"location":"Learning_resources/Python/strings/#using-strformat","title":"Using <code>str.format()</code>","text":"<pre><code>name = \"Alice\"\nage = 30\nprint(\"My name is {} and I am {} years old.\".format(name, age))\n</code></pre>"},{"location":"Learning_resources/Python/strings/#using-operator","title":"Using <code>%</code> Operator","text":"<pre><code>name = \"Alice\"\nage = 30\nprint(\"My name is %s and I am %d years old.\" % (name, age))\n</code></pre>"},{"location":"Learning_resources/Python/strings/#summary","title":"Summary","text":"<p>Python strings are versatile and powerful, with many built-in methods and operations to handle text data effectively. By mastering these functions, you can perform a wide range of string manipulations efficiently.</p>"},{"location":"Learning_resources/Time%20Series/Advanced%20Time%20Series%20Concepts/","title":"\ud83d\udcca Advanced Time Series Topics Tutorial","text":""},{"location":"Learning_resources/Time%20Series/Advanced%20Time%20Series%20Concepts/#1-anomaly-detection-in-time-series","title":"1. \ud83d\udd0d Anomaly Detection in Time Series","text":""},{"location":"Learning_resources/Time%20Series/Advanced%20Time%20Series%20Concepts/#definition","title":"\u2705 Definition:","text":"<p>Detect points or periods where the behavior of the series deviates significantly from normal patterns.</p>"},{"location":"Learning_resources/Time%20Series/Advanced%20Time%20Series%20Concepts/#methods","title":"\ud83d\udcd0 Methods:","text":"<ul> <li> <p>Statistical Thresholding:</p> </li> <li> <p>\\(z = \\frac{x - \\mu}{\\sigma}\\)</p> </li> <li> <p>Rolling Statistics:</p> </li> <li> <p>Use rolling mean and standard deviation.</p> </li> <li> <p>Model-based:</p> </li> <li> <p>Train a forecast model \u2192 compare actual vs predicted residuals.</p> </li> <li>Isolation Forest / One-Class SVM / Autoencoders</li> </ul>"},{"location":"Learning_resources/Time%20Series/Advanced%20Time%20Series%20Concepts/#code-example-statistical","title":"\u2705 Code Example (Statistical):","text":"<pre><code>import numpy as np\nthreshold = 3  # Z-score\nz_scores = (df['value'] - df['value'].mean()) / df['value'].std()\nanomalies = df[np.abs(z_scores) &gt; threshold]\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Advanced%20Time%20Series%20Concepts/#code-example-autoencoder-in-pytorch","title":"\u2705 Code Example (Autoencoder in PyTorch):","text":"<p>Let me know if you want the complete deep learning version.</p>"},{"location":"Learning_resources/Time%20Series/Advanced%20Time%20Series%20Concepts/#2-time-series-clustering","title":"2. \ud83d\udc6f Time Series Clustering","text":""},{"location":"Learning_resources/Time%20Series/Advanced%20Time%20Series%20Concepts/#definition_1","title":"\u2705 Definition:","text":"<p>Grouping similar time series based on their shape, pattern, or frequency domain characteristics.</p>"},{"location":"Learning_resources/Time%20Series/Advanced%20Time%20Series%20Concepts/#distance-metrics","title":"\ud83d\udcd0 Distance Metrics:","text":"<ul> <li>Euclidean</li> <li>Dynamic Time Warping (DTW): aligns sequences by warping time.</li> </ul> \\[ DTW(x, y) = \\min \\sum \\text{dist}(x_i, y_j) \\text{ with time alignment} \\]"},{"location":"Learning_resources/Time%20Series/Advanced%20Time%20Series%20Concepts/#code-example-with-tslearn","title":"\u2705 Code Example (with <code>tslearn</code>):","text":"<pre><code>from tslearn.clustering import TimeSeriesKMeans\nmodel = TimeSeriesKMeans(n_clusters=3, metric=\"dtw\")\nlabels = model.fit_predict(series_array)\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Advanced%20Time%20Series%20Concepts/#3-multivariate-time-series","title":"3. \ud83d\udd17 Multivariate Time Series","text":""},{"location":"Learning_resources/Time%20Series/Advanced%20Time%20Series%20Concepts/#definition_2","title":"\u2705 Definition:","text":"<p>Multiple time-dependent variables recorded over the same time period.</p>"},{"location":"Learning_resources/Time%20Series/Advanced%20Time%20Series%20Concepts/#vector-autoregression-var","title":"\ud83d\udcd8 Vector Autoregression (VAR):","text":"\\[ Y_t = A_1 Y_{t-1} + A_2 Y_{t-2} + \\dots + A_p Y_{t-p} + e_t \\]"},{"location":"Learning_resources/Time%20Series/Advanced%20Time%20Series%20Concepts/#code-example","title":"\u2705 Code Example:","text":"<pre><code>from statsmodels.tsa.api import VAR\n\nmodel = VAR(df[['temp', 'humidity']])\nresults = model.fit(maxlags=5)\nforecast = results.forecast(df.values[-5:], steps=10)\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Advanced%20Time%20Series%20Concepts/#4-exogenous-variables","title":"4. \ud83d\udcce Exogenous Variables","text":""},{"location":"Learning_resources/Time%20Series/Advanced%20Time%20Series%20Concepts/#definition_3","title":"\u2705 Definition:","text":"<p>External variables that influence the target time series.</p>"},{"location":"Learning_resources/Time%20Series/Advanced%20Time%20Series%20Concepts/#sarimax-arima-with-exogenous","title":"\ud83d\udd22 SARIMAX (ARIMA with exogenous):","text":"\\[ Y_t = ARIMA(p,d,q) + \\beta X_t + \\epsilon_t \\]"},{"location":"Learning_resources/Time%20Series/Advanced%20Time%20Series%20Concepts/#code-example_1","title":"\u2705 Code Example:","text":"<pre><code>from statsmodels.tsa.statespace.sarimax import SARIMAX\n\nmodel = SARIMAX(df['sales'], exog=df[['promo']], order=(1,1,1), seasonal_order=(1,1,1,12))\nresults = model.fit()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Advanced%20Time%20Series%20Concepts/#var-with-exogenous-variables","title":"\ud83d\udd22 VAR with Exogenous Variables:","text":"<pre><code>model = VAR(df[['temp', 'humidity']])\nresults = model.fit()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Advanced%20Time%20Series%20Concepts/#5-forecasting-with-missing-data","title":"5. \u2753 Forecasting with Missing Data","text":""},{"location":"Learning_resources/Time%20Series/Advanced%20Time%20Series%20Concepts/#strategies","title":"\u2705 Strategies:","text":"<ul> <li>Imputation (mean, median, linear, interpolation)</li> <li>Model-based Imputation (Kalman, EM)</li> <li>Multivariate Filling</li> </ul>"},{"location":"Learning_resources/Time%20Series/Advanced%20Time%20Series%20Concepts/#code-example_2","title":"\u2705 Code Example:","text":"<pre><code>df['value'] = df['value'].interpolate(method='linear')\n</code></pre> <p>For more sophisticated:</p> <pre><code>from fancyimpute import KNN\nfilled = KNN(k=3).fit_transform(df.values)\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Advanced%20Time%20Series%20Concepts/#6-probabilistic-forecasting","title":"6. \ud83d\udcca Probabilistic Forecasting","text":""},{"location":"Learning_resources/Time%20Series/Advanced%20Time%20Series%20Concepts/#definition_4","title":"\u2705 Definition:","text":"<p>Forecasts that give uncertainty estimates (intervals or distributions), not just point estimates.</p>"},{"location":"Learning_resources/Time%20Series/Advanced%20Time%20Series%20Concepts/#techniques","title":"\ud83d\udcd8 Techniques:","text":"<ul> <li>Quantile Regression: predict multiple quantiles</li> <li>Bayesian models: e.g., Pyro, TensorFlow Probability</li> <li>Prophet: gives prediction intervals</li> <li>DeepAR (Amazon): RNN-based probabilistic model</li> </ul>"},{"location":"Learning_resources/Time%20Series/Advanced%20Time%20Series%20Concepts/#quantile-loss","title":"\u2705 Quantile Loss:","text":"\\[ L_q(y, \\hat{y}) = \\max(q(y - \\hat{y}), (q-1)(y - \\hat{y})) \\]"},{"location":"Learning_resources/Time%20Series/Advanced%20Time%20Series%20Concepts/#example-using-prophet","title":"\u2705 Example using Prophet:","text":"<pre><code>from prophet import Prophet\nmodel = Prophet()\nmodel.fit(df.rename(columns={\"value\": \"y\", \"date\": \"ds\"}))\nforecast = model.predict(model.make_future_dataframe(periods=30))\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Anamoly%20Detection/","title":"Anomaly Detection in Time Series","text":""},{"location":"Learning_resources/Time%20Series/Anamoly%20Detection/#concept-overview","title":"\ud83e\udde0 Concept Overview","text":"<p>Anomaly detection involves identifying unexpected or rare patterns in time series data. These may signal:</p> <ul> <li>Faults in a system</li> <li>Outliers in sensor readings</li> <li>Irregular activity (e.g., fraud, system failures)</li> </ul>"},{"location":"Learning_resources/Time%20Series/Anamoly%20Detection/#mathematical-techniques","title":"\ud83d\udcd0 Mathematical Techniques","text":""},{"location":"Learning_resources/Time%20Series/Anamoly%20Detection/#1-z-score-method","title":"1. Z-score Method","text":"<p>Given a series \\(x_t\\), the Z-score is:</p> \\[ z_t = \\frac{x_t - \\mu}{\\sigma} \\] <ul> <li>Where \\(\\mu\\) and \\(\\sigma\\) are the rolling mean and standard deviation.</li> </ul> <p>Anomalies are detected where \\(|z_t| &gt; \\text{threshold}\\).</p>"},{"location":"Learning_resources/Time%20Series/Anamoly%20Detection/#2-moving-average-and-thresholding","title":"2. Moving Average and Thresholding","text":"\\[ \\text{Anomaly if } |x_t - \\text{MA}_t| &gt; k \\cdot \\text{std}_t \\]"},{"location":"Learning_resources/Time%20Series/Anamoly%20Detection/#3-seasonal-hybrid-esd-s-h-esd-and-model-based-techniques-eg-isolation-forest-autoencoders-for-advanced-use","title":"3. Seasonal Hybrid ESD (S-H-ESD) and model-based techniques (e.g., Isolation Forest, Autoencoders) for advanced use.","text":""},{"location":"Learning_resources/Time%20Series/Anamoly%20Detection/#example-z-score-anomaly-detection","title":"\ud83e\uddea Example: Z-score Anomaly Detection","text":"<pre><code>window = 20\ndf['rolling_mean'] = df['Value'].rolling(window).mean()\ndf['rolling_std'] = df['Value'].rolling(window).std()\ndf['z_score'] = (df['Value'] - df['rolling_mean']) / df['rolling_std']\n\n# Mark anomalies\nthreshold = 3\ndf['anomaly'] = df['z_score'].abs() &gt; threshold\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Anamoly%20Detection/#visualize-detected-anomalies","title":"\ud83d\udcca Visualize Detected Anomalies","text":"<pre><code>plt.figure(figsize=(12, 5))\nplt.plot(df.index, df['Value'], label='Time Series')\nplt.scatter(df.index[df['anomaly']], df['Value'][df['anomaly']],\n            color='red', label='Anomalies', zorder=5)\nplt.title(\"Z-score Based Anomaly Detection\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Value\")\nplt.legend()\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Anamoly%20Detection/#sample-data-and-anamoly-detection","title":"Sample Data and Anamoly Detection","text":""},{"location":"Learning_resources/Time%20Series/Anamoly%20Detection/#lets-begin-generating-the-notebook-content-for-anomaly-detection-in-time-series-well-create-a-sample-dataset-and-plot-it-with-anomalies-marked","title":"Let's begin generating the notebook content for \"Anomaly Detection in Time Series\" , We'll create a sample dataset and plot it with anomalies marked","text":"<pre><code>import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Generate a time series with some noise\nnp.random.seed(42)\ndate_range = pd.date_range(start=\"2020-01-01\", periods=200, freq=\"D\")\ndata = 10 + np.sin(np.linspace(0, 20, 200)) + np.random.normal(0, 0.5, 200)\n\n# Inject anomalies\nanomalies = [50, 120, 160]\ndata[anomalies] += np.array([5, -6, 4])\n\n# Create DataFrame\ndf = pd.DataFrame({\"Date\": date_range, \"Value\": data})\ndf.set_index(\"Date\", inplace=True)\n\n# Plot with anomalies marked\nplt.figure(figsize=(12, 5))\nplt.plot(df.index, df[\"Value\"], label=\"Time Series\")\nplt.scatter(df.index[anomalies], df[\"Value\"].iloc[anomalies], color='red', label=\"Anomalies\", zorder=5)\nplt.title(\"Synthetic Time Series with Injected Anomalies\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Value\")\nplt.legend()\nplt.grid(True)\nplt.savefig(\"synthetic_time_series_anomalies.png\")\nplt.tight_layout()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Arima/","title":"ARIMA: AutoRegressive Integrated Moving Average","text":""},{"location":"Learning_resources/Time%20Series/Arima/#_1","title":"=========================================================","text":""},{"location":"Learning_resources/Time%20Series/Arima/#what-is-arima","title":"\ud83d\udccc What is ARIMA?","text":"<p>ARIMA stands for:</p> <ul> <li>AR: AutoRegressive (depends on past values)</li> <li>I: Integrated (uses differencing to make the series stationary)</li> <li>MA: Moving Average (depends on past forecast errors)</li> </ul> <p>ARIMA models are used to forecast non-stationary time series data by first transforming it into a stationary series using differencing and then modeling the transformed data using ARMA.</p>"},{"location":"Learning_resources/Time%20Series/Arima/#when-to-use-arima","title":"\u2705 When to Use ARIMA?","text":"<p>Use ARIMA when:</p> <ul> <li>Your data shows a trend or non-stationarity (checked via ADF/KPSS tests)</li> <li>There's no clear seasonality (for that, use SARIMA)</li> </ul>"},{"location":"Learning_resources/Time%20Series/Arima/#mathematical-breakdown-of-arimap-d-q","title":"\ud83d\udcd0 Mathematical Breakdown of ARIMA(p, d, q)","text":"\\[ \\underbrace{(1 - \\sum_{i=1}^p \\phi_i L^i)}_{\\text{AR(p)}} \\cdot (1 - L)^d y_t = \\underbrace{(1 + \\sum_{j=1}^q \\theta_j L^j)}_{\\text{MA(q)}} \\cdot \\epsilon_t \\] <p>Where:</p> <ul> <li>\\(L\\): Lag operator (e.g., \\(L y_t = y_{t-1}\\))</li> <li>\\(p\\): Number of AR terms</li> <li>\\(d\\): Number of differences</li> <li>\\(q\\): Number of MA terms</li> <li>\\(\\phi_i\\): AR coefficients</li> <li>\\(\\theta_j\\): MA coefficients</li> <li>\\(\\epsilon_t\\): White noise</li> </ul>"},{"location":"Learning_resources/Time%20Series/Arima/#components","title":"\ud83d\udd01 Components","text":"Component Description Python Equivalent <code>p</code> # of past lags (autoregression) <code>AR()</code> <code>d</code> # of times to difference the series to be stationary <code>series.diff(d)</code> <code>q</code> # of past forecast errors (moving average) <code>MA()</code>"},{"location":"Learning_resources/Time%20Series/Arima/#differencing-the-i-in-arima","title":"\ud83d\udcc9 Differencing (The \u201cI\u201d in ARIMA)","text":"<p>Differencing helps remove trends and stabilize the mean.</p>"},{"location":"Learning_resources/Time%20Series/Arima/#1st-order-differencing","title":"1st Order Differencing:","text":"\\[ y'_t = y_t - y_{t-1} \\]"},{"location":"Learning_resources/Time%20Series/Arima/#2nd-order-differencing","title":"2nd Order Differencing:","text":"\\[ y''_t = (y_t - y_{t-1}) - (y_{t-1} - y_{t-2}) \\] <p>You only difference until the series becomes stationary (usually \\(d \\in \\{0, 1, 2\\}\\)).</p>"},{"location":"Learning_resources/Time%20Series/Arima/#full-python-example-arima","title":"\ud83e\uddea Full Python Example: ARIMA","text":"<pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.arima.model import ARIMA\n\n# Load your time series data\ndf = pd.read_csv('air_passengers.csv', index_col='Month', parse_dates=True)\ndf = df.asfreq('MS')\n\n# Visualize original series\ndf['Passengers'].plot(title='Original Time Series')\nplt.show()\n\n# Fit ARIMA(2,1,2): AR(2), 1st diff, MA(2)\nmodel_arima = ARIMA(df['Passengers'], order=(2, 1, 2))\nfitted_model = model_arima.fit()\n\n# Summary of coefficients and diagnostics\nprint(fitted_model.summary())\n\n# Forecast next 12 months\nforecast = fitted_model.forecast(steps=12)\n\n# Plot forecast\nplt.figure(figsize=(10, 5))\nplt.plot(df['Passengers'], label='Original')\nplt.plot(forecast.index, forecast, label='ARIMA Forecast', color='red')\nplt.legend()\nplt.title('ARIMA Forecasting')\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Arima/#model-interpretation","title":"\ud83d\udd0d Model Interpretation","text":"<p>From <code>model.summary()</code> you'll get:</p> <ul> <li>Coefficients of AR and MA terms</li> <li>Standard errors and p-values</li> <li>AIC/BIC: Model selection criteria</li> <li>Residual diagnostics</li> </ul>"},{"location":"Learning_resources/Time%20Series/Arima/#forecast-vs-actual-example","title":"\ud83d\udd0d Forecast vs Actual Example","text":"<p>You can split the data for training and testing and compare actual vs predicted:</p> <pre><code>train = df['Passengers'][:120]\ntest = df['Passengers'][120:]\n\nmodel_arima = ARIMA(train, order=(2, 1, 2)).fit()\npreds = model_arima.forecast(steps=len(test))\n\nplt.figure(figsize=(10, 5))\nplt.plot(train, label='Train')\nplt.plot(test, label='Test')\nplt.plot(preds.index, preds, label='Predicted', linestyle='--')\nplt.legend()\nplt.title('Train/Test Split with ARIMA Forecast')\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Arima/#key-takeaways","title":"\ud83e\udde0 Key Takeaways","text":"<ul> <li>ARIMA models the past values and forecast errors.</li> <li>The <code>d</code> term (differencing) is crucial for removing non-stationarity.</li> <li>Proper preprocessing (e.g., ADF/KPSS tests, differencing) is essential before fitting ARIMA.</li> <li>Always check residuals to ensure the model captures all structure (should be white noise).</li> </ul>"},{"location":"Learning_resources/Time%20Series/Augmented%20Dickey-Fuller%20Test/","title":"\u2705 Augmented Dickey-Fuller (ADF) Test","text":"<p>The ADF Test is a statistical test used to check whether a time series is stationary. It is one of the most commonly used methods in time series analysis.</p>"},{"location":"Learning_resources/Time%20Series/Augmented%20Dickey-Fuller%20Test/#why-is-stationarity-important","title":"\ud83d\udccc Why is Stationarity Important?","text":"<p>Most statistical models like ARIMA, SARIMA, and even seasonal decomposition assume that the mean, variance, and autocorrelation structure of the time series is constant over time (i.e., the series is stationary).</p>"},{"location":"Learning_resources/Time%20Series/Augmented%20Dickey-Fuller%20Test/#what-is-the-adf-test","title":"\ud83d\udcd0 What is the ADF Test?","text":"<p>The Augmented Dickey-Fuller Test tests the null hypothesis:</p> <p>H\u2080: The time series has a unit root (non-stationary)</p> <p>H\u2081: The time series is stationary</p>"},{"location":"Learning_resources/Time%20Series/Augmented%20Dickey-Fuller%20Test/#adf-regression-model","title":"\ud83d\udcca ADF Regression Model:","text":"<p>ADF runs a regression of the following form:</p> \\[ \\Delta y_t = \\alpha + \\beta t + \\gamma y_{t-1} + \\delta_1 \\Delta y_{t-1} + \\cdots + \\delta_p \\Delta y_{t-p} + \\varepsilon_t \\] <p>Where:</p> <ul> <li>\\(\\Delta y_t\\) is the first difference of the series</li> <li>\\(\\gamma\\) is the coefficient tested against zero</li> </ul> <p>If \\(\\gamma &lt; 0\\) and significantly different from zero, the series is stationary.</p>"},{"location":"Learning_resources/Time%20Series/Augmented%20Dickey-Fuller%20Test/#interpreting-adf-test-results","title":"\u2705 Interpreting ADF Test Results","text":"<ul> <li>ADF Statistic: More negative \u2192 more likely to reject H\u2080</li> <li> <p>p-value:</p> </li> <li> <p>If p &lt; 0.05: Reject H\u2080 \u2192 the series is stationary</p> </li> <li>If p &gt; 0.05: Fail to reject H\u2080 \u2192 the series is non-stationary</li> </ul>"},{"location":"Learning_resources/Time%20Series/Augmented%20Dickey-Fuller%20Test/#code-example-run-adf-test","title":"\ud83e\uddea Code Example: Run ADF Test","text":"<pre><code>from statsmodels.tsa.stattools import adfuller\nimport pandas as pd\n\n# Load data\nurl = 'https://raw.githubusercontent.com/jbrownlee/Datasets/master/airline-passengers.csv'\ndf = pd.read_csv(url, parse_dates=['Month'], index_col='Month')\n\n# ADF Test\nadf_result = adfuller(df['Passengers'])\n\n# Output results\nprint(\"ADF Statistic: {:.4f}\".format(adf_result[0]))\nprint(\"p-value: {:.4f}\".format(adf_result[1]))\nprint(\"Critical Values:\")\nfor key, value in adf_result[4].items():\n    print(f\"   {key}: {value:.4f}\")\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Augmented%20Dickey-Fuller%20Test/#if-the-series-is-not-stationary","title":"\u26a0\ufe0f If the Series is Not Stationary","text":"<p>Use differencing or log transformation:</p> <pre><code># First-order differencing\ndf['diff'] = df['Passengers'].diff()\n\n# Drop NA and re-test\nadf_result_diff = adfuller(df['diff'].dropna())\n\nprint(\"\\nAfter Differencing:\")\nprint(\"ADF Statistic:\", adf_result_diff[0])\nprint(\"p-value:\", adf_result_diff[1])\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Augmented%20Dickey-Fuller%20Test/#summary-table","title":"\ud83d\udccc Summary Table","text":"Metric Description ADF Statistic Test statistic for checking stationarity p-value If &lt; 0.05 \u2192 data is stationary Critical Values Thresholds at 1%, 5%, 10% levels Differencing Used to make non-stationary series stationary"},{"location":"Learning_resources/Time%20Series/Augmented%20Dickey-Fuller%20Test/#bonus-tip-visual-check-of-stationarity","title":"\ud83e\udde0 Bonus Tip: Visual Check of Stationarity","text":"<pre><code>import matplotlib.pyplot as plt\n\n# Visual check\ndf['diff'].dropna().plot(title='First Differenced Series')\nplt.grid(True)\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/","title":"\ud83d\udcd8 Classical Time Series Models","text":""},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#1-ar-autoregressive-model","title":"1. \ud83d\udd01 AR (AutoRegressive) Model","text":""},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#concept","title":"\u2705 Concept:","text":"<p>The AR model predicts the value of a time series using its past values.</p>"},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#mathematical-formula","title":"\ud83d\udcd0 Mathematical Formula:","text":"\\[ y_t = c + \\phi_1 y_{t-1} + \\phi_2 y_{t-2} + \\dots + \\phi_p y_{t-p} + \\epsilon_t \\] <ul> <li>\\(y_t\\): current value</li> <li>\\(\\phi_i\\): AR coefficients</li> <li>\\(p\\): order</li> <li>\\(\\epsilon_t\\): white noise</li> </ul>"},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#python-code","title":"\ud83e\uddea Python Code:","text":"<pre><code>from statsmodels.tsa.ar_model import AutoReg\n\n# Fit AR model\nmodel_ar = AutoReg(df['Passengers'], lags=12).fit()\nprint(model_ar.summary())\n\n# Predict\npred_ar = model_ar.predict(start=len(df), end=len(df)+11, dynamic=False)\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#2-ma-moving-average-model","title":"2. \ud83d\udcc9 MA (Moving Average) Model","text":""},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#concept_1","title":"\u2705 Concept:","text":"<p>Uses past forecast errors to model the current value.</p>"},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#mathematical-formula_1","title":"\ud83d\udcd0 Mathematical Formula:","text":"\\[ y_t = \\mu + \\epsilon_t + \\theta_1 \\epsilon_{t-1} + \\theta_2 \\epsilon_{t-2} + \\dots + \\theta_q \\epsilon_{t-q} \\]"},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#python-code_1","title":"\ud83e\uddea Python Code:","text":"<pre><code>from statsmodels.tsa.arima.model import ARIMA\n\n# MA(q) is ARIMA(0,0,q)\nmodel_ma = ARIMA(df['Passengers'], order=(0, 0, 2)).fit()\nprint(model_ma.summary())\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#3-arma-autoregressive-moving-average","title":"3. \ud83d\udd01\ud83d\udcc9 ARMA (AutoRegressive Moving Average)","text":""},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#concept_2","title":"\u2705 Concept:","text":"<p>Combines AR and MA components.</p>"},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#mathematical-formula_2","title":"\ud83d\udcd0 Mathematical Formula:","text":"\\[ y_t = c + \\sum_{i=1}^{p} \\phi_i y_{t-i} + \\sum_{j=1}^{q} \\theta_j \\epsilon_{t-j} + \\epsilon_t \\]"},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#python-code_2","title":"\ud83e\uddea Python Code:","text":"<pre><code># ARMA(p,q) is ARIMA(p,0,q)\nmodel_arma = ARIMA(df['Passengers'], order=(2, 0, 2)).fit()\nprint(model_arma.summary())\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#4-arima-autoregressive-integrated-moving-average","title":"4. \ud83d\udd01\u23ec ARIMA (AutoRegressive Integrated Moving Average)","text":""},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#concept_3","title":"\u2705 Concept:","text":"<p>ARMA + differencing for non-stationary series.</p>"},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#formula","title":"\ud83d\udcd0 Formula:","text":"\\[ \\Delta^d y_t = c + \\sum_{i=1}^{p} \\phi_i \\Delta^d y_{t-i} + \\sum_{j=1}^{q} \\theta_j \\epsilon_{t-j} + \\epsilon_t \\] <ul> <li>\\(d\\): differencing order</li> </ul>"},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#python-code_3","title":"\ud83e\uddea Python Code:","text":"<pre><code># ARIMA(p,d,q) where d is the differencing order\nmodel_arima = ARIMA(df['Passengers'], order=(2, 1, 2)).fit()\nprint(model_arima.summary())\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#5-sarima-seasonal-arima","title":"5. \ud83d\udcc6 SARIMA (Seasonal ARIMA)","text":""},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#concept_4","title":"\u2705 Concept:","text":"<p>ARIMA + seasonal component</p>"},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#formula_1","title":"\ud83d\udcd0 Formula:","text":"<p>ARIMA(p,d,q)(P,D,Q,s)</p> <ul> <li>(p,d,q): non-seasonal</li> <li>(P,D,Q): seasonal</li> <li>\\(s\\): seasonal period (e.g., 12 for monthly)</li> </ul>"},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#python-code_4","title":"\ud83e\uddea Python Code:","text":"<pre><code>from statsmodels.tsa.statespace.sarimax import SARIMAX\n\n# SARIMA(p,d,q)(P,D,Q,s)\nmodel_sarima = SARIMAX(df['Passengers'], order=(1, 1, 1), seasonal_order=(1, 1, 1, 12)).fit()\nprint(model_sarima.summary())\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#6-sarimax-sarima-with-exogenous-variables","title":"6. \ud83d\udfe6 SARIMAX (SARIMA with Exogenous Variables)","text":""},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#concept_5","title":"\u2705 Concept:","text":"<p>SARIMA + external predictors (e.g., holidays, Fourier terms)</p>"},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#python-code_5","title":"\ud83e\uddea Python Code:","text":"<pre><code># Exogenous features (e.g., Fourier terms)\nexog = df[['sin_1', 'cos_1']]\n\nmodel_sarimax = SARIMAX(df['Passengers'], exog=exog, order=(1, 1, 1), seasonal_order=(1, 1, 1, 12)).fit()\nprint(model_sarimax.summary())\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#7-exponential-smoothing-ets","title":"7. \ud83d\udcc9 Exponential Smoothing (ETS)","text":""},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#concept_6","title":"\u2705 Concept:","text":"<p>Smoothing methods that estimate trend and seasonality using exponential decay.</p>"},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#types","title":"\ud83d\udcd0 Types:","text":"<ul> <li>Simple: no trend/seasonality</li> <li>Holt: linear trend</li> <li>Holt-Winters: trend + seasonality</li> </ul>"},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#python-code_6","title":"\ud83e\uddea Python Code:","text":"<pre><code>from statsmodels.tsa.holtwinters import ExponentialSmoothing\n\n# Holt-Winters (additive)\nmodel_ets = ExponentialSmoothing(\n    df['Passengers'], trend='add', seasonal='add', seasonal_periods=12\n).fit()\n\nprint(model_ets.summary())\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#visualization-of-predictions","title":"\ud83d\udcca Visualization of Predictions","text":"<pre><code>plt.figure(figsize=(10,5))\nplt.plot(df['Passengers'], label='Original')\nplt.plot(model_arima.predict(start=120, end=132), label='ARIMA Forecast')\nplt.plot(model_ets.fittedvalues, label='ETS Fitted')\nplt.legend()\nplt.title('Forecast Comparison')\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Classical%20Time%20Series%20models/#summary-table","title":"\u2705 Summary Table","text":"Model Handles Trend Handles Seasonality Needs Stationarity Exogenous Variables AR \u2705 \u274c \u2705 \u274c MA \u274c \u274c \u2705 \u274c ARMA \u2705 \u274c \u2705 \u274c ARIMA \u2705 \u274c \u274c (d handles it) \u274c SARIMA \u2705 \u2705 \u274c \u274c SARIMAX \u2705 \u2705 \u274c \u2705 ETS \u2705 \u2705 \u274c \u274c"},{"location":"Learning_resources/Time%20Series/Deep%20Learning%20Techniques/","title":"\ud83d\udd25 Deep Learning for Time Series with PyTorch","text":"<ul> <li>RNN</li> <li>LSTM</li> <li>GRU</li> <li>1D CNN</li> <li>Transformer-based models</li> </ul>"},{"location":"Learning_resources/Time%20Series/Deep%20Learning%20Techniques/#1-recurrent-neural-network-rnn","title":"\ud83d\udd01 1. Recurrent Neural Network (RNN)","text":""},{"location":"Learning_resources/Time%20Series/Deep%20Learning%20Techniques/#concept","title":"\ud83d\udcd8 Concept:","text":"<ul> <li>RNNs maintain a hidden state \\(h_t\\)</li> <li>Suitable for simple sequential patterns</li> </ul> \\[ h_t = \\tanh(W_h h_{t-1} + W_x x_t + b) \\]"},{"location":"Learning_resources/Time%20Series/Deep%20Learning%20Techniques/#pytorch-implementation","title":"\u2705 PyTorch Implementation:","text":"<pre><code>import torch\nimport torch.nn as nn\n\nclass RNNModel(nn.Module):\n    def __init__(self, input_size, hidden_size, output_size):\n        super(RNNModel, self).__init__()\n        self.rnn = nn.RNN(input_size, hidden_size, batch_first=True)\n        self.fc = nn.Linear(hidden_size, output_size)\n\n    def forward(self, x):\n        out, _ = self.rnn(x)\n        return self.fc(out[:, -1, :])\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Deep%20Learning%20Techniques/#2-long-short-term-memory-lstm","title":"\ud83e\udde0 2. Long Short-Term Memory (LSTM)","text":""},{"location":"Learning_resources/Time%20Series/Deep%20Learning%20Techniques/#concept_1","title":"\ud83d\udcd8 Concept:","text":"<ul> <li> <p>LSTM handles long-term dependencies with gates:</p> </li> <li> <p>Forget, Input, Output</p> </li> </ul> \\[ c_t = f_t \\cdot c_{t-1} + i_t \\cdot \\tilde{c}_t \\quad ; \\quad h_t = o_t \\cdot \\tanh(c_t) \\]"},{"location":"Learning_resources/Time%20Series/Deep%20Learning%20Techniques/#pytorch-implementation_1","title":"\u2705 PyTorch Implementation:","text":"<pre><code>class LSTMModel(nn.Module):\n    def __init__(self, input_size, hidden_size, output_size):\n        super(LSTMModel, self).__init__()\n        self.lstm = nn.LSTM(input_size, hidden_size, batch_first=True)\n        self.fc = nn.Linear(hidden_size, output_size)\n\n    def forward(self, x):\n        out, _ = self.lstm(x)\n        return self.fc(out[:, -1, :])\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Deep%20Learning%20Techniques/#3-gated-recurrent-unit-gru","title":"\ud83d\udeaa 3. Gated Recurrent Unit (GRU)","text":""},{"location":"Learning_resources/Time%20Series/Deep%20Learning%20Techniques/#concept_2","title":"\ud83d\udcd8 Concept:","text":"<ul> <li> <p>Simplified LSTM with fewer gates:</p> </li> <li> <p>Update &amp; Reset gates</p> </li> </ul> \\[ h_t = (1 - z_t) \\cdot h_{t-1} + z_t \\cdot \\tilde{h}_t \\]"},{"location":"Learning_resources/Time%20Series/Deep%20Learning%20Techniques/#pytorch-implementation_2","title":"\u2705 PyTorch Implementation:","text":"<pre><code>class GRUModel(nn.Module):\n    def __init__(self, input_size, hidden_size, output_size):\n        super(GRUModel, self).__init__()\n        self.gru = nn.GRU(input_size, hidden_size, batch_first=True)\n        self.fc = nn.Linear(hidden_size, output_size)\n\n    def forward(self, x):\n        out, _ = self.gru(x)\n        return self.fc(out[:, -1, :])\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Deep%20Learning%20Techniques/#4-1d-cnn-for-time-series","title":"\ud83e\uddf1 4. 1D CNN for Time Series","text":""},{"location":"Learning_resources/Time%20Series/Deep%20Learning%20Techniques/#concept_3","title":"\ud83d\udcd8 Concept:","text":"<ul> <li>Use convolution over time</li> <li>Good for local patterns</li> </ul>"},{"location":"Learning_resources/Time%20Series/Deep%20Learning%20Techniques/#pytorch-implementation_3","title":"\u2705 PyTorch Implementation:","text":"<pre><code>class CNN1DModel(nn.Module):\n    def __init__(self, input_channels, output_size, kernel_size=3):\n        super(CNN1DModel, self).__init__()\n        self.conv1 = nn.Conv1d(input_channels, 64, kernel_size)\n        self.relu = nn.ReLU()\n        self.pool = nn.AdaptiveMaxPool1d(1)\n        self.fc = nn.Linear(64, output_size)\n\n    def forward(self, x):\n        x = x.permute(0, 2, 1)  # (B, C, T)\n        x = self.pool(self.relu(self.conv1(x))).squeeze(-1)\n        return self.fc(x)\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Deep%20Learning%20Techniques/#5-transformer-based-models","title":"\ud83d\udd01 5. Transformer-Based Models","text":""},{"location":"Learning_resources/Time%20Series/Deep%20Learning%20Techniques/#concept_4","title":"\ud83d\udcd8 Concept:","text":"<ul> <li>Use self-attention to model global dependencies</li> <li>Handles long sequences well</li> </ul>"},{"location":"Learning_resources/Time%20Series/Deep%20Learning%20Techniques/#simplified-transformer-in-pytorch","title":"\u2705 Simplified Transformer in PyTorch:","text":"<pre><code>class TransformerModel(nn.Module):\n    def __init__(self, input_size, d_model, nhead, num_layers, output_size):\n        super(TransformerModel, self).__init__()\n        self.embedding = nn.Linear(input_size, d_model)\n        encoder_layer = nn.TransformerEncoderLayer(d_model=d_model, nhead=nhead)\n        self.transformer = nn.TransformerEncoder(encoder_layer, num_layers=num_layers)\n        self.fc = nn.Linear(d_model, output_size)\n\n    def forward(self, x):\n        x = self.embedding(x)\n        x = self.transformer(x)\n        return self.fc(x[:, -1, :])\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Deep%20Learning%20Techniques/#training-loop-generic","title":"\ud83e\uddea Training Loop (Generic)","text":"<pre><code>def train_model(model, train_loader, optimizer, criterion, epochs=10):\n    model.train()\n    for epoch in range(epochs):\n        total_loss = 0\n        for X_batch, y_batch in train_loader:\n            optimizer.zero_grad()\n            output = model(X_batch)\n            loss = criterion(output, y_batch)\n            loss.backward()\n            optimizer.step()\n            total_loss += loss.item()\n        print(f\"Epoch {epoch+1}: Loss = {total_loss:.4f}\")\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Deep%20Learning%20Techniques/#example-dataset-airpassengers-or-synthetic-sinusoid","title":"\ud83d\udcca Example Dataset: AirPassengers or Synthetic Sinusoid","text":"<pre><code>import numpy as np\nimport pandas as pd\n\nt = np.linspace(0, 100, 1000)\ndata = np.sin(0.2 * t) + np.random.normal(0, 0.1, len(t))\ndf = pd.DataFrame({'value': data})\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Deep%20Learning%20Techniques/#summary-table","title":"\ud83e\udde0 Summary Table","text":"Model Handles Long-Term Lightweight Interpretable Global View RNN \u274c \u2705 \u2705 \u274c LSTM \u2705 \u274c \u274c \u274c GRU \u2705 \u2705 \u274c \u274c 1D CNN \u274c (local only) \u2705 \u2705 \u274c Transformer \u2705 \u274c (costly) \u274c \u2705"},{"location":"Learning_resources/Time%20Series/Exponential%20Smoothing/","title":"\ud83d\udcc8 Exponential Smoothing (ETS) \u2013 Complete Guide","text":"<p>Exponential smoothing is a family of forecasting methods that assign exponentially decreasing weights to past observations. It's useful when you expect recent data to be more important than older data.</p>"},{"location":"Learning_resources/Time%20Series/Exponential%20Smoothing/#why-use-exponential-smoothing","title":"\ud83e\udde0 Why Use Exponential Smoothing?","text":"<ul> <li>Works well with short-term forecasts</li> <li>Handles trend and seasonality</li> <li>Easy to interpret and implement</li> </ul>"},{"location":"Learning_resources/Time%20Series/Exponential%20Smoothing/#types-of-exponential-smoothing","title":"\ud83e\udde9 Types of Exponential Smoothing","text":"Type Captures Use Case Simple Level only No trend or seasonality Holt\u2019s Linear Level + Trend Trending data Holt-Winters (Triple) Level + Trend + Seasonality Seasonal &amp; trending data"},{"location":"Learning_resources/Time%20Series/Exponential%20Smoothing/#1-simple-exponential-smoothing-ses","title":"1. \ud83d\udce6 Simple Exponential Smoothing (SES)","text":"<p>Used when the data has no trend or seasonality.</p>"},{"location":"Learning_resources/Time%20Series/Exponential%20Smoothing/#formula","title":"\ud83d\udcd0 Formula:","text":"\\[ \\hat{y}_{t+1} = \\alpha y_t + (1 - \\alpha) \\hat{y}_t \\] <ul> <li>\\(\\alpha\\): smoothing factor (0 &lt; \u03b1 &lt; 1)</li> </ul>"},{"location":"Learning_resources/Time%20Series/Exponential%20Smoothing/#python-code","title":"\u2705 Python Code:","text":"<pre><code>from statsmodels.tsa.holtwinters import SimpleExpSmoothing\n\nmodel = SimpleExpSmoothing(df['Passengers']).fit(smoothing_level=0.2)\nforecast = model.forecast(12)\n\ndf['Passengers'].plot(label='Actual', figsize=(10, 4))\nforecast.plot(label='Forecast', color='red')\nplt.title('Simple Exponential Smoothing')\nplt.legend()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Exponential%20Smoothing/#2-holts-linear-trend-method","title":"2. \ud83d\udcc8 Holt\u2019s Linear Trend Method","text":"<p>Used when the data has a trend but no seasonality.</p>"},{"location":"Learning_resources/Time%20Series/Exponential%20Smoothing/#formula_1","title":"\ud83d\udcd0 Formula:","text":"<ul> <li>Level: \\(\\ell_t = \\alpha y_t + (1 - \\alpha)(\\ell_{t-1} + b_{t-1})\\)</li> <li>Trend: \\(b_t = \\beta (\\ell_t - \\ell_{t-1}) + (1 - \\beta) b_{t-1}\\)</li> <li>Forecast: \\(\\hat{y}_{t+h} = \\ell_t + h b_t\\)</li> </ul>"},{"location":"Learning_resources/Time%20Series/Exponential%20Smoothing/#python-code_1","title":"\u2705 Python Code:","text":"<pre><code>from statsmodels.tsa.holtwinters import Holt\n\nmodel = Holt(df['Passengers']).fit(smoothing_level=0.8, smoothing_trend=0.2)\nforecast = model.forecast(12)\n\ndf['Passengers'].plot(label='Actual', figsize=(10, 4))\nforecast.plot(label='Forecast', color='green')\nplt.title(\"Holt's Linear Trend Forecast\")\nplt.legend()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Exponential%20Smoothing/#3-holt-winters-triple-exponential-smoothing","title":"3. \ud83d\udd01 Holt-Winters (Triple Exponential Smoothing)","text":"<p>Handles trend and seasonality. Supports additive and multiplicative seasonality.</p>"},{"location":"Learning_resources/Time%20Series/Exponential%20Smoothing/#use-when","title":"\ud83d\udd27 Use when:","text":"<ul> <li>Additive: Seasonality magnitude does not change over time.</li> <li>Multiplicative: Seasonality scales with trend (grows or shrinks).</li> </ul>"},{"location":"Learning_resources/Time%20Series/Exponential%20Smoothing/#equations-additive-form","title":"\ud83d\udcd0 Equations (Additive form):","text":"<ul> <li>Level: \\(\\ell_t = \\alpha (y_t - s_{t-m}) + (1 - \\alpha)(\\ell_{t-1} + b_{t-1})\\)</li> <li>Trend: \\(b_t = \\beta (\\ell_t - \\ell_{t-1}) + (1 - \\beta) b_{t-1}\\)</li> <li>Seasonal: \\(s_t = \\gamma (y_t - \\ell_t) + (1 - \\gamma) s_{t-m}\\)</li> <li>Forecast: \\(\\hat{y}_{t+h} = \\ell_t + h b_t + s_{t+h-m(k+1)}\\)</li> </ul> <p>Where:</p> <ul> <li>\\(m\\): seasonal period (e.g., 12 for monthly)</li> <li>\\(k\\): integer part of \\(\\frac{h-1}{m}\\)</li> </ul>"},{"location":"Learning_resources/Time%20Series/Exponential%20Smoothing/#python-code-additive-seasonality","title":"\u2705 Python Code (Additive Seasonality):","text":"<pre><code>from statsmodels.tsa.holtwinters import ExponentialSmoothing\n\nmodel = ExponentialSmoothing(\n    df['Passengers'],\n    seasonal='add',\n    trend='add',\n    seasonal_periods=12\n).fit()\n\nforecast = model.forecast(12)\n\ndf['Passengers'].plot(label='Actual', figsize=(10, 4))\nforecast.plot(label='Forecast', color='orange')\nplt.title(\"Holt-Winters Additive Forecast\")\nplt.legend()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Exponential%20Smoothing/#choosing-the-right-ets-model","title":"\ud83d\udd0d Choosing the Right ETS Model","text":"Pattern Model No trend, no seasonality Simple Exponential Trend only Holt\u2019s Linear Trend + Seasonality Holt-Winters (Add/Mult) <p>For automatic selection, you can use the <code>auto_arima</code> from <code>pmdarima</code> or <code>statsforecast</code> in production.</p>"},{"location":"Learning_resources/Time%20Series/Exponential%20Smoothing/#visualizing-components","title":"\ud83d\udcca Visualizing Components","text":"<p>Use the <code>.plot_components()</code> for decomposition in tools like Prophet or manually using <code>seasonal_decompose</code>.</p>"},{"location":"Learning_resources/Time%20Series/Exponential%20Smoothing/#key-points","title":"\ud83e\udde0 Key Points","text":"<ul> <li>ETS methods are suitable for short-term forecasting.</li> <li>Easy to interpret and fast to train.</li> <li>Great as baseline models before trying ARIMA or ML methods.</li> </ul>"},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/","title":"\ud83d\udcd8 Machine Learning for Time Series Forecasting","text":""},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#1-why-use-ml-for-time-series","title":"\u2705 1. Why Use ML for Time Series?","text":"<p>Unlike statistical models (e.g., ARIMA), machine learning:</p> <ul> <li>Doesn\u2019t assume linearity or stationarity</li> <li>Captures non-linear patterns and interactions</li> <li>Scales better for multivariate problems</li> </ul>"},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#2-traintest-split-in-time-series","title":"\u2705 2. Train/Test Split in Time Series","text":""},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#random-split-is-invalid-for-time-series","title":"\u274c Random split is invalid for time series!","text":"<ul> <li>Time series data is sequential</li> <li>You must preserve temporal order</li> </ul>"},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#solution-time-based-split-or-walk-forward-validation","title":"\u2705 Solution: Time-based split or Walk-Forward Validation","text":""},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#walk-forward-validation-process","title":"\ud83d\udd01 Walk-Forward Validation Process:","text":"<ol> <li>Train on <code>T1</code>, predict <code>T2</code></li> <li>Update training set with <code>T2</code>, predict <code>T3</code></li> <li>Repeat...</li> </ol>"},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#code-example","title":"\u2705 Code Example:","text":"<pre><code>from sklearn.model_selection import TimeSeriesSplit\n\ntscv = TimeSeriesSplit(n_splits=5)\nfor train_idx, test_idx in tscv.split(X):\n    X_train, X_test = X.iloc[train_idx], X.iloc[test_idx]\n    y_train, y_test = y.iloc[train_idx], y.iloc[test_idx]\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#3-feature-engineering-for-time-series","title":"\u2705 3. Feature Engineering for Time Series","text":""},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#key-features","title":"\ud83d\udcca Key features:","text":"<ul> <li>Lag features: past values (e.g., <code>y(t-1)</code>, <code>y(t-2)</code>)</li> <li>Rolling stats: rolling mean, std</li> <li>Date/time: month, day, hour, weekday, etc.</li> </ul>"},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#lag-features-example","title":"\u2705 Lag Features Example:","text":"<pre><code>for lag in range(1, 4):\n    df[f'lag_{lag}'] = df['value'].shift(lag)\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#rolling-stats-example","title":"\u2705 Rolling Stats Example:","text":"<pre><code>df['rolling_mean'] = df['value'].rolling(3).mean()\ndf['rolling_std'] = df['value'].rolling(3).std()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#time-features","title":"\u2705 Time Features:","text":"<pre><code>df['month'] = df.index.month\ndf['dayofweek'] = df.index.dayofweek\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#4-ml-models-for-forecasting","title":"\u2705 4. ML Models for Forecasting","text":"<p>Let\u2019s build a regression model to predict the next time point.</p>"},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#target","title":"\u2699\ufe0f Target:","text":"\\[ \\hat{y}_t = f(y_{t-1}, y_{t-2}, \\ldots, \\text{date features}) \\]"},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#a-linear-regression","title":"\ud83d\udd22 a. Linear Regression","text":""},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#code","title":"\u2705 Code:","text":"<pre><code>from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n\nrmse = mean_squared_error(y_test, y_pred, squared=False)\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#pros","title":"\ud83d\udcc8 Pros:","text":"<ul> <li>Fast and interpretable</li> <li>Performs well on linear trends</li> </ul>"},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#b-random-forest","title":"\ud83c\udf32 b. Random Forest","text":"<p>A tree-based ensemble model that captures non-linear patterns.</p>"},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#code_1","title":"\u2705 Code:","text":"<pre><code>from sklearn.ensemble import RandomForestRegressor\n\nmodel = RandomForestRegressor(n_estimators=100)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#tips","title":"\u2705 Tips:","text":"<ul> <li>Handles non-linearities and interactions</li> <li>Feature importance is interpretable</li> </ul>"},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#c-xgboost","title":"\u26a1 c. XGBoost","text":"<p>Gradient Boosted Trees: powerful &amp; state-of-the-art</p>"},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#code_2","title":"\u2705 Code:","text":"<pre><code>import xgboost as xgb\n\nmodel = xgb.XGBRegressor()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#advantages","title":"\u2705 Advantages:","text":"<ul> <li>Handles missing values</li> <li>Fast and accurate</li> <li>Scalable</li> </ul>"},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#5-multi-step-forecasting","title":"\ud83d\udd01 5. Multi-Step Forecasting","text":""},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#two-approaches","title":"\ud83e\udde9 Two Approaches:","text":"<ol> <li> <p>Recursive Forecasting</p> </li> <li> <p>Predict next step</p> </li> <li> <p>Feed it back into model to predict next</p> </li> <li> <p>Direct Forecasting</p> </li> <li> <p>Train one model per step (e.g., t+1, t+2)</p> </li> </ol>"},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#recursive-example","title":"\u2705 Recursive Example:","text":"<pre><code>def recursive_forecast(model, history, steps=5):\n    preds = []\n    for _ in range(steps):\n        input_data = history[-n_lags:].reshape(1, -1)\n        pred = model.predict(input_data)[0]\n        preds.append(pred)\n        history = np.append(history, pred)\n    return preds\n</code></pre>"},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#6-evaluation-metrics","title":"\u2705 6. Evaluation Metrics","text":"<p>Use these to assess accuracy:</p> <ul> <li>RMSE (Root Mean Squared Error):</li> </ul> \\[ RMSE = \\sqrt{\\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2} \\] <ul> <li>MAE (Mean Absolute Error):</li> </ul> \\[ MAE = \\frac{1}{n} \\sum_{i=1}^{n} |y_i - \\hat{y}_i| \\] <ul> <li>MAPE (Mean Absolute Percentage Error):</li> </ul> \\[ MAPE = \\frac{100}{n} \\sum_{i=1}^{n} \\left|\\frac{y_i - \\hat{y}_i}{y_i}\\right| \\]"},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#additional-tips","title":"\ud83e\udde0 Additional Tips","text":"<ul> <li>Scale your features (e.g., with <code>MinMaxScaler</code> or <code>StandardScaler</code>)</li> <li>Always validate on future (not random) data</li> <li>Start with linear, move to trees, test neural nets later</li> </ul>"},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#tools","title":"\ud83d\udcda Tools","text":"<ul> <li><code>scikit-learn</code>: regression models, pipelines</li> <li><code>xgboost</code>: fast boosted trees</li> <li><code>lightgbm</code>: efficient for large datasets</li> <li><code>optuna</code>: hyperparameter optimization</li> </ul>"},{"location":"Learning_resources/Time%20Series/Machine%20Learning%20Techniques/#final-thoughts","title":"\u2705 Final Thoughts","text":"ML Aspect Classical Time Series Lag-based features \u2705 Handles multivariate \u2705 Assumes stationarity \u274c Can model non-linearity \u2705"},{"location":"Learning_resources/Time%20Series/eda/","title":"\ud83d\udcca Exploratory Time Series Analysis (TSA)","text":"<p>Exploratory TSA is the first step in understanding the structure, behavior, and characteristics of your time series data. It includes visualizations, statistical summaries, and decomposition.</p>"},{"location":"Learning_resources/Time%20Series/eda/#1-plotting-time-series-data","title":"1. \ud83d\udcc8 Plotting Time Series Data","text":"<p>The first and most important step is to visualize the data.</p>"},{"location":"Learning_resources/Time%20Series/eda/#objective","title":"\ud83e\udde0 Objective:","text":"<ul> <li>Identify trend, seasonality, outliers, sudden shifts</li> </ul>"},{"location":"Learning_resources/Time%20Series/eda/#code-example","title":"\u2705 Code Example:","text":"<pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load sample time series data\nurl = 'https://raw.githubusercontent.com/jbrownlee/Datasets/master/airline-passengers.csv'\ndf = pd.read_csv(url, parse_dates=['Month'], index_col='Month')\n\n# Plot the raw time series\ndf.plot(title='Monthly Airline Passengers', figsize=(10, 5))\nplt.ylabel(\"Number of Passengers\")\nplt.grid(True)\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/eda/#2-rolling-statistics-moving-average-and-std","title":"2. \ud83d\udcc9 Rolling Statistics (Moving Average and Std)","text":"<p>Rolling statistics smooth the time series by computing averages over a moving window.</p>"},{"location":"Learning_resources/Time%20Series/eda/#objective_1","title":"\ud83e\udde0 Objective:","text":"<ul> <li>Denoise the series</li> <li>Visualize local trends and variation</li> </ul>"},{"location":"Learning_resources/Time%20Series/eda/#code-example_1","title":"\u2705 Code Example:","text":"<pre><code># Calculate rolling mean and std\nrolling_mean = df['Passengers'].rolling(window=12).mean()\nrolling_std = df['Passengers'].rolling(window=12).std()\n\n# Plot\nplt.figure(figsize=(10, 5))\nplt.plot(df['Passengers'], label='Original')\nplt.plot(rolling_mean, label='12-Month Rolling Mean')\nplt.plot(rolling_std, label='12-Month Rolling Std', linestyle='--')\nplt.title('Rolling Mean &amp; Standard Deviation')\nplt.legend()\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/eda/#3-acf-and-pacf-autocorrelation-partial-autocorrelation","title":"3. \ud83d\udd01 ACF and PACF (Autocorrelation &amp; Partial Autocorrelation)","text":""},{"location":"Learning_resources/Time%20Series/eda/#objective_2","title":"\ud83e\udde0 Objective:","text":"<ul> <li> <p>Detect seasonality, lags, and model order (e.g., ARIMA p and q)</p> </li> <li> <p>ACF shows correlation with all previous lags</p> </li> <li> <p>PACF shows direct correlation with specific lags, removing intermediate effects</p> </li> </ul>"},{"location":"Learning_resources/Time%20Series/eda/#code-example_2","title":"\u2705 Code Example:","text":"<pre><code>from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n\n# ACF\nplot_acf(df['Passengers'], lags=40)\nplt.title(\"Autocorrelation Function (ACF)\")\nplt.show()\n\n# PACF\nplot_pacf(df['Passengers'], lags=40, method='ywm')\nplt.title(\"Partial Autocorrelation Function (PACF)\")\nplt.show()\n</code></pre> <p>\u2139\ufe0f If your series is non-stationary, apply <code>.diff()</code> before plotting ACF/PACF.</p>"},{"location":"Learning_resources/Time%20Series/eda/#4-seasonal-decomposition-additive-vs-multiplicative","title":"4. \ud83d\udd0d Seasonal Decomposition (Additive vs Multiplicative)","text":"<p>Time series can be broken into Trend + Seasonality + Residual components.</p>"},{"location":"Learning_resources/Time%20Series/eda/#additive-model","title":"\u2705 Additive Model:","text":"\\[ Y(t) = T(t) + S(t) + R(t) \\]"},{"location":"Learning_resources/Time%20Series/eda/#multiplicative-model","title":"\u2705 Multiplicative Model:","text":"\\[ Y(t) = T(t) \\times S(t) \\times R(t) \\]"},{"location":"Learning_resources/Time%20Series/eda/#when-to-use-which","title":"\ud83e\udde0 When to use which?","text":"<ul> <li>Use additive if seasonal fluctuations remain constant over time</li> <li>Use multiplicative if seasonal fluctuations increase proportionally with trend</li> </ul>"},{"location":"Learning_resources/Time%20Series/eda/#code-example_3","title":"\u2705 Code Example:","text":"<pre><code>from statsmodels.tsa.seasonal import seasonal_decompose\n\n# Multiplicative Decomposition\nresult_mul = seasonal_decompose(df['Passengers'], model='multiplicative')\nresult_mul.plot()\nplt.suptitle(\"Multiplicative Decomposition\", fontsize=14)\nplt.show()\n\n# Additive Decomposition (may not fit well here)\nresult_add = seasonal_decompose(df['Passengers'], model='additive')\nresult_add.plot()\nplt.suptitle(\"Additive Decomposition\", fontsize=14)\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/eda/#summary-table","title":"\ud83d\udccc Summary Table","text":"Task Purpose Plot time series Understand structure, spot patterns Rolling mean/std Visualize local trend and variance ACF Detect seasonality, lag correlation PACF Determine AR order in ARIMA Decomposition Extract trend, seasonality, residual"},{"location":"Learning_resources/Time%20Series/foundation/","title":"Time Series Analysis: Fundamentals","text":""},{"location":"Learning_resources/Time%20Series/foundation/#what-is-a-time-series","title":"What is a Time Series?","text":"<p>A time series is a sequence of data points collected or recorded at successive points in time. These data points are typically spaced at uniform intervals such as hourly, daily, monthly, or yearly.</p>"},{"location":"Learning_resources/Time%20Series/foundation/#examples","title":"Examples:","text":"<ul> <li>Daily stock prices</li> <li>Monthly airline passengers</li> <li>Hourly temperature readings</li> <li>Annual GDP of a country</li> </ul> <p>Time series data allow us to:</p> <ul> <li>Analyze past trends</li> <li>Forecast future values</li> <li>Understand underlying processes</li> </ul>"},{"location":"Learning_resources/Time%20Series/foundation/#components-of-time-series","title":"Components of Time Series","text":"<p>Time series data can often be decomposed into several underlying components. Understanding these components helps in better analysis and forecasting.</p>"},{"location":"Learning_resources/Time%20Series/foundation/#1-trend","title":"1. Trend","text":"<p>The trend component represents the long-term progression of the series. It shows whether the data is increasing, decreasing, or remaining constant over time.</p> <p>Example: A steady rise in housing prices over several years.</p> <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load sample time series data\nurl = 'https://raw.githubusercontent.com/jbrownlee/Datasets/master/airline-passengers.csv'\ndf = pd.read_csv(url, parse_dates=['Month'], index_col='Month')\n\n# Plot trend\ndf['Passengers'].plot(title='Airline Passengers Trend', figsize=(10, 4))\nplt.xlabel('Date')\nplt.ylabel('Number of Passengers')\nplt.grid(True)\nplt.show()\n</code></pre> <p></p>"},{"location":"Learning_resources/Time%20Series/foundation/#2-seasonality","title":"2. Seasonality","text":"<p>Seasonality refers to periodic fluctuations that occur at regular intervals due to seasonal factors such as weather, holidays, or recurring events.</p> <p>Example: Increase in ice cream sales during summer.</p> <pre><code>from statsmodels.tsa.seasonal import seasonal_decompose\n\n# Decompose the time series\nresult = seasonal_decompose(df['Passengers'], model='multiplicative')\nresult.seasonal.plot(title='Seasonality Component')\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/foundation/#3-cyclicity","title":"3. Cyclicity","text":"<p>Cyclic behavior occurs when data exhibit rises and falls that are not of fixed period and are often related to economic or business cycles.</p> <p>Example: Economic expansions and recessions over decades.</p> <p>Cyclic patterns are harder to identify with short datasets, but long-term datasets may reveal cycles distinct from seasonality.</p> <pre><code># Plot full decomposition to see cycle trends (if any)\nresult.plot()\nplt.suptitle('Time Series Decomposition', fontsize=16)\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/foundation/#4-noise-residuals","title":"4. Noise (Residuals)","text":"<p>Noise is the random variation in the data that cannot be attributed to trend, seasonality, or cycles. It is considered unpredictable and should ideally be minimized.</p> <p>Example: Unexplained spikes in sales due to random events.</p> <pre><code># Plot residual (noise)\nresult.resid.plot(title='Noise/Residuals Component')\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/foundation/#time-series-vs-cross-sectional-data","title":"Time Series vs Cross-Sectional Data","text":"Feature Time Series Data Cross-Sectional Data Definition Observations collected over time Observations collected at a single point in time Focus Temporal ordering of data Comparison among units (e.g., people, regions) Example Daily temperature over a year Temperature readings across cities on one day <p>Key Difference: Time series analysis emphasizes the order and time-dependence of observations, whereas cross-sectional analysis looks at differences between subjects at the same point in time.</p>"},{"location":"Learning_resources/Time%20Series/foundation/#stationarity-white-noise","title":"Stationarity &amp; White Noise","text":""},{"location":"Learning_resources/Time%20Series/foundation/#stationarity","title":"Stationarity","text":"<p>A time series is stationary if its statistical properties (mean, variance, autocorrelation) are constant over time. Most forecasting methods require the data to be stationary.</p>"},{"location":"Learning_resources/Time%20Series/foundation/#types-of-stationarity","title":"Types of Stationarity:","text":"<ul> <li>Strict stationarity: Distribution does not change over time.</li> <li>Weak stationarity: Mean, variance, and autocovariance are time-invariant.</li> </ul> <p>Why important? Stationary series are easier to model and forecast.</p>"},{"location":"Learning_resources/Time%20Series/foundation/#checking-stationarity","title":"Checking Stationarity:","text":"<pre><code>from statsmodels.tsa.stattools import adfuller\n\n# Perform Augmented Dickey-Fuller test\nadf_result = adfuller(df['Passengers'])\nprint(f\"ADF Statistic: {adf_result[0]}\")\nprint(f\"p-value: {adf_result[1]}\")\n</code></pre>"},{"location":"Learning_resources/Time%20Series/foundation/#making-a-series-stationary","title":"Making a Series Stationary:","text":"<pre><code>df['diff'] = df['Passengers'].diff()\ndf['diff'].dropna().plot(title='Differenced Series')\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/foundation/#white-noise","title":"White Noise","text":"<p>White noise is a series of random variables that:</p> <ul> <li>Have constant mean and variance</li> <li>Have zero autocorrelation at all lags</li> </ul> <p>White noise is purely random and unpredictable. It's often used as a benchmark to determine whether a time series model has successfully captured the structure of a time series.</p> <pre><code>import numpy as np\n\n# Generate white noise series\nnp.random.seed(42)\nwhite_noise = np.random.normal(loc=0, scale=1, size=100)\nplt.plot(white_noise)\nplt.title('White Noise Time Series')\nplt.show()\n</code></pre> <p>Next Sections (optional extensions):</p> <ul> <li>Measuring Autocorrelation</li> <li>Decomposing Time Series in Python</li> <li>Augmented Dickey-Fuller Test</li> <li> <p>Rolling Windows &amp; Differencing</p> </li> <li> <p>Rolling Windows &amp; Differencing</p> </li> </ul>"},{"location":"Learning_resources/Time%20Series/fourier_series/","title":"Fourier series","text":"<p>Here is a complete tutorial on Fourier Series with detailed explanations, illustrations, and Python code examples \u2014 designed to help you understand how Fourier terms are used in time series analysis and feature engineering, especially for seasonality modeling.</p>"},{"location":"Learning_resources/Time%20Series/fourier_series/#fourier-series-for-time-series-analysis","title":"\ud83c\udfbc Fourier Series for Time Series Analysis","text":""},{"location":"Learning_resources/Time%20Series/fourier_series/#what-is-a-fourier-series","title":"\ud83d\udcd8 What is a Fourier Series?","text":"<p>The Fourier Series represents a function (especially periodic ones) as a sum of sine and cosine functions.</p> <p>For a time series \\(y(t)\\), the Fourier series approximation is:</p> \\[ y(t) = \\sum_{k=1}^{K} \\left[ a_k \\cos\\left(\\frac{2\\pi k t}{T} \\right) + b_k \\sin\\left(\\frac{2\\pi k t}{T} \\right) \\right] \\] <ul> <li>\\(T\\): period of the seasonal cycle (e.g., 12 for months, 365 for daily data)</li> <li>\\(K\\): number of harmonics (Fourier order)</li> <li>\\(a_k, b_k\\): coefficients for cosine and sine terms</li> </ul>"},{"location":"Learning_resources/Time%20Series/fourier_series/#why-use-fourier-terms","title":"\ud83d\udccc Why Use Fourier Terms?","text":"<ul> <li>Models complex and smooth seasonal patterns</li> <li>Often used in Prophet, ARIMA with exogenous variables, and neural nets</li> <li>Captures both short-term and long-term cyclic behaviors</li> </ul>"},{"location":"Learning_resources/Time%20Series/fourier_series/#fourier-series-in-python","title":"\ud83e\uddee Fourier Series in Python","text":""},{"location":"Learning_resources/Time%20Series/fourier_series/#function-to-create-fourier-features","title":"\ud83e\uddf0 Function to Create Fourier Features","text":"<pre><code>import numpy as np\nimport pandas as pd\n\ndef create_fourier_terms(df, time_col, period, order):\n    \"\"\"\n    Add Fourier terms to a time series DataFrame.\n\n    :param df: DataFrame with a datetime index\n    :param time_col: Name of the datetime index or column\n    :param period: Seasonality period (e.g., 365 for yearly)\n    :param order: Number of harmonics\n    :return: DataFrame with Fourier terms\n    \"\"\"\n    df = df.copy()\n    t = np.arange(len(df))\n\n    for k in range(1, order + 1):\n        df[f'sin_{k}'] = np.sin(2 * np.pi * k * t / period)\n        df[f'cos_{k}'] = np.cos(2 * np.pi * k * t / period)\n\n    return df\n</code></pre>"},{"location":"Learning_resources/Time%20Series/fourier_series/#example-simulate-seasonal-time-series","title":"\ud83d\udcc8 Example: Simulate Seasonal Time Series","text":"<pre><code>import matplotlib.pyplot as plt\n\n# Simulate a signal with yearly seasonality\nt = np.linspace(0, 365, 365)\ny = np.sin(2 * np.pi * t / 365) + 0.5 * np.sin(2 * np.pi * 2 * t / 365)\n\nplt.figure(figsize=(10, 4))\nplt.plot(t, y, label='Simulated Seasonal Signal')\nplt.title('Fourier Series Approximation of Seasonality')\nplt.xlabel('Day of Year')\nplt.ylabel('Signal')\nplt.legend()\nplt.grid(True)\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/fourier_series/#use-case-add-fourier-terms-to-real-data","title":"\ud83d\udcca Use Case: Add Fourier Terms to Real Data","text":"<pre><code># Example using airline passenger dataset\nurl = 'https://raw.githubusercontent.com/jbrownlee/Datasets/master/airline-passengers.csv'\ndf = pd.read_csv(url, parse_dates=['Month'], index_col='Month')\n\n# Add Fourier terms for seasonal pattern (monthly data: T = 12)\ndf_fourier = create_fourier_terms(df, time_col='Month', period=12, order=2)\n\ndf_fourier.head()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/fourier_series/#fourier-features-with-time-series-models","title":"\ud83e\udd16 Fourier Features with Time Series Models","text":"<p>You can use Fourier features as exogenous variables (X) in time series models like:</p>"},{"location":"Learning_resources/Time%20Series/fourier_series/#arima-sarimax","title":"\ud83e\udde0 ARIMA / SARIMAX:","text":"<pre><code>from statsmodels.tsa.statespace.sarimax import SARIMAX\n\nmodel = SARIMAX(\n    df['Passengers'], \n    exog=df_fourier[['sin_1', 'cos_1', 'sin_2', 'cos_2']], \n    order=(1, 1, 1), \n    seasonal_order=(1, 1, 1, 12)\n)\nresults = model.fit()\nprint(results.summary())\n</code></pre>"},{"location":"Learning_resources/Time%20Series/fourier_series/#prophet","title":"\ud83d\udd75\ufe0f Prophet:","text":"<pre><code>from prophet import Prophet\nfrom prophet.make_holidays import make_holidays_df\n\ndf_prophet = df.reset_index().rename(columns={\"Month\": \"ds\", \"Passengers\": \"y\"})\n\nm = Prophet()\nm.add_seasonality(name='yearly', period=365.25, fourier_order=4)\nm.fit(df_prophet)\n\nfuture = m.make_future_dataframe(periods=24, freq='MS')\nforecast = m.predict(future)\n\nm.plot(forecast)\n</code></pre>"},{"location":"Learning_resources/Time%20Series/fourier_series/#tips-on-choosing-period-and-order","title":"\ud83d\udccc Tips on Choosing Period and Order","text":"Use Case Period Fourier Order Monthly data (yearly seasonality) 12 2\u20136 Daily data (yearly seasonality) 365 4\u201310 Weekly data (annual seasonality) 52 2\u20138 <p>Higher order allows capturing more complex cycles but may lead to overfitting.</p>"},{"location":"Learning_resources/Time%20Series/fourier_series/#summary","title":"\u2705 Summary","text":"Concept Purpose Fourier Series Decompose signal into sine/cosine Period Time span of one seasonal cycle Order Number of harmonics Use cases ARIMA, Prophet, deep learning models Benefits Capture smooth and non-linear seasonality"},{"location":"Learning_resources/Time%20Series/fourier_series/#optional-export-fourier-features","title":"\ud83d\udcc1 Optional: Export Fourier Features","text":"<pre><code>df_fourier.to_csv(\"data_with_fourier_features.csv\")\n</code></pre>"},{"location":"Learning_resources/Time%20Series/fundamentals/","title":"Time Series Analysis: Fundamentals","text":""},{"location":"Learning_resources/Time%20Series/fundamentals/#what-is-a-time-series","title":"What is a Time Series?","text":"<p>A time series is a sequence of data points collected or recorded at successive points in time. These data points are typically spaced at uniform intervals such as hourly, daily, monthly, or yearly.</p>"},{"location":"Learning_resources/Time%20Series/fundamentals/#examples","title":"Examples:","text":"<ul> <li>Daily stock prices</li> <li>Monthly airline passengers</li> <li>Hourly temperature readings</li> <li>Annual GDP of a country</li> </ul> <p>Time series data allow us to:</p> <ul> <li>Analyze past trends</li> <li>Forecast future values</li> <li>Understand underlying processes</li> </ul>"},{"location":"Learning_resources/Time%20Series/fundamentals/#components-of-time-series","title":"Components of Time Series","text":"<p>Time series data can often be decomposed into several underlying components. Understanding these components helps in better analysis and forecasting.</p>"},{"location":"Learning_resources/Time%20Series/fundamentals/#1-trend","title":"1. Trend","text":"<p>The trend component represents the long-term progression of the series. It shows whether the data is increasing, decreasing, or remaining constant over time.</p> <p>Example: A steady rise in housing prices over several years.</p> <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load sample time series data\nurl = 'https://raw.githubusercontent.com/jbrownlee/Datasets/master/airline-passengers.csv'\ndf = pd.read_csv(url, parse_dates=['Month'], index_col='Month')\n\n# Plot trend\ndf['Passengers'].plot(title='Airline Passengers Trend', figsize=(10, 4))\nplt.xlabel('Date')\nplt.ylabel('Number of Passengers')\nplt.grid(True)\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/fundamentals/#2-seasonality","title":"2. Seasonality","text":"<p>Seasonality refers to periodic fluctuations that occur at regular intervals due to seasonal factors such as weather, holidays, or recurring events.</p> <p>Example: Increase in ice cream sales during summer.</p> <pre><code>from statsmodels.tsa.seasonal import seasonal_decompose\n\n# Decompose the time series\nresult = seasonal_decompose(df['Passengers'], model='multiplicative')\nresult.seasonal.plot(title='Seasonality Component')\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/fundamentals/#3-cyclicity","title":"3. Cyclicity","text":"<p>Cyclic behavior occurs when data exhibit rises and falls that are not of fixed period and are often related to economic or business cycles.</p> <p>Example: Economic expansions and recessions over decades.</p> <p>Cyclic patterns are harder to identify with short datasets, but long-term datasets may reveal cycles distinct from seasonality.</p> <pre><code># Plot full decomposition to see cycle trends (if any)\nresult.plot()\nplt.suptitle('Time Series Decomposition', fontsize=16)\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/fundamentals/#4-noise-residuals","title":"4. Noise (Residuals)","text":"<p>Noise is the random variation in the data that cannot be attributed to trend, seasonality, or cycles. It is considered unpredictable and should ideally be minimized.</p> <p>Example: Unexplained spikes in sales due to random events.</p> <pre><code># Plot residual (noise)\nresult.resid.plot(title='Noise/Residuals Component')\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/fundamentals/#time-series-vs-cross-sectional-data","title":"Time Series vs Cross-Sectional Data","text":"Feature Time Series Data Cross-Sectional Data Definition Observations collected over time Observations collected at a single point in time Focus Temporal ordering of data Comparison among units (e.g., people, regions) Example Daily temperature over a year Temperature readings across cities on one day <p>Key Difference: Time series analysis emphasizes the order and time-dependence of observations, whereas cross-sectional analysis looks at differences between subjects at the same point in time.</p>"},{"location":"Learning_resources/Time%20Series/fundamentals/#stationarity-white-noise","title":"Stationarity &amp; White Noise","text":""},{"location":"Learning_resources/Time%20Series/fundamentals/#stationarity","title":"Stationarity","text":"<p>A time series is stationary if its statistical properties (mean, variance, autocorrelation) are constant over time. Most forecasting methods require the data to be stationary.</p>"},{"location":"Learning_resources/Time%20Series/fundamentals/#types-of-stationarity","title":"Types of Stationarity:","text":"<ul> <li>Strict stationarity: Distribution does not change over time.</li> <li>Weak stationarity: Mean, variance, and autocovariance are time-invariant.</li> </ul> <p>Why important? Stationary series are easier to model and forecast.</p>"},{"location":"Learning_resources/Time%20Series/fundamentals/#checking-stationarity","title":"Checking Stationarity:","text":"<pre><code>from statsmodels.tsa.stattools import adfuller\n\n# Perform Augmented Dickey-Fuller test\nadf_result = adfuller(df['Passengers'])\nprint(f\"ADF Statistic: {adf_result[0]}\")\nprint(f\"p-value: {adf_result[1]}\")\n</code></pre>"},{"location":"Learning_resources/Time%20Series/fundamentals/#making-a-series-stationary","title":"Making a Series Stationary:","text":"<pre><code>df['diff'] = df['Passengers'].diff()\ndf['diff'].dropna().plot(title='Differenced Series')\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/fundamentals/#white-noise","title":"White Noise","text":"<p>White noise is a series of random variables that:</p> <ul> <li>Have constant mean and variance</li> <li>Have zero autocorrelation at all lags</li> </ul> <p>White noise is purely random and unpredictable. It's often used as a benchmark to determine whether a time series model has successfully captured the structure of a time series.</p> <pre><code>import numpy as np\n\n# Generate white noise series\nnp.random.seed(42)\nwhite_noise = np.random.normal(loc=0, scale=1, size=100)\nplt.plot(white_noise)\nplt.title('White Noise Time Series')\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/fundamentals/#basic-statistics","title":"\ud83d\udcca Basic Statistics","text":"<p>Basic statistics describe the central tendency and spread of a dataset.</p>"},{"location":"Learning_resources/Time%20Series/fundamentals/#1-mean-average","title":"1. Mean (Average)","text":"<p>The mean gives the central value of the time series.</p> \\[ \\mu = \\frac{1}{n} \\sum_{i=1}^{n} x_i \\] <p><pre><code>import pandas as pd\n\nmean_value = df['Passengers'].mean()\nprint(f\"Mean: {mean_value}\")\n</code></pre> 2. Median</p> <p>The median is the middle value that separates the higher half from the lower half of the data. <pre><code>median_value = df['Passengers'].median()\nprint(f\"Median: {median_value}\")\n</code></pre> 3. Variance</p> <p>Variance measures the average of the squared deviations from the mean. \u03c32=1n\u2211i=1n(xi\u2212\u03bc)2 \u03c32=n1\u200bi=1\u2211n\u200b(xi\u200b\u2212\u03bc)2</p> <pre><code>variance = df['Passengers'].var()\nprint(f\"Variance: {variance}\")\n</code></pre>"},{"location":"Learning_resources/Time%20Series/fundamentals/#covariance-and-autocorrelation","title":"\ud83d\udd04 Covariance and Autocorrelation","text":"<ol> <li>Covariance</li> </ol> <p>Covariance measures how two variables change together. Cov(X,Y)=1n\u2211i=1n(xi\u2212x\u02c9)(yi\u2212y\u02c9) Cov(X,Y)=n1\u200bi=1\u2211n\u200b(xi\u200b\u2212x\u02c9)(yi\u200b\u2212y\u02c9\u200b)</p>"},{"location":"Learning_resources/Time%20Series/fundamentals/#covariance-between-original-and-lagged-series","title":"Covariance between original and lagged series","text":"<p><pre><code>df['lag1'] = df['Passengers'].shift(1)\ncov = df[['Passengers', 'lag1']].cov()\nprint(cov)\n</code></pre> 2. Autocorrelation</p> <p>Autocorrelation (or serial correlation) measures the correlation of a time series with a lagged version of itself. \u03c1k=Cov(Xt,Xt\u2212k)\u03c32 \u03c1k\u200b=\u03c32Cov(Xt\u200b,Xt\u2212k\u200b)\u200b</p>"},{"location":"Learning_resources/Time%20Series/fundamentals/#autocorrelation-plot","title":"Autocorrelation plot","text":"<pre><code>from pandas.plotting import autocorrelation_plot\nautocorrelation_plot(df['Passengers'])\nplt.show()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/fundamentals/#lag-and-difference-operations","title":"\u23f1 Lag and Difference Operations","text":"<p>These operations are often used for preprocessing and making a time series stationary. 1. Lag</p> <p>Creates a shifted version of the time series. <pre><code>df['lag1'] = df['Passengers'].shift(1)\n</code></pre> 2. Difference</p> <p>Used to remove trends or seasonality and make the series stationary.</p> <p><pre><code>df['diff1'] = df['Passengers'].diff()\ndf['diff1'].dropna().plot(title='First Order Differenced Series')\nplt.show()\n</code></pre> Next Sections (optional extensions):</p> <ul> <li>Measuring Autocorrelation</li> <li>Decomposing Time Series in Python</li> <li>Augmented Dickey-Fuller Test</li> <li>Rolling Windows &amp; Differencing</li> </ul>"},{"location":"Learning_resources/Time%20Series/preprocessing/","title":"\u23f3 Time Series Preprocessing: Complete Guide","text":"<p>Time series preprocessing is a crucial step in time series analysis and modeling. Proper preparation improves model accuracy, stability, and interpretability. This guide covers the essential and advanced preprocessing techniques.</p>"},{"location":"Learning_resources/Time%20Series/preprocessing/#1-handling-missing-timestamps","title":"1. \ud83d\udcc5 Handling Missing Timestamps","text":"<p>Time series data should have consistent and continuous timestamps. If timestamps are missing, you should reindex the series to a complete timeline and handle the missing values.</p>"},{"location":"Learning_resources/Time%20Series/preprocessing/#code-example","title":"\ud83d\udd27 Code Example:","text":"<pre><code># Reindexing time series to complete monthly frequency\nfull_index = pd.date_range(start=df.index.min(), end=df.index.max(), freq='MS')\ndf = df.reindex(full_index)\ndf.index.name = 'Month'\n</code></pre>"},{"location":"Learning_resources/Time%20Series/preprocessing/#handling-missing-values","title":"\ud83e\udde0 Handling missing values:","text":"<pre><code># Fill missing with forward fill or interpolation\ndf['Passengers'].fillna(method='ffill', inplace=True)\n# Or use interpolation\ndf['Passengers'].interpolate(method='linear', inplace=True)\n</code></pre>"},{"location":"Learning_resources/Time%20Series/preprocessing/#2-resampling-up-sampling-down-sampling","title":"2. \ud83d\udd04 Resampling (Up-sampling &amp; Down-sampling)","text":"<p>Resampling changes the frequency of the time series.</p> <ul> <li>Down-sampling: Reduce frequency (e.g., daily \u2192 monthly)</li> <li>Up-sampling: Increase frequency (e.g., monthly \u2192 daily)</li> </ul>"},{"location":"Learning_resources/Time%20Series/preprocessing/#code-example_1","title":"\u2705 Code Example:","text":"<pre><code># Down-sample to yearly\ndf_yearly = df['Passengers'].resample('Y').mean()\n\n# Up-sample to daily with forward fill\ndf_daily = df['Passengers'].resample('D').ffill()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/preprocessing/#3-lag-features","title":"3. \u23ea Lag Features","text":"<p>Lag features help capture the relationship of past values with the current observation.</p>"},{"location":"Learning_resources/Time%20Series/preprocessing/#code-example_2","title":"\u2705 Code Example:","text":"<pre><code># Create lag features\nfor lag in range(1, 4):\n    df[f'lag_{lag}'] = df['Passengers'].shift(lag)\n</code></pre>"},{"location":"Learning_resources/Time%20Series/preprocessing/#4-rolling-features","title":"4. \ud83d\udcc9 Rolling Features","text":"<p>Rolling statistics (mean, std) are useful to capture short-term trends.</p>"},{"location":"Learning_resources/Time%20Series/preprocessing/#code-example_3","title":"\u2705 Code Example:","text":"<pre><code># Rolling mean and std\nwindow = 12\ndf['roll_mean'] = df['Passengers'].rolling(window=window).mean()\ndf['roll_std'] = df['Passengers'].rolling(window=window).std()\n</code></pre>"},{"location":"Learning_resources/Time%20Series/preprocessing/#5-differencing","title":"5. \ud83d\udd04 Differencing","text":"<p>Used to remove trend or seasonality to make a series stationary.</p>"},{"location":"Learning_resources/Time%20Series/preprocessing/#code-example_4","title":"\u2705 Code Example:","text":"<pre><code># First difference (to remove trend)\ndf['diff1'] = df['Passengers'].diff()\n\n# Seasonal difference (to remove seasonality)\ndf['diff_seasonal'] = df['Passengers'].diff(12)\n</code></pre>"},{"location":"Learning_resources/Time%20Series/preprocessing/#6-stationarity-check-adf-kpss","title":"6. \ud83d\udccf Stationarity Check (ADF &amp; KPSS)","text":""},{"location":"Learning_resources/Time%20Series/preprocessing/#augmented-dickey-fuller-adf-test","title":"\u2705 Augmented Dickey-Fuller (ADF) Test:","text":"<pre><code>from statsmodels.tsa.stattools import adfuller\n\nadf_result = adfuller(df['Passengers'].dropna())\nprint(f\"ADF Statistic: {adf_result[0]:.4f}\")\nprint(f\"p-value: {adf_result[1]:.4f}\")\n</code></pre>"},{"location":"Learning_resources/Time%20Series/preprocessing/#kpss-test","title":"\u2705 KPSS Test:","text":"<pre><code>from statsmodels.tsa.stattools import kpss\n\nkpss_result = kpss(df['Passengers'].dropna(), regression='c')\nprint(f\"KPSS Statistic: {kpss_result[0]:.4f}\")\nprint(f\"p-value: {kpss_result[1]:.4f}\")\n</code></pre> <ul> <li>ADF: Null = non-stationary \u2192 reject if p &lt; 0.05</li> <li>KPSS: Null = stationary \u2192 reject if p &lt; 0.05</li> </ul> <p>Use both to confirm results.</p>"},{"location":"Learning_resources/Time%20Series/preprocessing/#7-scaling-and-normalization-optional","title":"7. \ud83d\udd22 Scaling and Normalization (Optional)","text":"<p>Useful for models that are sensitive to scale (e.g., LSTMs, neural networks).</p>"},{"location":"Learning_resources/Time%20Series/preprocessing/#code-example_5","title":"\u2705 Code Example:","text":"<pre><code>from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\ndf['scaled'] = scaler.fit_transform(df[['Passengers']])\n</code></pre>"},{"location":"Learning_resources/Time%20Series/preprocessing/#8-outlier-detection-smoothing","title":"8. \ud83e\uddfc Outlier Detection &amp; Smoothing","text":""},{"location":"Learning_resources/Time%20Series/preprocessing/#techniques","title":"Techniques:","text":"<ul> <li>Z-score, IQR method</li> <li>Rolling median filter</li> <li>Winsorization</li> </ul>"},{"location":"Learning_resources/Time%20Series/preprocessing/#example","title":"Example:","text":"<pre><code>from scipy.stats import zscore\nz_scores = zscore(df['Passengers'].dropna())\noutliers = df[abs(z_scores) &gt; 3]\n</code></pre>"},{"location":"Learning_resources/Time%20Series/preprocessing/#9-feature-engineering-for-time-series","title":"9. \ud83d\udee0 Feature Engineering for Time Series","text":"<p>Creating new informative features can enhance model performance.</p>"},{"location":"Learning_resources/Time%20Series/preprocessing/#time-based-features","title":"\u2705 Time-based Features:","text":"<pre><code># Extracting time-based features\ndf['month'] = df.index.month\ndf['quarter'] = df.index.quarter\ndf['year'] = df.index.year\ndf['dayofweek'] = df.index.dayofweek\n</code></pre>"},{"location":"Learning_resources/Time%20Series/preprocessing/#fourier-series-features-to-capture-seasonality","title":"\u2705 Fourier Series Features (to capture seasonality):","text":"<pre><code>import numpy as np\n\ndef create_fourier_terms(df, period, order):\n    for i in range(1, order + 1):\n        df[f'sin_{i}'] = np.sin(2 * np.pi * i * df.index.dayofyear / period)\n        df[f'cos_{i}'] = np.cos(2 * np.pi * i * df.index.dayofyear / period)\n    return df\n\ndf = create_fourier_terms(df, period=365, order=3)\n</code></pre>"},{"location":"Learning_resources/Time%20Series/preprocessing/#summary-preprocessing-checklist","title":"\u2705 Summary: Preprocessing Checklist","text":"Task Description Missing timestamps Ensure consistent time index Resampling Change data frequency Lag features Include past values Rolling stats Capture local trends Differencing Remove trend or seasonality ADF/KPSS Test for stationarity Scaling Normalize for ML models Outlier handling Detect and smooth anomalies Feature Engineering Add temporal and Fourier-based features <p>Next Steps:</p> <ul> <li>Train/Test split by date</li> <li>Model fitting (ARIMA, Prophet, etc.)</li> </ul> <p>Would you like a code notebook or Markdown export of this complete preprocessing pipeline?</p>"},{"location":"Learning_resources/Time%20Series/roadmap/","title":"Roadmap","text":"<p>\ud83d\udd30 Phase 1: Foundations of Time Series \u2705 Topics:</p> <pre><code>What is a Time Series?\n\nComponents of Time Series:\n\n    Trend\n\n    Seasonality\n\n    Cyclicity\n\n    Noise (residuals)\n\nTime Series vs Cross-Sectional Data\n\nStationarity &amp; White Noise\n</code></pre> <p>\u2705 Math/Stats:</p> <pre><code>Basic statistics: mean, median, variance\n\nCovariance, autocorrelation\n\nLag and difference operations\n</code></pre> <p>\u2705 Tools:</p> <pre><code>Python, Jupyter Notebooks\n\nLibraries: pandas, matplotlib, seaborn\n</code></pre> <p>\u2705 Practice: <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\n\nts = pd.read_csv(\"air_passengers.csv\", parse_dates=['Month'], index_col='Month')\nts.plot()\nplt.show()\n</code></pre></p> <p>\ud83d\udcca Phase 2: Exploratory Time Series Analysis (TSA) \u2705 Topics:</p> <pre><code>Plotting time series data\n\nRolling statistics (moving average, std)\n\nACF (Autocorrelation Function) &amp; PACF (Partial ACF)\n\nSeasonal decomposition (additive vs multiplicative)\n</code></pre> <p>\u2705 Tools:</p> <pre><code>statsmodels.tsa, scipy.signal\n</code></pre> <p>\u2705 Code Sample: <pre><code>from statsmodels.tsa.seasonal import seasonal_decompose\n\nresult = seasonal_decompose(ts, model='multiplicative')\nresult.plot()\n</code></pre> \ud83e\uddea Phase 3: Time Series Preprocessing \u2705 Topics:</p> <pre><code>Handling missing timestamps\n\nResampling (up-sampling, down-sampling)\n\nLag features, rolling features\n\nDifferencing to remove trend/seasonality\n\nStationarity check (ADF/KPSS test)\n</code></pre> <p>\u2705 Code: <pre><code>from statsmodels.tsa.stattools import adfuller\n\nadf_result = adfuller(ts['#Passengers'])\nprint(f'p-value: {adf_result[1]}')\n</code></pre> \ud83d\udd01 Phase 4: Classical Time Series Models \u2705 Models:</p> <pre><code>AR (AutoRegressive)\n\nMA (Moving Average)\n\nARMA, ARIMA (AutoRegressive Integrated Moving Average)\n\nSARIMA / SARIMAX (seasonal ARIMA + exogenous vars)\n\nExponential Smoothing (ETS)\n</code></pre> <p>\u2705 Concepts:</p> <pre><code>Model Order Selection (AIC/BIC)\n\nModel Diagnostics\n\nForecasting &amp; Confidence Intervals\n</code></pre> <p>\u2705 Tools:</p> <pre><code>statsmodels.tsa.arima_model, pmdarima\n</code></pre> <p>\u2705 Code: <pre><code>from pmdarima import auto_arima\n\nmodel = auto_arima(ts, seasonal=True, m=12)\nmodel.summary()\n</code></pre> \ud83e\udde0 Phase 5: Machine Learning for Time Series \u2705 Techniques:</p> <pre><code>Train/Test split in time series (walk-forward validation)\n\nFeature engineering (lag/rolling windows)\n\nML Models: Linear Regression, Random Forest, XGBoost\n\nMulti-step forecasting\n</code></pre> <p>\u2705 Tools:</p> <pre><code>scikit-learn, xgboost, lightgbm\n</code></pre> <p>\u2705 Code: <pre><code>from sklearn.ensemble import RandomForestRegressor\n\n# Create lag features\ndf['lag1'] = df['value'].shift(1)\ndf.dropna(inplace=True)\n\nmodel = RandomForestRegressor()\nmodel.fit(df[['lag1']], df['value'])\n</code></pre> \ud83e\udde0 Phase 6: Deep Learning for Time Series \u2705 Models:</p> <pre><code>RNN\n\nLSTM (Long Short-Term Memory)\n\nGRU (Gated Recurrent Unit)\n\n1D CNNs for time series\n\nTransformer-based models (e.g., Time2Vec, Temporal Fusion Transformer)\n</code></pre> <p>\u2705 Tools:</p> <pre><code>TensorFlow/Keras, PyTorch\n</code></pre> <p>\u2705 Code Sample: <pre><code>from keras.models import Sequential\nfrom keras.layers import LSTM, Dense\n\nmodel = Sequential()\nmodel.add(LSTM(50, input_shape=(X_train.shape[1], X_train.shape[2])))\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mse')\nmodel.fit(X_train, y_train, epochs=10)\n</code></pre> \ud83d\udd0d Phase 7: Model Evaluation &amp; Forecasting \u2705 Metrics:</p> <pre><code>MAE, RMSE, MAPE\n\nCross-validation for time series (e.g., TimeSeriesSplit)\n\nVisualize forecast vs actual\n\nPrediction intervals\n</code></pre> <p>\u2705 Code: <pre><code>from sklearn.metrics import mean_absolute_error\n\nmae = mean_absolute_error(y_true, y_pred)\nprint(f'Mean Absolute Error: {mae}')\n</code></pre> \ud83d\uddc2\ufe0f Phase 8: Advanced Topics \u2705 Topics:</p> <pre><code>Anomaly Detection in Time Series\n\nTime Series Clustering\n\nMultivariate Time Series\n\nExogenous variables (SARIMAX, VAR)\n\nForecasting with missing data\n\nProbabilistic Forecasting\n</code></pre> <p>\u2705 Libraries:</p> <pre><code>Facebook Prophet\n\nNeuralProphet\n\ndarts (uniting classical + DL models)\n\nGluonTS, Kats, Nixtla\n</code></pre> <p>\ud83d\ude80 Phase 9: Project Ideas</p> <pre><code>Stock Price Forecasting (with LSTM &amp; ARIMA)\n\nElectricity Load Forecasting\n\nSales Forecasting for E-Commerce\n\nWeather Time Series Analysis\n\nAir Quality Index (AQI) Forecasting\n\nIoT Sensor Time Series Monitoring\n</code></pre> <p>\ud83d\udcda Recommended Resources Books:</p> <pre><code>\"Practical Time Series Forecasting\" \u2013 Galit Shmueli\n\n\"Time Series Analysis and Forecasting\" \u2013 Brockwell &amp; Davis\n\n\"Deep Learning for Time Series Forecasting\" \u2013 Jason Brownlee\n</code></pre> <p>Courses:</p> <pre><code>Coursera \u2013 Time Series Forecasting\n\nUdemy \u2013 Python for Time Series Data Analysis\n\nfast.ai Time Series Course\n</code></pre> <p>\ud83d\udee0\ufe0f Final Tools Mastery Checklist Tool    Use pandas  Time Series handling matplotlib/seaborn  Plotting statsmodels ARIMA, SARIMA pmdarima    Auto model selection scikit-learn    ML pipelines keras/pytorch   Deep learning darts, prophet  High-level time series models</p>"},{"location":"projects/ML/","title":"Machine Learning and Deep Learning Project Portfolio","text":"<p>Welcome to my collection of Machine Learning (ML) and Deep Learning (DL) projects! \ud83d\ude80 Here, you will find practical implementations, hands-on tutorials, and real-world use cases.  </p>"},{"location":"projects/ML/#machine-learning-with-pytorch-and-scikit-learn","title":"\ud83d\udcda Machine Learning with PyTorch and Scikit-Learn","text":"<p>This section contains all the source code from the book:  </p>"},{"location":"projects/ML/#machine-learning-with-pytorch-and-scikit-learn_1","title":"\"Machine Learning with PyTorch and Scikit-Learn\".","text":"<p>It is an excellent resource for understanding machine learning concepts and their implementations using:</p> <ul> <li>PyTorch</li> <li>Scikit-Learn</li> </ul> <p>Dive in and explore real-world ML techniques with clean, reusable code.  </p>"},{"location":"projects/ML/#local-rag-based-chatbot","title":"\ud83e\udd16 Local RAG-Based Chatbot","text":"<p>A Retrieval-Augmented Generation (RAG) based chatbot app! \ud83d\udcac</p>"},{"location":"projects/ML/#features","title":"Features:","text":"<ul> <li>Upload a PDF document.</li> <li>Ask any questions related to the document.</li> <li>Get accurate responses extracted from the uploaded document.</li> </ul>"},{"location":"projects/ML/#purpose","title":"Purpose:","text":"<p>Enhances question-answering systems by combining retrieval and generation capabilities.</p>"},{"location":"projects/ML/#neural-networks-from-scratch","title":"\ud83e\udde0 Neural Networks from Scratch","text":"<p>This project demystifies the inner workings of Neural Networks.  </p> <ul> <li>Learn to implement a neural network from scratch.</li> <li>Understand its building blocks, activation functions, and forward/backward propagation.</li> </ul> <p>This is ideal for beginners looking to dive deeper into AI fundamentals.</p>"},{"location":"projects/ML/#basics-of-neural-networks","title":"\ud83d\udee0\ufe0f Basics of Neural Networks","text":"<p>An introductory project to implement basic Neural Networks.  </p>"},{"location":"projects/ML/#what-youll-learn","title":"What You\u2019ll Learn:","text":"<ul> <li>Key neural network concepts.</li> <li>Step-by-step implementation of a simple NN.</li> </ul> <p>Great starting point for exploring deep learning frameworks.</p>"},{"location":"projects/ML/#credit-card-fraud-detection","title":"\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Credit Card Fraud Detection","text":"<p>A Classification-based Machine Learning project.  </p>"},{"location":"projects/ML/#objective","title":"Objective:","text":"<p>Predict if a credit card transaction is fraudulent or not.</p>"},{"location":"projects/ML/#technologies","title":"Technologies:","text":"<ul> <li>Machine Learning models for binary classification.</li> <li>Data preprocessing, feature scaling, and model evaluation.</li> </ul>"},{"location":"projects/ML/#use-case","title":"Use Case:","text":"<p>Improve fraud detection systems in financial sectors. \ud83d\udea8</p>"},{"location":"projects/ML/#bengaluru-house-price-prediction","title":"\ud83c\udfe0 Bengaluru House Price Prediction","text":"<p>A House Price Prediction project for Bengaluru City! \ud83d\udcca</p>"},{"location":"projects/ML/#objective_1","title":"Objective:","text":"<p>Develop a machine learning model to predict house prices based on features like: - Location - Area - Bedrooms - Amenities  </p>"},{"location":"projects/ML/#technologies_1","title":"Technologies:","text":"<ul> <li>Regression models for price prediction.</li> <li>Exploratory Data Analysis (EDA) and feature engineering.</li> </ul> <p>This project is perfect for learning regression techniques and tackling real estate datasets.</p>"},{"location":"projects/ML/#lets-build-together","title":"\ud83d\ude80 Let\u2019s Build Together","text":"<p>Feel free to explore these projects, clone repositories, and contribute! Whether you're a beginner or an expert, these projects will guide you in understanding core ML and DL concepts through practical coding.  </p> <p>Happy Learning! \ud83e\uddd1\u200d\ud83d\udcbb\u2728  </p>"},{"location":"projects/ai/","title":"\ud83d\ude80 AI Engineering Projects","text":"<p>Explore my collection of AI-powered projects utilizing tools like Mediapipe and YOLO for real-world applications.  </p>"},{"location":"projects/ai/#using-mediapipe-by-google","title":"\ud83d\udd90\ufe0f Using Mediapipe by Google","text":""},{"location":"projects/ai/#hand-detection-and-tracking","title":"\u270b Hand Detection and Tracking","text":"<ul> <li>Objective: Detect and track human hands in real-time video streams.  </li> <li>Technology: Mediapipe Hand Tracking API.  </li> <li>Applications:  </li> <li>Gesture recognition  </li> <li>Virtual sign language systems  </li> </ul>"},{"location":"projects/ai/#pose-estimation","title":"\ud83e\uddcd Pose Estimation","text":"<ul> <li>Objective: Detect and estimate human poses from real-time video feeds.  </li> <li>Technology: Mediapipe Pose Estimation API.  </li> <li>Applications:  </li> <li>Fitness tracking and posture correction  </li> <li>Motion-based games  </li> </ul>"},{"location":"projects/ai/#facemesh-detection","title":"\ud83e\uddd1\u200d\ud83c\udfa4 FaceMesh Detection","text":"<ul> <li>Objective: Detect human faces and generate a mesh in real time.  </li> <li>Technology: Mediapipe FaceMesh API.  </li> <li>Applications:  </li> <li>AR/VR applications (filters, effects)  </li> <li>Face recognition and tracking  </li> </ul>"},{"location":"projects/ai/#using-yolo-you-only-look-once","title":"\ud83d\udee3\ufe0f Using YOLO (You Only Look Once)","text":""},{"location":"projects/ai/#city-cctv-installation-and-vms","title":"\ud83d\udcf9 City CCTV Installation and VMS","text":"<ul> <li>Objective: Design and optimize a city-wide surveillance system.  </li> <li>Tasks:  </li> <li>Vehicle tracking  </li> <li>Vehicle counting using real-time video streams  </li> <li>Model: YOLOv8 (State-of-the-art object detection).  </li> <li>Tools:  </li> <li>OpenCV for real-time video processing  </li> <li>FastAPI for backend API services  </li> </ul>"},{"location":"projects/ai/#key-highlights","title":"\ud83c\udfaf Key Highlights","text":"<ul> <li>Cutting-edge AI models for real-world use cases.  </li> <li>Real-time performance with optimized tools and frameworks.  </li> <li>Scalable applications for smart cities, AR/VR, and computer vision.  </li> </ul> <p>Let me know if you'd like to collaborate or explore these projects further! \ud83d\ude80</p>"},{"location":"projects/data_science/","title":"Data Science Projects","text":""},{"location":"projects/data_science/#exploratory-data-analysis","title":"\ud83d\udcca Exploratory Data Analysis","text":"<ul> <li>Extensive analysis of datasets to uncover hidden insights.</li> <li>Tools: Jupyter, Seaborn, Matplotlib.</li> </ul>"},{"location":"static/about/","title":"About Me","text":""},{"location":"static/about/#santosh-kumar-sah","title":"\ud83d\udc68\u200d\ud83d\udcbb Santosh Kumar Sah","text":"<ul> <li>Education: B.Sc. CSIT Graduate  </li> <li>Current Role: AI Engineer at Pixelvirt Technology  </li> <li>Passions: Data Science, Machine Learning, and IoT  </li> </ul> <p>With expertise in Python, deep learning, and system design, I aim to create impactful AI solutions. Feel free to explore my journey!</p>"}]}